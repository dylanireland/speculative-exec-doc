import { JsonTypes } from 'typedjson';
import BaseSigner from './BaseSigner';
type CasperWalletProviderOptions = {
    timeout: number;
};
export declare class CasperWallet extends BaseSigner {
    isCasperWallet: boolean;
    private casperWalletProvider;
    constructor(options?: CasperWalletProviderOptions);
    private handleConnected;
    private handleDisconnected;
    private handleActiveKeyChanged;
    private handleLocked;
    private handleUnlocked;
    private handleTabChanged;
    private updateState;
    getVersion(): Promise<string>;
    /**
     * Get the connection status of the Casper Wallet extension
     * @returns `true` when currently connected at least one account, `false` otherwise.
     * @throws when wallet is locked (err.code: 1)
     */
    isConnected(): Promise<boolean>;
    connect(): Promise<string>;
    disconnect(): Promise<boolean>;
    changeAccount(): Promise<boolean>;
    signDeploy(deploy: {
        deploy: JsonTypes;
    }, signingPublicKey: string): Promise<{
        deploy: JsonTypes;
    }>;
    signMessage(message: string, signingPublicKey: string): Promise<string>;
    /**
     * Retrives active public key in hex format
     * @returns string active public key in hex format
     * @throws when wallet is locked (err.code: 1)
     * @throws when active account not approved to connect with the site (err.code: 2)
     */
    getActiveAccount(): Promise<string>;
    /**
     * Recreate CasperWalletProvider instance
     * @param options Casper WalletProvider options
     * @see {@link CasperWalletProviderOptions}
     */
    setOption(options?: CasperWalletProviderOptions): Promise<void>;
}
export {};
