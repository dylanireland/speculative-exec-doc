{"version":3,"file":"lib.node.js","mappings":"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","sources":["webpack://casper-js-sdk/webpack/universalModuleDefinition","webpack://casper-js-sdk/./src/config.ts","webpack://casper-js-sdk/./src/constants.ts","webpack://casper-js-sdk/./src/index.ts","webpack://casper-js-sdk/./src/lib/ByteConverters.ts","webpack://casper-js-sdk/./src/lib/CLValue/Abstract.ts","webpack://casper-js-sdk/./src/lib/CLValue/AccountHash.ts","webpack://casper-js-sdk/./src/lib/CLValue/Any.ts","webpack://casper-js-sdk/./src/lib/CLValue/Bool.ts","webpack://casper-js-sdk/./src/lib/CLValue/Builders.ts","webpack://casper-js-sdk/./src/lib/CLValue/ByteArray.ts","webpack://casper-js-sdk/./src/lib/CLValue/Key.ts","webpack://casper-js-sdk/./src/lib/CLValue/List.ts","webpack://casper-js-sdk/./src/lib/CLValue/Map.ts","webpack://casper-js-sdk/./src/lib/CLValue/Numeric.ts","webpack://casper-js-sdk/./src/lib/CLValue/Option.ts","webpack://casper-js-sdk/./src/lib/CLValue/PublicKey.ts","webpack://casper-js-sdk/./src/lib/CLValue/Result.ts","webpack://casper-js-sdk/./src/lib/CLValue/String.ts","webpack://casper-js-sdk/./src/lib/CLValue/Tuple.ts","webpack://casper-js-sdk/./src/lib/CLValue/URef.ts","webpack://casper-js-sdk/./src/lib/CLValue/Unit.ts","webpack://casper-js-sdk/./src/lib/CLValue/constants.ts","webpack://casper-js-sdk/./src/lib/CLValue/index.ts","webpack://casper-js-sdk/./src/lib/CLValue/utils.ts","webpack://casper-js-sdk/./src/lib/CasperClient.ts","webpack://casper-js-sdk/./src/lib/CasperHDKeys/CasperHDKey.ts","webpack://casper-js-sdk/./src/lib/CasperHDKeys/Ed25519HDKey.ts","webpack://casper-js-sdk/./src/lib/CasperHDKeys/Secp256K1HDKey.ts","webpack://casper-js-sdk/./src/lib/CasperHDKeys/hdkey.ts","webpack://casper-js-sdk/./src/lib/CasperHDKeys/index.ts","webpack://casper-js-sdk/./src/lib/ChecksummedHex.ts","webpack://casper-js-sdk/./src/lib/Contracts.ts","webpack://casper-js-sdk/./src/lib/Conversions.ts","webpack://casper-js-sdk/./src/lib/DeployUtil.ts","webpack://casper-js-sdk/./src/lib/Keys.ts","webpack://casper-js-sdk/./src/lib/RuntimeArgs.ts","webpack://casper-js-sdk/./src/lib/Serialization.ts","webpack://casper-js-sdk/./src/lib/SignedMessage.ts","webpack://casper-js-sdk/./src/lib/Signer/BaseSigner.ts","webpack://casper-js-sdk/./src/lib/Signer/CasperSigner.ts","webpack://casper-js-sdk/./src/lib/Signer/CasperWallet.ts","webpack://casper-js-sdk/./src/lib/Signer/error.ts","webpack://casper-js-sdk/./src/lib/Signer/index.ts","webpack://casper-js-sdk/./src/lib/StoredValue.ts","webpack://casper-js-sdk/./src/lib/index.ts","webpack://casper-js-sdk/./src/lib/types.ts","webpack://casper-js-sdk/./src/services/BalanceServiceByJsonRPC.ts","webpack://casper-js-sdk/./src/services/CasperServiceByJsonRPC.ts","webpack://casper-js-sdk/./src/services/EventStream.ts","webpack://casper-js-sdk/./src/services/ProviderTransport.ts","webpack://casper-js-sdk/./src/services/TimeService.ts","webpack://casper-js-sdk/./src/services/index.ts","webpack://casper-js-sdk/external commonjs \"@ethersproject/bignumber\"","webpack://casper-js-sdk/external commonjs \"@ethersproject/bytes\"","webpack://casper-js-sdk/external commonjs \"@ethersproject/constants\"","webpack://casper-js-sdk/external commonjs \"@noble/curves/ed25519\"","webpack://casper-js-sdk/external commonjs \"@noble/ed25519\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/_assert\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/blake2b\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/hmac\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/ripemd160\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/sha256\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/sha512\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/utils\"","webpack://casper-js-sdk/external commonjs \"@noble/secp256k1\"","webpack://casper-js-sdk/external commonjs \"@open-rpc/client-js\"","webpack://casper-js-sdk/external commonjs \"@open-rpc/client-js/build/Error\"","webpack://casper-js-sdk/external commonjs \"@open-rpc/client-js/build/Request\"","webpack://casper-js-sdk/external commonjs \"@open-rpc/client-js/build/transports/Transport\"","webpack://casper-js-sdk/external commonjs \"@scure/bip32\"","webpack://casper-js-sdk/external commonjs \"@scure/bip39\"","webpack://casper-js-sdk/external commonjs \"@scure/bip39/wordlists/english\"","webpack://casper-js-sdk/external commonjs \"humanize-duration\"","webpack://casper-js-sdk/external commonjs \"key-encoder\"","webpack://casper-js-sdk/external commonjs \"node-fetch\"","webpack://casper-js-sdk/external commonjs \"ts-results\"","webpack://casper-js-sdk/external commonjs \"typedjson\"","webpack://casper-js-sdk/external node-commonjs \"fs\"","webpack://casper-js-sdk/external node-commonjs \"http\"","webpack://casper-js-sdk/external node-commonjs \"https\"","webpack://casper-js-sdk/webpack/bootstrap","webpack://casper-js-sdk/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","export const TIME_API_URL = `worldtimeapi.org/api/timezone/UTC`;\n","export const DEFAULT_DEPLOY_TTL = 1800000;\n","export * from './services';\nexport * from './lib';\n","// migrate from casper-types/bytesrepr.rs\n// https://github.com/CasperLabs/casper-node/blob/4b9f01463845120f6c428a08e108da67b448abb1/types/src/bytesrepr.rs\n\n'use strict';\n\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { MaxUint256, NegativeOne, One, Zero } from '@ethersproject/constants';\nimport { arrayify, concat } from '@ethersproject/bytes';\nimport { blake2b } from '@noble/hashes/blake2b';\n\nimport { CLValue, CLValueParsers, ToBytes } from './CLValue';\n\n/**\n * Convert number to bytes\n * @param bitSize The bit size of the integer\n * @param signed `true` if the integer is signed, `false` if not\n * @returns `Uint8Array` buffer representation of the integer\n */\nexport const toBytesNumber = (bitSize: number, signed: boolean) => (\n  value: BigNumberish\n): Uint8Array => {\n  const val = BigNumber.from(value);\n\n  // Check bounds are safe for encoding\n  const maxUintValue = MaxUint256.mask(bitSize);\n\n  if (signed) {\n    const bounds = maxUintValue.mask(bitSize - 1); // 1 bit for signed\n    if (val.gt(bounds) || val.lt(bounds.add(One).mul(NegativeOne))) {\n      throw new Error('value out-of-bounds, value: ' + value);\n    }\n  } else if (val.lt(Zero) || val.gt(maxUintValue.mask(bitSize))) {\n    throw new Error('value out-of-bounds, value: ' + value);\n  }\n\n  const valTwos = val.toTwos(bitSize).mask(bitSize);\n\n  const bytes = arrayify(valTwos);\n\n  if (valTwos.gte(0)) {\n    // for positive number, we had to deal with paddings\n    if (bitSize > 64) {\n      // if zero just return zero\n      if (valTwos.eq(0)) {\n        return bytes;\n      }\n      // for u128, u256, u512, we have to and append extra byte for length\n      return concat([bytes, Uint8Array.from([bytes.length])])\n        .slice()\n        .reverse();\n    } else {\n      // for other types, we have to add padding 0s\n      const byteLength = bitSize / 8;\n      return concat([\n        bytes.slice().reverse(),\n        new Uint8Array(byteLength - bytes.length)\n      ]);\n    }\n  } else {\n    return bytes.reverse();\n  }\n};\n\n/**\n * Converts `u8` to little endian.\n */\nexport const toBytesU8 = toBytesNumber(8, false);\n\n/**\n * Converts `i32` to little endian.\n */\nexport const toBytesI32 = toBytesNumber(32, true);\n\n/**\n * Converts `u32` to little endian.\n */\nexport const toBytesU32 = toBytesNumber(32, false);\n\n/**\n * Converts `u64` to little endian.\n */\nexport const toBytesU64 = toBytesNumber(64, false);\n\n/**\n * Converts `i64` to little endian.\n */\nexport const toBytesI64 = toBytesNumber(64, true);\n\n/**\n * Converts `u128` to little endian.\n */\nexport const toBytesU128 = toBytesNumber(128, false);\n\n/**\n * Converts `u256` to little endian.\n */\nexport const toBytesU256 = toBytesNumber(256, false);\n\n/**\n * Converts `u512` to little endian.\n */\nexport const toBytesU512 = toBytesNumber(512, false);\n\n/**\n * @deprecated\n */\nexport const toBytesDeployHash = (deployHash: Uint8Array) => {\n  return deployHash;\n};\n\n/**\n * Serializes a string into an array of bytes\n * @param str The string to be converted\n * @returns A `Uint8Array` representation of the string\n */\nexport function toBytesString(str: string): Uint8Array {\n  const arr = Uint8Array.from(Buffer.from(str));\n  return concat([toBytesU32(arr.byteLength), arr]);\n}\n\n/**\n * Deserializes an array of bytes into a string\n * @param byte `Uint8Array` buffer of bytes to be deserialized\n * @returns The serialized string\n */\nexport const fromBytesString = (byte: Uint8Array): string => {\n  return Buffer.from(byte).toString();\n};\n\n/**\n * Serializes an array of u8, equal to Vec<u8> in rust.\n * @param arr `Uint8Array` buffer of u8 integers\n * @returns Serialized `Uint8Array` buffer\n */\nexport function toBytesArrayU8(arr: Uint8Array): Uint8Array {\n  return concat([toBytesU32(arr.length), arr]);\n}\n\n/**\n * Serializes a vector of values of type `T` into an array of bytes.\n * @param vec A vector of objects of generic type `T` which extends `ToBytes`\n * @returns `Uint8Array` buffer serialized from `vec`\n */\nexport const toBytesVector = <T extends ToBytes>(vec: T[]): Uint8Array => {\n  const valueByteList = vec.map(e => e.toBytes()).map(e => e.unwrap());\n  valueByteList.splice(0, 0, toBytesU32(vec.length));\n  return concat(valueByteList);\n};\n\n/**\n * Use blake2b to compute hash of ByteArray\n * @param x Byte array of type `Uint8Array` to compute the blake2b hash on\n * @returns `Uint8Array` buffer of the blake2b hash\n */\nexport function byteHash(x: Uint8Array): Uint8Array {\n  return blake2b(x, {\n    dkLen: 32\n  });\n}\n\n// TODO: Get rid after refactoring the whole\n/**\n * @experimental\n * Serializes a vector of values of type `T` into an array of bytes.\n * @param vec A vector of objects of generic type `T` which extends `ToBytes`\n * @returns `Uint8Array` buffer serialized from `vec`\n */\nexport const toBytesVectorNew = <T extends CLValue>(vec: T[]): Uint8Array => {\n  const valueByteList = vec.map(e => CLValueParsers.toBytes(e).unwrap());\n  valueByteList.splice(0, 0, toBytesU32(vec.length));\n  return concat(valueByteList);\n};\n\n// TODO: Legacy code\n/**\n * @deprecated\n */\nexport function toBytesBytesArray(arr: Uint8Array): Uint8Array {\n  return arr;\n}\n","import { Result, Ok, Err } from 'ts-results';\nimport { concat } from '@ethersproject/bytes';\n\nimport { toBytesArrayU8 } from '../ByteConverters';\nimport { CLErrorCodes, CLTypeTag } from './constants';\n\nimport {\n  matchTypeToCLType,\n  matchBytesToCLType,\n  matchByteParserByCLType\n} from './utils';\n\nimport { CLU32BytesParser } from './index';\n\nimport { encodeBase16, decodeBase16 } from '../Conversions';\n\nexport interface ResultAndRemainder<T, E> {\n  result: Result<T, E>;\n  remainder?: Uint8Array;\n}\n\nexport interface CLJSONFormat {\n  bytes: string;\n  cl_type: any;\n}\n\nexport type ToBytesResult = Result<Uint8Array, CLErrorCodes>;\n\nexport const resultHelper = <T, E>(\n  arg1: Result<T, E>,\n  arg2?: Uint8Array\n): ResultAndRemainder<T, E> => {\n  return { result: arg1, remainder: arg2 };\n};\n\nexport abstract class CLType {\n  abstract linksTo: string;\n  abstract tag: CLTypeTag;\n  toBytes(): Uint8Array {\n    return Uint8Array.from([this.tag]);\n  }\n  toString(): string {\n    return this.linksTo;\n  }\n  toJSON(): unknown {\n    return this.toString();\n  }\n}\n\nexport abstract class ToBytes {\n  abstract toBytes(): ToBytesResult;\n}\n\nexport abstract class CLValue {\n  isCLValue = true;\n  abstract clType(): CLType;\n  abstract value(): any;\n  abstract data: any;\n\n  toJSON(): any {\n    return this.data;\n  }\n}\n\nexport class CLValueParsers {\n  static fromJSON(json: any): Result<CLValue, string> {\n    const clType = matchTypeToCLType(json.cl_type);\n    const uint8bytes = decodeBase16(json.bytes);\n\n    const clEntity = CLValueParsers.fromBytes(uint8bytes, clType).unwrap();\n    return Ok(clEntity as CLValue);\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    type: CLType\n  ): Result<CLValue, CLErrorCodes> {\n    const parser = matchByteParserByCLType(type).unwrap();\n    return parser.fromBytes(bytes, type);\n  }\n\n  static toJSON(value: CLValue): Result<CLJSONFormat, CLErrorCodes> {\n    const rawBytes = CLValueParsers.toBytes(value).unwrap();\n    const bytes = encodeBase16(rawBytes);\n    const clType = value.clType().toJSON();\n    return Ok({ bytes: bytes, cl_type: clType });\n  }\n\n  static toBytes(value: CLValue): ToBytesResult {\n    const parser = matchByteParserByCLType(value.clType()).unwrap();\n    return parser.toBytes(value);\n  }\n\n  static toBytesWithType(value: CLValue): Result<Uint8Array, CLErrorCodes> {\n    const clTypeBytes = value.clType().toBytes();\n    const parser = matchByteParserByCLType(value.clType()).unwrap();\n    const bytes = parser.toBytes(value).unwrap();\n    const result = concat([toBytesArrayU8(bytes), clTypeBytes]);\n    return Ok(result);\n  }\n\n  static fromBytesWithType(\n    rawBytes: Uint8Array\n  ): Result<CLValue, CLErrorCodes> {\n    const {\n      result: CLU32res,\n      remainder: CLU32rem\n    } = new CLU32BytesParser().fromBytesWithRemainder(rawBytes);\n\n    const length = CLU32res.unwrap()\n      .value()\n      .toNumber();\n\n    if (!CLU32rem) {\n      return Err(CLErrorCodes.EarlyEndOfStream);\n    }\n    const valueBytes = CLU32rem.subarray(0, length);\n    const typeBytes = CLU32rem.subarray(length);\n    const { result: clType } = matchBytesToCLType(typeBytes);\n\n    const parser = matchByteParserByCLType(clType.unwrap()).unwrap();\n\n    const clValue = parser.fromBytes(valueBytes, clType.unwrap()).unwrap();\n\n    return Ok(clValue as CLValue);\n  }\n}\n\nexport abstract class CLValueBytesParsers {\n  fromBytes(\n    bytes: Uint8Array,\n    innerType: CLType\n  ): Result<CLValue, CLErrorCodes> {\n    const { result, remainder } = this.fromBytesWithRemainder(bytes, innerType);\n    if (remainder && remainder.length) {\n      return Err(CLErrorCodes.LeftOverBytes);\n    }\n    return result;\n  }\n\n  abstract fromBytesWithRemainder(\n    bytes: Uint8Array,\n    innerType?: CLType\n  ): ResultAndRemainder<CLValue, CLErrorCodes>;\n\n  abstract toBytes(val: CLValue): ToBytesResult;\n}\n","import { Ok, Err } from 'ts-results';\n\nimport {\n  CLValue,\n  CLValueBytesParsers,\n  CLType,\n  CLErrorCodes,\n  ResultAndRemainder,\n  ToBytesResult,\n  resultHelper,\n  ACCOUNT_HASH_TYPE,\n  CLByteArrayType,\n  ACCOUNT_HASH_LENGTH\n} from './index';\n\n// AccountHash is an alias, not a fully functional CLType so uses the same CLTypeTag as ByteArray\nexport class CLAccountHashType extends CLByteArrayType {\n  linksTo = ACCOUNT_HASH_TYPE;\n\n  constructor() {\n    super(ACCOUNT_HASH_LENGTH);\n  }\n}\n\nexport class CLAccountHashBytesParser extends CLValueBytesParsers {\n  toBytes(value: CLAccountHash): ToBytesResult {\n    return Ok(value.data);\n  }\n\n  fromBytesWithRemainder(\n    bytes: Uint8Array\n  ): ResultAndRemainder<CLAccountHash, CLErrorCodes> {\n    if (bytes.length < ACCOUNT_HASH_LENGTH) {\n      return resultHelper<CLAccountHash, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n\n    const accountHashBytes = bytes.subarray(0, ACCOUNT_HASH_LENGTH);\n    const accountHash = new CLAccountHash(accountHashBytes);\n    return resultHelper(Ok(accountHash), bytes.subarray(ACCOUNT_HASH_LENGTH));\n  }\n}\n\n/** A cryptographic public key. */\nexport class CLAccountHash extends CLValue {\n  data: Uint8Array;\n  /**\n   * Constructs a new `AccountHash`.\n   *\n   * @param v The bytes constituting the public key.\n   */\n  constructor(v: Uint8Array) {\n    super();\n    this.data = v;\n  }\n\n  clType(): CLType {\n    return new CLAccountHashType();\n  }\n\n  value(): Uint8Array {\n    return this.data;\n  }\n}\n","import {\n  CLType,\n} from './index';\nimport { ANY_TYPE, CLTypeTag } from './constants';\n\nexport class CLAnyType extends CLType {\n  linksTo = ANY_TYPE;\n  tag = CLTypeTag.Any;\n}\n","import { Ok, Err } from 'ts-results';\n\nimport {\n  CLType,\n  CLValue,\n  ResultAndRemainder,\n  ToBytesResult,\n  CLErrorCodes,\n  resultHelper,\n  CLValueBytesParsers\n} from './index';\nimport { BOOL_TYPE, CLTypeTag } from './constants';\n\nexport class CLBoolType extends CLType {\n  linksTo = BOOL_TYPE;\n  tag = CLTypeTag.Bool;\n}\n\nexport class CLBoolBytesParser extends CLValueBytesParsers {\n  toBytes(value: CLBool): ToBytesResult {\n    return Ok(new Uint8Array([value.value() ? 1 : 0]));\n  }\n\n  fromBytesWithRemainder(\n    bytes: Uint8Array\n  ): ResultAndRemainder<CLBool, CLErrorCodes> {\n    if (bytes.length === 0) {\n      return resultHelper<CLBool, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n    if (bytes[0] === 1) {\n      return resultHelper(Ok(new CLBool(true)), bytes.subarray(1));\n    } else if (bytes[0] === 0) {\n      return resultHelper(Ok(new CLBool(false)), bytes.subarray(1));\n    } else {\n      return resultHelper<CLBool, CLErrorCodes>(Err(CLErrorCodes.Formatting));\n    }\n  }\n}\n\nexport class CLBool extends CLValue {\n  data: boolean;\n  bytesParser: CLBoolBytesParser;\n\n  constructor(v: boolean) {\n    super();\n    this.data = v;\n  }\n\n  clType(): CLType {\n    return new CLBoolType();\n  }\n\n  value(): boolean {\n    return this.data;\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\nimport { Option } from 'ts-results';\n\nimport {\n  CLValue,\n  CLType,\n  CLBool,\n  CLBoolType,\n  CLU8,\n  CLU8Type,\n  CLU32,\n  CLU32Type,\n  CLU64,\n  CLU64Type,\n  CLU128,\n  CLU128Type,\n  CLU256,\n  CLU256Type,\n  CLU512,\n  CLU512Type,\n  CLI32,\n  CLI32Type,\n  CLI64,\n  CLI64Type,\n  CLKey,\n  CLKeyType,\n  CLKeyParameters,\n  CLUnit,\n  CLUnitType,\n  CLString,\n  CLStringType,\n  CLURef,\n  CLURefType,\n  AccessRights,\n  CLPublicKey,\n  CLPublicKeyType,\n  CLPublicKeyTag,\n  CLList,\n  CLListType,\n  CLTuple1,\n  CLTuple1Type,\n  CLTuple2,\n  CLTuple2Type,\n  CLTuple3,\n  CLTuple3Type,\n  CLOption,\n  CLOptionType,\n  CLMap,\n  CLMapType,\n  CLByteArray,\n  CLByteArrayType\n} from './index';\n\nexport class CLTypeBuilder {\n  static bool = (): CLBoolType => {\n    return new CLBoolType();\n  };\n\n  static u8 = (): CLU8Type => {\n    return new CLU8Type();\n  };\n\n  static u32 = (): CLU32Type => {\n    return new CLU32Type();\n  };\n\n  static i32 = (): CLI32Type => {\n    return new CLI32Type();\n  };\n\n  static u64 = (): CLU64Type => {\n    return new CLU64Type();\n  };\n\n  static i64 = (): CLI64Type => {\n    return new CLI64Type();\n  };\n\n  static u128 = (): CLU128Type => {\n    return new CLU128Type();\n  };\n\n  static u256 = (): CLU256Type => {\n    return new CLU256Type();\n  };\n\n  static u512 = (): CLU512Type => {\n    return new CLU512Type();\n  };\n\n  static unit = (): CLUnitType => {\n    return new CLUnitType();\n  };\n\n  static string = (): CLStringType => {\n    return new CLStringType();\n  };\n\n  static key = (): CLKeyType => {\n    return new CLKeyType();\n  };\n\n  static uref = (): CLURefType => {\n    return new CLURefType();\n  };\n\n  static list<T extends CLType>(val: T): CLListType<T> {\n    return new CLListType(val);\n  }\n\n  static tuple1([t0]: [CLType]): CLTuple1Type {\n    return new CLTuple1Type([t0]);\n  }\n\n  static tuple2([t0, t1]: [CLType, CLType]): CLTuple2Type {\n    return new CLTuple2Type([t0, t1]);\n  }\n\n  static tuple3([t0, t1, t2]: [CLType, CLType, CLType]): CLTuple3Type {\n    return new CLTuple3Type([t0, t1, t2]);\n  }\n\n  static option<T extends CLType>(type: T): CLOptionType<T> {\n    return new CLOptionType(type);\n  }\n\n  static map<K extends CLType, V extends CLType>(val: [K, V]): CLMapType<K, V> {\n    return new CLMapType(val);\n  }\n\n  static publicKey(): CLPublicKeyType {\n    return new CLPublicKeyType();\n  }\n\n  static byteArray(size: number): CLByteArrayType {\n    return new CLByteArrayType(size);\n  }\n}\n\nexport class CLValueBuilder {\n  static bool = (val: boolean): CLBool => {\n    return new CLBool(val);\n  };\n\n  static u8 = (val: BigNumberish): CLU8 => {\n    return new CLU8(val);\n  };\n\n  static u32 = (val: BigNumberish): CLU32 => {\n    return new CLU32(val);\n  };\n\n  static i32 = (val: BigNumberish): CLI32 => {\n    return new CLI32(val);\n  };\n\n  static u64 = (val: BigNumberish): CLU64 => {\n    return new CLU64(val);\n  };\n\n  static i64 = (val: BigNumberish): CLI64 => {\n    return new CLI64(val);\n  };\n\n  static u128 = (val: BigNumberish): CLU128 => {\n    return new CLU128(val);\n  };\n\n  static u256 = (val: BigNumberish): CLU256 => {\n    return new CLU256(val);\n  };\n\n  static u512 = (val: BigNumberish): CLU512 => {\n    return new CLU512(val);\n  };\n\n  static unit = (): CLUnit => {\n    return new CLUnit();\n  };\n\n  static string = (val: string): CLString => {\n    return new CLString(val);\n  };\n\n  static key = (val: CLKeyParameters): CLKey => {\n    return new CLKey(val);\n  };\n\n  static uref = (val: Uint8Array, accessRights: AccessRights): CLURef => {\n    return new CLURef(val, accessRights);\n  };\n\n  static list<T extends CLValue>(val: T[]): CLList<T> {\n    return new CLList(val);\n  }\n\n  static tuple1([t0]: [CLValue]): CLTuple1 {\n    return new CLTuple1([t0]);\n  }\n\n  static tuple2([t0, t1]: [CLValue, CLValue]): CLTuple2 {\n    return new CLTuple2([t0, t1]);\n  }\n\n  static tuple3([t0, t1, t2]: [CLValue, CLValue, CLValue]): CLTuple3 {\n    return new CLTuple3([t0, t1, t2]);\n  }\n\n  static option(data: Option<CLValue>, innerType?: CLType): CLOption<CLValue> {\n    return new CLOption(data, innerType);\n  }\n\n  static map<K extends CLValue, V extends CLValue>(\n    val: [K, V][] | [CLType, CLType]\n  ): CLMap<K, V> {\n    return new CLMap(val);\n  }\n\n  static publicKey(rawPublicKey: Uint8Array, tag: CLPublicKeyTag): CLPublicKey {\n    return new CLPublicKey(rawPublicKey, tag);\n  }\n\n  static byteArray(bytes: Uint8Array): CLByteArray {\n    return new CLByteArray(bytes);\n  }\n}\n","import { Ok } from 'ts-results';\nimport { concat } from '@ethersproject/bytes';\n\nimport {\n  CLType,\n  CLValue,\n  ToBytesResult,\n  CLValueBytesParsers,\n  CLErrorCodes,\n  ResultAndRemainder,\n  resultHelper\n} from './index';\nimport { BYTE_ARRAY_TYPE, CLTypeTag } from './constants';\nimport { toBytesU32 } from '../ByteConverters';\n\nexport class CLByteArrayType extends CLType {\n  linksTo = BYTE_ARRAY_TYPE;\n  tag = CLTypeTag.ByteArray;\n\n  size: number;\n\n  constructor(size: number) {\n    super();\n    this.size = size;\n  }\n\n  toBytes(): Uint8Array {\n    return concat([Uint8Array.from([this.tag]), toBytesU32(this.size)]);\n  }\n\n  toJSON(): { [BYTE_ARRAY_TYPE]: number } {\n    return {\n      [BYTE_ARRAY_TYPE]: this.size\n    };\n  }\n}\n\nexport class CLByteArrayBytesParser extends CLValueBytesParsers {\n  toBytes(value: CLByteArray): ToBytesResult {\n    return Ok(value.data);\n  }\n\n  fromBytesWithRemainder(\n    bytes: Uint8Array,\n    type: CLByteArrayType\n  ): ResultAndRemainder<CLByteArray, CLErrorCodes> {\n    const byteArray = new CLByteArray(bytes.subarray(0, type.size));\n    return resultHelper(Ok(byteArray), bytes.subarray(type.size));\n  }\n}\n\nexport class CLByteArray extends CLValue {\n  data: Uint8Array;\n  /**\n   * Constructs a new `CLByteArray`.\n   *\n   * @param v The bytes array with max length 32.\n   */\n  constructor(v: Uint8Array) {\n    super();\n    this.data = v;\n  }\n\n  clType(): CLType {\n    return new CLByteArrayType(this.data.length);\n  }\n\n  value(): Uint8Array {\n    return this.data;\n  }\n}\n","// NOTE: Revisit in future based on https://docs.rs/casper-types/1.0.1/casper_types/enum.Key.html\n\nimport { concat } from '@ethersproject/bytes';\nimport { Ok, Err } from 'ts-results';\n\nimport {\n  CLType,\n  CLValue,\n  CLByteArray,\n  CLByteArrayType,\n  CLByteArrayBytesParser,\n  CLURef,\n  CLURefBytesParser,\n  CLAccountHash,\n  CLAccountHashBytesParser,\n  CLErrorCodes,\n  KeyVariant,\n  ResultAndRemainder,\n  ToBytesResult,\n  CLValueBytesParsers,\n  CLValueParsers,\n  CLPublicKey,\n  resultHelper,\n  ACCOUNT_HASH_TYPE,\n  BYTE_ARRAY_TYPE,\n  UREF_TYPE\n} from './index';\nimport { KEY_TYPE, CLTypeTag } from './constants';\n\nconst HASH_LENGTH = 32;\n\nexport class CLKeyType extends CLType {\n  linksTo = KEY_TYPE;\n  tag = CLTypeTag.Key;\n}\n\nexport class CLKeyBytesParser extends CLValueBytesParsers {\n  toBytes(value: CLKey): ToBytesResult {\n    if (value.isAccount()) {\n      return Ok(\n        concat([\n          Uint8Array.from([KeyVariant.Account]),\n          new CLAccountHashBytesParser()\n            .toBytes(value.data as CLAccountHash)\n            .unwrap()\n        ])\n      );\n    }\n    if (value.isHash()) {\n      return Ok(\n        concat([\n          Uint8Array.from([KeyVariant.Hash]),\n          new CLByteArrayBytesParser()\n            .toBytes(value.data as CLByteArray)\n            .unwrap()\n        ])\n      );\n    }\n    if (value.isURef()) {\n      return Ok(\n        concat([\n          Uint8Array.from([KeyVariant.URef]),\n          CLValueParsers.toBytes(value.data as CLURef).unwrap()\n        ])\n      );\n    }\n\n    throw new Error('Unknown byte types');\n  }\n\n  fromBytesWithRemainder(\n    bytes: Uint8Array\n  ): ResultAndRemainder<CLKey, CLErrorCodes> {\n    if (bytes.length < 1) {\n      return resultHelper<CLKey, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n\n    const tag = bytes[0];\n\n    if (tag === KeyVariant.Hash) {\n      const hashBytes = bytes.subarray(1);\n      const {\n        result: hashResult,\n        remainder: hashRemainder\n      } = new CLByteArrayBytesParser().fromBytesWithRemainder(\n        hashBytes,\n        new CLByteArrayType(HASH_LENGTH)\n      );\n      const hash = hashResult.unwrap();\n      const key = new CLKey(hash);\n      return resultHelper(Ok(key), hashRemainder);\n    } else if (tag === KeyVariant.URef) {\n      const {\n        result: urefResult,\n        remainder: urefRemainder\n      } = new CLURefBytesParser().fromBytesWithRemainder(bytes.subarray(1));\n      if (urefResult.ok) {\n        const key = new CLKey(urefResult.val);\n        return resultHelper(Ok(key), urefRemainder);\n      } else {\n        return resultHelper<CLKey, CLErrorCodes>(Err(urefResult.val));\n      }\n    } else if (tag === KeyVariant.Account) {\n      const {\n        result: accountHashResult,\n        remainder: accountHashRemainder\n      } = new CLAccountHashBytesParser().fromBytesWithRemainder(\n        bytes.subarray(1)\n      );\n      if (accountHashResult.ok) {\n        const key = new CLKey(accountHashResult.val);\n        return resultHelper(Ok(key), accountHashRemainder);\n      } else {\n        return resultHelper<CLKey, CLErrorCodes>(Err(accountHashResult.val));\n      }\n    } else {\n      return resultHelper<CLKey, CLErrorCodes>(Err(CLErrorCodes.Formatting));\n    }\n  }\n}\n\nexport type CLKeyParameters =\n  | CLByteArray\n  | CLURef\n  | CLAccountHash\n  | CLPublicKey;\n\nexport class CLKey extends CLValue {\n  data: CLKeyParameters;\n\n  constructor(v: CLKeyParameters) {\n    super();\n    if (!v.isCLValue) {\n      throw Error('Provided parameter is not a valid CLValue');\n    }\n    if (v.clType().tag === CLTypeTag.PublicKey) {\n      this.data = new CLAccountHash((v as CLPublicKey).toAccountHash());\n      return;\n    }\n    this.data = v;\n  }\n\n  clType(): CLType {\n    return new CLKeyType();\n  }\n\n  value(): CLKeyParameters {\n    return this.data;\n  }\n\n  toJSON(): string {\n    return Buffer.from(this.data.value() as Uint8Array).toString('hex');\n  }\n\n  isHash(): boolean {\n    return this.data.clType().linksTo === BYTE_ARRAY_TYPE;\n  }\n\n  isURef(): boolean {\n    return this.data.clType().linksTo === UREF_TYPE;\n  }\n\n  isAccount(): boolean {\n    return this.data.clType().linksTo === ACCOUNT_HASH_TYPE;\n  }\n}\n","import { Ok, Err } from 'ts-results';\nimport { concat } from '@ethersproject/bytes';\n\nimport {\n  CLValue,\n  CLType,\n  ToBytes,\n  CLErrorCodes,\n  resultHelper,\n  ResultAndRemainder,\n  ToBytesResult,\n  CLValueBytesParsers,\n  CLU32BytesParser,\n  matchByteParserByCLType\n} from './index';\nimport { toBytesVectorNew } from '../ByteConverters';\n\nimport { LIST_TYPE, CLTypeTag } from './constants';\n\nexport class CLListType<T extends CLType> extends CLType {\n  inner: T;\n  linksTo = LIST_TYPE;\n  tag = CLTypeTag.List;\n\n  constructor(inner: T) {\n    super();\n    this.inner = inner;\n  }\n\n  toString(): string {\n    return `${LIST_TYPE} (${this.inner.toString()})`;\n  }\n\n  toBytes(): Uint8Array {\n    return concat([Uint8Array.from([this.tag]), this.inner.toBytes()]);\n  }\n\n  toJSON(): any {\n    const inner = this.inner.toJSON();\n    return {\n      [LIST_TYPE]: inner\n    };\n  }\n}\n\nexport class CLListBytesParser extends CLValueBytesParsers {\n  toBytes(value: CLList<CLValue & ToBytes>): ToBytesResult {\n    // TODO: Change when there will not be any legacy code\n    return Ok(toBytesVectorNew(value.data));\n  }\n\n  fromBytesWithRemainder(\n    bytes: Uint8Array,\n    listType: CLListType<CLType>\n  ): ResultAndRemainder<CLList<CLValue>, CLErrorCodes> {\n    const {\n      result: u32Res,\n      remainder: u32Rem\n    } = new CLU32BytesParser().fromBytesWithRemainder(bytes);\n\n    if (!u32Res.ok) {\n      return resultHelper<CLList<CLValue>, CLErrorCodes>(Err(u32Res.val));\n    }\n\n    const size = u32Res.val.value().toNumber();\n\n    const vec = [];\n\n    let remainder = u32Rem;\n\n    const parser = matchByteParserByCLType(listType.inner).unwrap();\n\n    for (let i = 0; i < size; i++) {\n      if (!remainder)\n        return resultHelper<CLList<CLValue>, CLErrorCodes>(\n          Err(CLErrorCodes.EarlyEndOfStream)\n        );\n\n      const { result: vRes, remainder: vRem } = parser.fromBytesWithRemainder(\n        remainder,\n        listType.inner\n      );\n\n      if (!vRes.ok) {\n        return resultHelper<CLList<CLValue>, CLErrorCodes>(Err(vRes.val));\n      }\n      vec.push(vRes.val);\n      remainder = vRem;\n    }\n\n    // Support for creating empty lists from bytes\n    if (vec.length === 0) {\n      return resultHelper(Ok(new CLList(listType.inner)), remainder);\n    }\n\n    return resultHelper(Ok(new CLList(vec)), remainder);\n  }\n}\n\nexport class CLList<T extends CLValue> extends CLValue {\n  data: Array<T>;\n  vectorType: CLType;\n\n  constructor(v: Array<T> | CLType) {\n    super();\n    if (Array.isArray(v) && v[0].clType && v[0].clType()) {\n      const refType = v[0].clType();\n      if (\n        v.every(i => {\n          return i.clType().toString() === refType.toString();\n        })\n      ) {\n        this.data = v;\n        this.vectorType = refType;\n      } else {\n        throw Error('Invalid data provided.');\n      }\n    } else if (v instanceof CLType) {\n      this.vectorType = v;\n      this.data = [];\n    } else {\n      throw Error('Invalid data type(s) provided.');\n    }\n  }\n\n  value(): Array<T> {\n    return this.data;\n  }\n\n  clType(): CLType {\n    return new CLListType(this.vectorType);\n  }\n\n  toJSON(): any {\n    return this.data.map(d => d.toJSON());\n  }\n\n  get(index: number): T {\n    if (index >= this.data.length) {\n      throw new Error('List index out of bounds.');\n    }\n    return this.data[index];\n  }\n\n  set(index: number, item: T): void {\n    if (index >= this.data.length) {\n      throw new Error('List index out of bounds.');\n    }\n    this.data[index] = item;\n  }\n\n  push(item: T): void {\n    if (item.clType().toString() === this.vectorType.toString()) {\n      this.data.push(item);\n    } else {\n      throw Error(\n        `Incosnsistent data type, use ${this.vectorType.toString()}.`\n      );\n    }\n  }\n\n  remove(index: number): void {\n    this.data.splice(index, 1);\n  }\n\n  pop(): T | undefined {\n    return this.data.pop();\n  }\n\n  size(): number {\n    return this.data.length;\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { Ok, Err } from 'ts-results';\n\nimport {\n  CLType,\n  CLValue,\n  CLValueParsers,\n  CLErrorCodes,\n  resultHelper,\n  ResultAndRemainder,\n  ToBytesResult,\n  CLU32BytesParser,\n  CLValueBytesParsers,\n  matchByteParserByCLType\n} from './index';\nimport { MAP_TYPE, CLTypeTag } from './constants';\nimport { toBytesU32 } from '../ByteConverters';\n\nexport interface MapEntryType {\n  key: CLType;\n  value: CLType;\n}\n\nconst isValueConstructor = (\n  v: Array<[CLValue, CLValue]> | [CLType, CLType]\n): v is Array<[CLValue, CLValue]> => {\n  return (\n    Array.isArray(v) &&\n    Array.isArray(v[0]) &&\n    v[0].length === 2 &&\n    !!v[0][0].clType &&\n    !!v[0][1].clType\n  );\n};\n\ntype KeyVal = CLValue;\n\nexport class CLMapType<K extends CLType, V extends CLType> extends CLType {\n  tag = CLTypeTag.Map;\n  linksTo = MAP_TYPE;\n\n  innerKey: K;\n  innerValue: V;\n\n  constructor([keyType, valueType]: [K, V]) {\n    super();\n    this.innerKey = keyType;\n    this.innerValue = valueType;\n  }\n\n  toString(): string {\n    return `${MAP_TYPE} (${this.innerKey.toString()}: ${this.innerValue.toString()})`;\n  }\n\n  toBytes(): Uint8Array {\n    return concat([\n      Uint8Array.from([this.tag]),\n      this.innerKey.toBytes(),\n      this.innerValue.toBytes()\n    ]);\n  }\n\n  toJSON(): any {\n    return {\n      [MAP_TYPE]: {\n        key: this.innerKey.toJSON(),\n        value: this.innerValue.toJSON()\n      }\n    };\n  }\n}\n\nexport class CLMapBytesParser extends CLValueBytesParsers {\n  toBytes(value: CLMap<CLValue, CLValue>): ToBytesResult {\n    const kvBytes: Uint8Array[] = Array.from(value.data).map(([key, value]) => {\n      const byteKey = CLValueParsers.toBytes(key).unwrap();\n      const byteVal = CLValueParsers.toBytes(value).unwrap();\n      return concat([byteKey, byteVal]);\n    });\n    return Ok(concat([toBytesU32(value.data.length), ...kvBytes]));\n  }\n\n  fromBytesWithRemainder(\n    bytes: Uint8Array,\n    mapType: CLMapType<CLType, CLType>\n  ): ResultAndRemainder<CLMap<KeyVal, KeyVal>, CLErrorCodes> {\n    const {\n      result: u32Res,\n      remainder: u32Rem\n    } = new CLU32BytesParser().fromBytesWithRemainder(bytes);\n\n    const size = u32Res\n      .unwrap()\n      .value()\n      .toNumber();\n    const vec: [KeyVal, KeyVal][] = [];\n\n    let remainder = u32Rem;\n\n    if (size === 0) {\n      return resultHelper(\n        Ok(new CLMap([mapType.innerKey, mapType.innerValue])),\n        remainder\n      );\n    }\n\n    for (let i = 0; i < size; i++) {\n      if (!remainder)\n        return resultHelper<CLMap<KeyVal, KeyVal>, CLErrorCodes>(\n          Err(CLErrorCodes.EarlyEndOfStream)\n        );\n\n      const keyParser = matchByteParserByCLType(mapType.innerKey).unwrap();\n      const {\n        result: kRes,\n        remainder: kRem\n      } = keyParser.fromBytesWithRemainder(remainder, mapType.innerKey);\n\n      const finalKey = kRes.unwrap();\n      remainder = kRem;\n\n      if (!remainder)\n        return resultHelper<CLMap<KeyVal, KeyVal>, CLErrorCodes>(\n          Err(CLErrorCodes.EarlyEndOfStream)\n        );\n\n      const valParser = matchByteParserByCLType(mapType.innerValue).unwrap();\n      const {\n        result: vRes,\n        remainder: vRem\n      } = valParser.fromBytesWithRemainder(remainder, mapType.innerValue);\n\n      const finalValue = vRes.unwrap();\n      remainder = vRem;\n\n      vec.push([finalKey, finalValue]);\n    }\n\n    if (size !== vec.length)\n      return resultHelper<CLMap<KeyVal, KeyVal>, CLErrorCodes>(\n        Err(CLErrorCodes.Formatting)\n      );\n\n    return resultHelper(Ok(new CLMap(vec)), remainder);\n  }\n}\n\nexport class CLMap<K extends CLValue, V extends CLValue> extends CLValue {\n  data: [K, V][];\n  refType: [CLType, CLType];\n  /**\n   * Constructs a new `MapValue`.\n   *\n   * @param v array [ key, value ]\n   */\n  constructor(v: [K, V][] | [CLType, CLType]) {\n    super();\n    if (isValueConstructor(v)) {\n      this.refType = [v[0][0].clType(), v[0][1].clType()];\n      if (\n        v.every(([key, value]) => {\n          return (\n            key.clType().toString() === this.refType[0].toString() &&\n            value.clType().toString() === this.refType[1].toString()\n          );\n        })\n      ) {\n        this.data = v;\n      } else {\n        throw Error('Invalid data provided.');\n      }\n    } else if (v[0] instanceof CLType && v[1] instanceof CLType) {\n      this.refType = v;\n      this.data = [];\n    } else {\n      throw Error('Invalid data type(s) provided.');\n    }\n  }\n\n  clType(): CLType {\n    return new CLMapType(this.refType);\n  }\n\n  toJSON(): any {\n    const map = new Map();\n    this.data.forEach(([k, v]) => map.set(k, v));\n    return map;\n  }\n\n  value(): [K, V][] {\n    return this.data;\n  }\n\n  has(k: K): boolean {\n    return this.get(k) !== undefined;\n  }\n\n  get(k: K): V | undefined {\n    const result = this.data.find(d => d[0].value() === k.value());\n    return result ? result[1] : undefined;\n  }\n\n  set(k: K, val: V): void {\n    if (this.get(k)) {\n      this.data = this.data.map(d =>\n        d[0].value() === k.value() ? [d[0], val] : d\n      );\n      return;\n    }\n\n    this.data = [...this.data, [k, val]];\n  }\n\n  delete(k: K): void {\n    this.data = this.data.filter(d => d[0].value() !== k.value());\n  }\n\n  size(): number {\n    return this.data.length;\n  }\n}\n","import { Ok, Err } from 'ts-results';\nimport {\n  CLType,\n  CLValue,\n  CLValueBytesParsers,\n  ResultAndRemainder,\n  ToBytesResult,\n  resultHelper\n} from './Abstract';\nimport { CLErrorCodes } from './constants';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { toBytesNumber } from '../ByteConverters';\nimport {\n  CLTypeTag,\n  I32_TYPE,\n  I64_TYPE,\n  U8_TYPE,\n  U32_TYPE,\n  U64_TYPE,\n  U128_TYPE,\n  U256_TYPE,\n  U512_TYPE\n} from './constants';\nimport { arrayEquals } from '../DeployUtil';\n\nabstract class NumericBytesParser extends CLValueBytesParsers {\n  toBytes(value: Numeric): ToBytesResult {\n    // NOTE: this is for historicial deploys that had zero represented as `0100`.\n    // If there is zero in form of `0100` insted of `00` it should be serialized the same way to prevent changes in bodyHash.\n    if (\n      (value.bitSize === 128 ||\n        value.bitSize === 256 ||\n        value.bitSize === 512) &&\n      value.originalBytes &&\n      arrayEquals(value.originalBytes, Uint8Array.from([1, 0]))\n    ) {\n      return Ok(value.originalBytes);\n    }\n\n    return Ok(toBytesNumber(value.bitSize, value.signed)(value.data));\n  }\n}\n\nabstract class Numeric extends CLValue {\n  data: BigNumber;\n  // NOTE: Original bytes are only used for legacy purposes.\n  originalBytes?: Uint8Array;\n  bitSize: number;\n  signed: boolean;\n\n  constructor(\n    bitSize: number,\n    isSigned: boolean,\n    value: BigNumberish,\n    originalBytes?: Uint8Array\n  ) {\n    super();\n    if (isSigned === false && Math.sign(value as number) < 0) {\n      throw new Error(\"Can't provide negative numbers with isSigned=false\");\n    }\n    if (originalBytes) {\n      this.originalBytes = originalBytes;\n    }\n    this.bitSize = bitSize;\n    this.signed = isSigned;\n    this.data = BigNumber.from(value);\n  }\n\n  value(): BigNumber {\n    return this.data;\n  }\n\n  toJSON(): string {\n    return this.data.toString();\n  }\n}\n\n// CLI32\nexport class CLI32Type extends CLType {\n  linksTo = I32_TYPE;\n  tag = CLTypeTag.I32;\n}\n\nexport class CLI32BytesParser extends NumericBytesParser {\n  fromBytesWithRemainder(\n    bytes: Uint8Array\n  ): ResultAndRemainder<CLI32, CLErrorCodes> {\n    if (bytes.length < 4) {\n      return resultHelper<CLI32, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n    const i32Bytes = Uint8Array.from(bytes.subarray(0, 4));\n    const i32 = BigNumber.from(i32Bytes.slice().reverse()).fromTwos(32);\n    const remainder = bytes.subarray(4);\n\n    return resultHelper(Ok(new CLI32(i32)), remainder);\n  }\n}\n\nexport class CLI32 extends Numeric {\n  constructor(num: BigNumberish) {\n    super(32, true, num);\n  }\n\n  clType(): CLType {\n    return new CLI32Type();\n  }\n}\n\n// CLI64\nexport class CLI64Type extends CLType {\n  linksTo = I64_TYPE;\n  tag = CLTypeTag.I64;\n}\n\nexport class CLI64BytesParser extends NumericBytesParser {\n  fromBytesWithRemainder(\n    rawBytes: Uint8Array\n  ): ResultAndRemainder<CLI64, CLErrorCodes> {\n    if (rawBytes.length < 8) {\n      return resultHelper<CLI32, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n    const bytes = Uint8Array.from(rawBytes.subarray(0, 8));\n    const val = BigNumber.from(bytes.slice().reverse()).fromTwos(64);\n    const remainder = rawBytes.subarray(8);\n\n    return resultHelper(Ok(new CLI64(val)), remainder);\n  }\n}\n\nexport class CLI64 extends Numeric {\n  constructor(num: BigNumberish) {\n    super(64, true, num);\n  }\n\n  clType(): CLType {\n    return new CLI64Type();\n  }\n}\n\n// CLU8\nexport class CLU8Type extends CLType {\n  linksTo = U8_TYPE;\n  tag = CLTypeTag.U8;\n}\n\nexport class CLU8BytesParser extends NumericBytesParser {\n  fromBytesWithRemainder(\n    bytes: Uint8Array\n  ): ResultAndRemainder<CLU8, CLErrorCodes> {\n    if (bytes.length === 0) {\n      return resultHelper<CLI32, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n    return resultHelper(Ok(new CLU8(bytes[0])), bytes.subarray(1));\n  }\n}\n\nexport class CLU8 extends Numeric {\n  constructor(num: BigNumberish) {\n    super(8, false, num);\n  }\n\n  clType(): CLType {\n    return new CLU8Type();\n  }\n}\n\n// CLU32\nexport class CLU32Type extends CLType {\n  linksTo = U32_TYPE;\n  tag = CLTypeTag.U32;\n}\n\nexport class CLU32BytesParser extends NumericBytesParser {\n  fromBytesWithRemainder(\n    bytes: Uint8Array\n  ): ResultAndRemainder<CLU32, CLErrorCodes> {\n    if (bytes.length < 4) {\n      return resultHelper<CLI32, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n    const u32Bytes = Uint8Array.from(bytes.subarray(0, 4));\n    const u32 = BigNumber.from(u32Bytes.slice().reverse());\n\n    return resultHelper(Ok(new CLU32(u32)), bytes.subarray(4));\n  }\n}\n\nexport class CLU32 extends Numeric {\n  constructor(num: BigNumberish) {\n    super(32, false, num);\n  }\n\n  clType(): CLType {\n    return new CLU32Type();\n  }\n}\n\n// CLU64\nexport class CLU64Type extends CLType {\n  linksTo = U64_TYPE;\n  tag = CLTypeTag.U64;\n}\n\nexport class CLU64BytesParser extends NumericBytesParser {\n  fromBytesWithRemainder(\n    bytes: Uint8Array\n  ): ResultAndRemainder<CLU64, CLErrorCodes> {\n    if (bytes.length < 8) {\n      return resultHelper<CLI32, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n    const u64Bytes = Uint8Array.from(bytes.subarray(0, 8));\n    const u64 = BigNumber.from(u64Bytes.slice().reverse());\n\n    return resultHelper(Ok(new CLU64(u64)), bytes.subarray(8));\n  }\n}\n\nexport class CLU64 extends Numeric {\n  constructor(num: BigNumberish) {\n    super(64, false, num);\n  }\n\n  clType(): CLType {\n    return new CLU64Type();\n  }\n}\n\n// CLU128\nexport class CLU128Type extends CLType {\n  linksTo = U128_TYPE;\n  tag = CLTypeTag.U128;\n}\n\nexport class CLU128BytesParser extends NumericBytesParser {\n  fromBytesWithRemainder(\n    rawBytes: Uint8Array\n  ): ResultAndRemainder<CLU128, CLErrorCodes> {\n    return fromBytesBigInt(rawBytes, 128);\n  }\n}\n\nexport class CLU128 extends Numeric {\n  constructor(num: BigNumberish, originalBytes?: Uint8Array) {\n    super(128, false, num, originalBytes);\n  }\n\n  clType(): CLType {\n    return new CLU128Type();\n  }\n}\n\n// CLU256\nexport class CLU256Type extends CLType {\n  linksTo = U256_TYPE;\n  tag = CLTypeTag.U256;\n}\n\nexport class CLU256BytesParser extends NumericBytesParser {\n  fromBytesWithRemainder(\n    rawBytes: Uint8Array\n  ): ResultAndRemainder<CLU256, CLErrorCodes> {\n    return fromBytesBigInt(rawBytes, 256);\n  }\n}\n\nexport class CLU256 extends Numeric {\n  constructor(num: BigNumberish, originalBytes?: Uint8Array) {\n    super(256, false, num, originalBytes);\n  }\n\n  clType(): CLType {\n    return new CLU256Type();\n  }\n}\n\n// CLU512\nexport class CLU512Type extends CLType {\n  linksTo = U512_TYPE;\n  tag = CLTypeTag.U512;\n}\n\nexport class CLU512BytesParser extends NumericBytesParser {\n  fromBytesWithRemainder(\n    rawBytes: Uint8Array\n  ): ResultAndRemainder<CLU512, CLErrorCodes> {\n    return fromBytesBigInt(rawBytes, 512);\n  }\n}\n\nexport class CLU512 extends Numeric {\n  constructor(num: BigNumberish, originalBytes?: Uint8Array) {\n    super(512, false, num, originalBytes);\n  }\n\n  clType(): CLType {\n    return new CLU512Type();\n  }\n}\n\nconst fromBytesBigInt = (\n  rawBytes: Uint8Array,\n  bitSize: number\n): ResultAndRemainder<CLU128 | CLU256 | CLU512, CLErrorCodes> => {\n  if (rawBytes.length < 1) {\n    return resultHelper<CLU128 | CLU256 | CLU512, CLErrorCodes>(\n      Err(CLErrorCodes.EarlyEndOfStream)\n    );\n  }\n\n  const byteSize = bitSize / 8;\n  const n = rawBytes[0];\n\n  if (n > byteSize) {\n    return resultHelper<CLU128 | CLU256 | CLU512, CLErrorCodes>(\n      Err(CLErrorCodes.Formatting)\n    );\n  }\n\n  if (n + 1 > rawBytes.length) {\n    return resultHelper<CLU128 | CLU256 | CLU512, CLErrorCodes>(\n      Err(CLErrorCodes.EarlyEndOfStream)\n    );\n  }\n\n  const bigIntBytes = n === 0 ? [0] : rawBytes.subarray(1, 1 + n);\n\n  const remainder = rawBytes.subarray(1 + n);\n\n  const value = BigNumber.from(bigIntBytes.slice().reverse());\n\n  if (bitSize === 128) {\n    return resultHelper(Ok(new CLU128(value, rawBytes)), remainder);\n  }\n  if (bitSize === 256) {\n    return resultHelper(Ok(new CLU256(value, rawBytes)), remainder);\n  }\n  if (bitSize === 512) {\n    return resultHelper(Ok(new CLU512(value, rawBytes)), remainder);\n  }\n\n  return resultHelper<CLU128 | CLU256 | CLU512, CLErrorCodes>(\n    Err(CLErrorCodes.Formatting)\n  );\n};\n","import { Ok, Err, Option, Some, None } from 'ts-results';\nimport { concat } from '@ethersproject/bytes';\n\nimport {\n  CLValue,\n  CLValueParsers,\n  CLValueBytesParsers,\n  CLType,\n  CLErrorCodes,\n  ResultAndRemainder,\n  ToBytesResult,\n  CLU8BytesParser,\n  resultHelper,\n  matchByteParserByCLType\n} from './index';\n\nimport { CLTypeTag, OPTION_TYPE } from './constants';\n\nconst OPTION_TAG_NONE = 0;\nconst OPTION_TAG_SOME = 1;\n\nexport class CLOptionType<T extends CLType> extends CLType {\n  tag = CLTypeTag.Option;\n  linksTo = OPTION_TYPE;\n  inner: T;\n\n  constructor(inner: T) {\n    super();\n    this.inner = inner;\n  }\n\n  toString(): string {\n    if (this.inner === null) {\n      return `${OPTION_TYPE} (None)`;\n    }\n\n    return `${OPTION_TYPE} (${this.inner.toString()})`;\n  }\n\n  toBytes(): Uint8Array {\n    return concat([Uint8Array.from([this.tag]), this.inner.toBytes()]);\n  }\n\n  toJSON(): any {\n    return {\n      [OPTION_TYPE]: this.inner.toJSON()\n    };\n  }\n}\n\nexport class CLOptionBytesParser extends CLValueBytesParsers {\n  /**\n   * Serializes the `Option` into an array of bytes.\n   */\n  toBytes(value: CLOption<CLValue>): ToBytesResult {\n    if (value.data.none) {\n      return Ok(Uint8Array.from([OPTION_TAG_NONE]));\n    }\n    if (value.data.some) {\n      return Ok(\n        concat([\n          Uint8Array.from([OPTION_TAG_SOME]),\n          CLValueParsers.toBytes(value.data.unwrap()).unwrap()\n        ])\n      );\n    }\n\n    return Err(CLErrorCodes.UnknownValue);\n  }\n\n  fromBytesWithRemainder(\n    bytes: Uint8Array,\n    type: CLOptionType<CLType>\n  ): ResultAndRemainder<CLOption<CLValue>, CLErrorCodes> {\n    const {\n      result: U8Res,\n      remainder: U8Rem\n    } = new CLU8BytesParser().fromBytesWithRemainder(bytes);\n\n    const optionTag = U8Res.unwrap()\n      .value()\n      .toNumber();\n\n    if (optionTag === OPTION_TAG_NONE) {\n      return resultHelper(Ok(new CLOption(None, type.inner)), U8Rem);\n    }\n\n    if (optionTag === OPTION_TAG_SOME) {\n      if (!U8Rem)\n        return resultHelper<CLOption<CLValue>, CLErrorCodes>(\n          Err(CLErrorCodes.EarlyEndOfStream)\n        );\n      const parser = matchByteParserByCLType(type.inner).unwrap();\n      const {\n        result: valRes,\n        remainder: valRem\n      } = parser.fromBytesWithRemainder(U8Rem, type.inner);\n\n      const clValue = valRes.unwrap();\n      return resultHelper(Ok(new CLOption(Some(clValue))), valRem);\n    }\n\n    return resultHelper<CLOption<CLValue>, CLErrorCodes>(\n      Err(CLErrorCodes.Formatting)\n    );\n  }\n}\n\nexport class CLOption<T extends CLValue> extends CLValue {\n  private innerType: CLType;\n  /**\n   * Constructs a new option containing the value of Some or None from ts-result.\n   */\n  constructor(public data: Option<T>, innerType?: CLType) {\n    super();\n    if (data.none) {\n      if (!innerType) {\n        throw new Error('You had to assign innerType for None');\n      }\n      this.innerType = innerType;\n    } else {\n      this.innerType = data.val.clType();\n    }\n    super();\n  }\n\n  /**\n   * Checks whether the `Option` contains no value.\n   *\n   * @returns True if the `Option` has no value.\n   */\n  isNone(): boolean {\n    return this.data.none;\n  }\n\n  /**\n   * Checks whether the `Option` contains a value.\n   *\n   * @returns True if the `Option` has some value.\n   */\n  isSome(): boolean {\n    return this.data.some;\n  }\n\n  /**\n   * Returns Option from ts-result based on stored value\n   */\n  value(): Option<T> {\n    return this.data;\n  }\n\n  toJSON(): any {\n    return this.isNone() ? null : this.data.unwrap().toJSON();\n  }\n\n  clType(): CLType {\n    return new CLOptionType(this.innerType);\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { Ok, Err } from 'ts-results';\n\nimport {\n  CLType,\n  CLValue,\n  CLValueBytesParsers,\n  CLErrorCodes,\n  resultHelper,\n  ResultAndRemainder,\n  ToBytesResult\n} from './index';\nimport { PUBLIC_KEY_TYPE, CLTypeTag } from './constants';\nimport { decodeBase16, encodeBase16 } from '../Conversions';\nimport { byteHash } from '../ByteConverters';\n\n// TODO: Tidy up almost the same enum in Keys.\nimport { SignatureAlgorithm } from '../Keys';\nimport { encode, isChecksummed } from '../ChecksummedHex';\n\nconst ED25519_LENGTH = 32;\nconst SECP256K1_LENGTH = 33;\n\nexport enum CLPublicKeyTag {\n  ED25519 = 1,\n  SECP256K1 = 2\n}\n\nexport class CLPublicKeyType extends CLType {\n  linksTo = PUBLIC_KEY_TYPE;\n  tag = CLTypeTag.PublicKey;\n}\n\nexport class CLPublicKeyBytesParser extends CLValueBytesParsers {\n  public toBytes(value: CLPublicKey): ToBytesResult {\n    return Ok(concat([Uint8Array.from([value.tag]), value.data]));\n  }\n\n  fromBytesWithRemainder(\n    rawBytes: Uint8Array\n  ): ResultAndRemainder<CLPublicKey, CLErrorCodes> {\n    if (rawBytes.length < 1) {\n      return resultHelper<CLPublicKey, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n\n    const variant = rawBytes[0];\n\n    let expectedPublicKeySize;\n    if (variant === CLPublicKeyTag.ED25519) {\n      expectedPublicKeySize = ED25519_LENGTH;\n    } else if (variant === CLPublicKeyTag.SECP256K1) {\n      expectedPublicKeySize = SECP256K1_LENGTH;\n    } else {\n      return resultHelper<CLPublicKey, CLErrorCodes>(\n        Err(CLErrorCodes.Formatting)\n      );\n    }\n\n    const bytes = rawBytes.subarray(1, expectedPublicKeySize + 1);\n\n    const publicKey = new CLPublicKey(bytes, variant);\n\n    return resultHelper(\n      Ok(publicKey),\n      rawBytes.subarray(expectedPublicKeySize + 1)\n    );\n  }\n}\n\nexport class CLPublicKey extends CLValue {\n  data: Uint8Array;\n  tag: CLPublicKeyTag;\n\n  constructor(\n    rawPublicKey: Uint8Array,\n    tag: CLPublicKeyTag | SignatureAlgorithm\n  ) {\n    super();\n    // NOTE Two ifs because of the legacy indentifiers in ./Keys\n    if (tag === CLPublicKeyTag.ED25519 || tag === SignatureAlgorithm.Ed25519) {\n      if (rawPublicKey.length !== ED25519_LENGTH) {\n        throw new Error(\n          `Wrong length of ED25519 key. Expected ${ED25519_LENGTH}, but got ${rawPublicKey.length}.`\n        );\n      }\n      this.data = rawPublicKey;\n      this.tag = CLPublicKeyTag.ED25519;\n      return;\n    }\n    if (\n      tag === CLPublicKeyTag.SECP256K1 ||\n      tag === SignatureAlgorithm.Secp256K1\n    ) {\n      if (rawPublicKey.length !== SECP256K1_LENGTH) {\n        throw new Error(\n          `Wrong length of SECP256K1 key. Expected ${SECP256K1_LENGTH}, but got ${rawPublicKey.length}.`\n        );\n      }\n      this.data = rawPublicKey;\n      this.tag = CLPublicKeyTag.SECP256K1;\n      return;\n    }\n    throw new Error('Unsupported type of public key');\n  }\n\n  clType(): CLType {\n    return new CLPublicKeyType();\n  }\n\n  isEd25519(): boolean {\n    return this.tag === CLPublicKeyTag.ED25519;\n  }\n\n  isSecp256K1(): boolean {\n    return this.tag === CLPublicKeyTag.SECP256K1;\n  }\n\n  toHex(checksummed = true): string {\n    // Updated: Returns checksummed hex string\n    const rawHex = `0${this.tag}${encodeBase16(this.data)}`;\n    if (checksummed) {\n      const bytes = decodeBase16(rawHex);\n      return encode(bytes.slice(0, 1)) + encode(bytes.slice(1));\n    }\n    return rawHex;\n  }\n\n  toAccountHash(): Uint8Array {\n    const algorithmIdentifier = CLPublicKeyTag[this.tag];\n    const separator = Uint8Array.from([0]);\n    const prefix = Buffer.concat([\n      Buffer.from(algorithmIdentifier.toLowerCase()),\n      separator\n    ]);\n\n    if (this.data.length === 0) {\n      return Uint8Array.from([]);\n    } else {\n      return byteHash(concat([prefix, this.data]));\n    }\n  }\n\n  toAccountHashStr(): string {\n    const bytes = this.toAccountHash();\n    const hashHex = Buffer.from(bytes).toString('hex');\n    return `account-hash-${hashHex}`;\n  }\n\n  toAccountRawHashStr(): string {\n    const bytes = this.toAccountHash();\n    const hashHex = Buffer.from(bytes).toString('hex');\n    return hashHex;\n  }\n\n  value(): Uint8Array {\n    return this.data;\n  }\n\n  static fromEd25519(publicKey: Uint8Array): CLPublicKey {\n    return new CLPublicKey(publicKey, CLPublicKeyTag.ED25519);\n  }\n\n  static fromSecp256K1(publicKey: Uint8Array): CLPublicKey {\n    return new CLPublicKey(publicKey, CLPublicKeyTag.SECP256K1);\n  }\n\n  /**\n   * Tries to decode PublicKey from its hex-representation.\n   * The hex format should be as produced by CLPublicKey.toHex\n   * @param publicKeyHex public key hex string contains key tag\n   * @param checksummed throws an Error if true and given string is not checksummed\n   */\n  static fromHex(publicKeyHex: string, checksummed = false): CLPublicKey {\n    if (publicKeyHex.length < 2) {\n      throw new Error('Asymmetric key error: too short');\n    }\n    if (!/^0(1[0-9a-fA-F]{64}|2[0-9a-fA-F]{66})$/.test(publicKeyHex)) {\n      throw new Error('Invalid public key');\n    }\n    if (!isChecksummed(publicKeyHex)) {\n      console.warn(\n        'Provided public key is not checksummed. Please check if you provide valid public key. You can generate checksummed public key from CLPublicKey.toHex(true).'\n      );\n      if (checksummed) throw Error('Provided public key is not checksummed.');\n    }\n    const publicKeyHexBytes = decodeBase16(publicKeyHex);\n\n    return new CLPublicKey(publicKeyHexBytes.subarray(1), publicKeyHexBytes[0]);\n  }\n\n  getTag(): CLPublicKeyTag {\n    return this.tag;\n  }\n\n  // TODO: mapping tag to signature algo because of the legacy indentifiers in ./Keys\n  getSignatureAlgorithm(): SignatureAlgorithm {\n    const mapTagToSignatureAlgorithm = (\n      tag: CLPublicKeyTag\n    ): SignatureAlgorithm => {\n      const signatureAlgorithm = {\n        [CLPublicKeyTag.ED25519]: SignatureAlgorithm.Ed25519,\n        [CLPublicKeyTag.SECP256K1]: SignatureAlgorithm.Secp256K1\n      }[tag];\n\n      if (signatureAlgorithm === undefined) {\n        throw Error('Unknown tag to signature algo mapping.');\n      }\n\n      return signatureAlgorithm;\n    };\n\n    return mapTagToSignatureAlgorithm(this.tag);\n  }\n}\n","import { Result, Ok, Err } from 'ts-results';\nimport { concat } from '@ethersproject/bytes';\n\nimport {\n  CLValue,\n  CLValueParsers,\n  CLType,\n  CLErrorCodes,\n  ResultAndRemainder,\n  ToBytesResult,\n  resultHelper,\n  CLU8BytesParser,\n  CLValueBytesParsers,\n  matchByteParserByCLType\n} from './index';\nimport { CLTypeTag, RESULT_TYPE } from './constants';\n\nconst RESULT_TAG_ERROR = 0;\nconst RESULT_TAG_OK = 1;\n\nexport class CLResultType<T extends CLType, E extends CLType> extends CLType {\n  linksTo = RESULT_TYPE;\n  tag = CLTypeTag.Result;\n\n  innerOk: T;\n  innerErr: E;\n\n  constructor({ ok, err }: { ok: T; err: E }) {\n    super();\n    this.innerOk = ok;\n    this.innerErr = err;\n  }\n\n  toString(): string {\n    return `${RESULT_TYPE} (OK: ${this.innerOk.toString()}, ERR: ${this.innerOk.toString()})`;\n  }\n\n  toBytes(): Uint8Array {\n    return concat([\n      Uint8Array.from([this.tag]),\n      this.innerOk.toBytes(),\n      this.innerErr.toBytes()\n    ]);\n  }\n\n  toJSON(): any {\n    return {\n      [RESULT_TYPE]: {\n        ok: this.innerOk.toJSON(),\n        err: this.innerErr.toJSON()\n      }\n    };\n  }\n}\n\nexport class CLResultBytesParser extends CLValueBytesParsers {\n  toBytes(value: CLResult<CLType, CLType>): ToBytesResult {\n    if (value.isOk() && value.data.val.isCLValue) {\n      return Ok(\n        concat([\n          Uint8Array.from([RESULT_TAG_OK]),\n          CLValueParsers.toBytes(value.data.val).unwrap()\n        ])\n      );\n    } else if (value.isError()) {\n      return Ok(\n        concat([\n          Uint8Array.from([RESULT_TAG_ERROR]),\n          CLValueParsers.toBytes(value.data.val).unwrap()\n        ])\n      );\n    } else {\n      throw new Error('Unproper data stored in CLResult');\n    }\n  }\n\n  fromBytesWithRemainder(\n    bytes: Uint8Array,\n    type: CLResultType<CLType, CLType>\n  ): ResultAndRemainder<CLResult<CLType, CLType>, CLErrorCodes> {\n    const {\n      result: U8Res,\n      remainder: U8Rem\n    } = new CLU8BytesParser().fromBytesWithRemainder(bytes);\n\n    if (!U8Rem) {\n      return resultHelper<CLResult<CLType, CLType>, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n\n    const resultTag = U8Res.unwrap()\n      .value()\n      .toNumber();\n    const referenceErr = type.innerErr;\n    const referenceOk = type.innerOk;\n\n    if (resultTag === RESULT_TAG_ERROR) {\n      const parser = matchByteParserByCLType(referenceErr).unwrap();\n      const {\n        result: valRes,\n        remainder: valRem\n      } = parser.fromBytesWithRemainder(U8Rem, type.innerErr);\n\n      const val = new CLResult(Err(valRes.unwrap()), {\n        ok: referenceOk,\n        err: referenceErr\n      });\n\n      return resultHelper(Ok(val), valRem);\n    }\n\n    if (resultTag === RESULT_TAG_OK) {\n      const parser = matchByteParserByCLType(referenceOk).unwrap();\n      const {\n        result: valRes,\n        remainder: valRem\n      } = parser.fromBytesWithRemainder(U8Rem, type.innerOk);\n\n      const val = new CLResult(Ok(valRes.unwrap()), {\n        ok: referenceOk,\n        err: referenceErr\n      });\n\n      return resultHelper(Ok(val), valRem);\n    }\n\n    return resultHelper<CLResult<CLType, CLType>, CLErrorCodes>(\n      Err(CLErrorCodes.Formatting)\n    );\n  }\n}\n\n/**\n * Class representing a result of an operation that might have failed. Can contain either a value\n * resulting from a successful completion of a calculation, or an error. Similar to `Result` in Rust\n * or `Either` in Haskell.\n */\nexport class CLResult<T extends CLType, E extends CLType> extends CLValue {\n  data: Result<CLValue, CLValue>;\n  innerOk: T;\n  innerErr: E;\n\n  constructor(data: Result<CLValue, CLValue>, { ok, err }: { ok: T; err: E }) {\n    super();\n    this.data = data;\n    this.innerOk = ok;\n    this.innerErr = err;\n  }\n\n  /**\n   * Returns Result from ts-result based on stored value\n   */\n  value(): Result<CLValue, CLValue> {\n    return this.data;\n  }\n\n  /**\n   * Returns JSON representation. If None null will be returned.\n   */\n  toJSON(): any {\n    return this.data.unwrap().toJSON();\n  }\n\n  /**\n   * Checks if stored value is error\n   */\n  isError(): boolean {\n    return this.data.err && !this.data.ok;\n  }\n\n  /**\n   * Checks if stored value is valid\n   */\n  isOk(): boolean {\n    return this.data.ok && !this.data.err;\n  }\n\n  clType(): CLType {\n    return new CLResultType({ ok: this.innerOk, err: this.innerErr });\n  }\n}\n","import { Ok, Err } from 'ts-results';\nimport {\n  CLType,\n  CLValue,\n  CLU32BytesParser,\n  ResultAndRemainder,\n  ToBytesResult,\n  resultHelper,\n  CLErrorCodes,\n  CLValueBytesParsers\n} from './index';\nimport { STRING_TYPE, CLTypeTag } from './constants';\nimport { toBytesString, fromBytesString } from '../ByteConverters';\n\nexport class CLStringType extends CLType {\n  linksTo = STRING_TYPE;\n  tag = CLTypeTag.String;\n}\n\nexport class CLStringBytesParser extends CLValueBytesParsers {\n  toBytes(value: CLString): ToBytesResult {\n    return Ok(toBytesString(value.data));\n  }\n\n  fromBytesWithRemainder(\n    rawBytes: Uint8Array\n  ): ResultAndRemainder<CLString, CLErrorCodes> {\n    const {\n      result: CLU32res,\n      remainder: CLU32rem\n    } = new CLU32BytesParser().fromBytesWithRemainder(rawBytes);\n\n    const len = CLU32res.unwrap()\n      .value()\n      .toNumber();\n\n    if (CLU32rem) {\n      const val = fromBytesString(CLU32rem.subarray(0, len));\n      return resultHelper(Ok(new CLString(val)), CLU32rem.subarray(len));\n    }\n\n    return resultHelper<CLString, CLErrorCodes>(\n      Err(CLErrorCodes.EarlyEndOfStream)\n    );\n  }\n}\n\nexport class CLString extends CLValue {\n  data: string;\n\n  constructor(v: string) {\n    super();\n    if (typeof v !== 'string') {\n      throw new Error(\n        `Wrong data type, you should provide string, but you provided ${typeof v}`\n      );\n    }\n    this.data = v;\n  }\n\n  clType(): CLType {\n    return new CLStringType();\n  }\n\n  value(): string {\n    return this.data;\n  }\n\n  size(): number {\n    return this.data.length;\n  }\n}\n","import { Ok, Err } from 'ts-results';\nimport { concat } from '@ethersproject/bytes';\n\nimport {\n  CLType,\n  CLValue,\n  CLValueParsers,\n  CLValueBytesParsers,\n  ResultAndRemainder,\n  ToBytesResult,\n  resultHelper,\n  matchByteParserByCLType,\n  CLErrorCodes\n} from './index';\nimport { TUPLE_MATCH_LEN_TO_TYPE } from './utils';\nimport { CLTypeTag, TUPLE1_TYPE, TUPLE2_TYPE, TUPLE3_TYPE } from './constants';\n\nexport abstract class CLTupleType extends CLType {\n  tag: CLTypeTag;\n  linksTo: string;\n  inner: Array<CLType>;\n\n  constructor(inner: Array<CLType>, linksTo: string, tag: CLTypeTag) {\n    super();\n    this.inner = inner;\n    this.linksTo = linksTo;\n    this.tag = tag;\n  }\n\n  toString(): string {\n    const innerTypes = this.inner.map(e => e.toString()).join(', ');\n    return `Tuple${this.inner.length} (${innerTypes})`;\n  }\n\n  toJSON(): any {\n    const id = TUPLE_MATCH_LEN_TO_TYPE[this.inner.length - 1];\n    return {\n      [id]: this.inner.map(t => t.toJSON())\n    };\n  }\n\n  toBytes(): any {\n    const inner = this.inner.map(t => t.toBytes());\n    return concat([Uint8Array.from([this.tag]), ...inner]);\n  }\n}\n\nexport class CLTupleBytesParser extends CLValueBytesParsers {\n  toBytes(value: CLTuple): ToBytesResult {\n    return Ok(concat(value.data.map(d => CLValueParsers.toBytes(d).unwrap())));\n  }\n\n  fromBytesWithRemainder(\n    rawBytes: Uint8Array,\n    type: CLTuple1Type | CLTuple2Type | CLTuple3Type\n  ): ResultAndRemainder<CLTuple, CLErrorCodes> {\n    let rem = rawBytes;\n    const val = type.inner.map((t: CLType) => {\n      const parser = matchByteParserByCLType(t).unwrap();\n      const { result: vRes, remainder: vRem } = parser.fromBytesWithRemainder(\n        rem,\n        t\n      );\n\n      rem = vRem!;\n      return vRes.unwrap();\n    });\n\n    if (val.length === 1 && type.tag === CLTypeTag.Tuple1) {\n      return resultHelper(Ok(new CLTuple1(val)), rem);\n    }\n    if (val.length === 2 && type.tag === CLTypeTag.Tuple2) {\n      return resultHelper(Ok(new CLTuple2(val)), rem);\n    }\n    if (val.length === 3 && type.tag === CLTypeTag.Tuple3) {\n      return resultHelper(Ok(new CLTuple3(val)), rem);\n    }\n    return resultHelper<CLTuple, CLErrorCodes>(Err(CLErrorCodes.Formatting));\n  }\n}\n\nabstract class CLTuple extends CLValue {\n  data: Array<CLValue>;\n  tupleSize: number;\n\n  constructor(size: number, v: Array<CLValue>) {\n    super();\n    if (v.length > size) {\n      throw new Error('Too many elements!');\n    }\n    if (v.every(e => e instanceof CLValue)) {\n      this.tupleSize = size;\n      this.data = v;\n    } else {\n      throw Error('Invalid data type(s) provided.');\n    }\n  }\n\n  get(index: number): CLValue {\n    return this.data[index];\n  }\n\n  set(index: number, item: CLValue): void {\n    if (index >= this.tupleSize) {\n      throw new Error('Tuple index out of bounds.');\n    }\n    this.data[index] = item;\n  }\n\n  push(item: CLValue): void {\n    if (this.data.length < this.tupleSize) {\n      this.data.push(item);\n    } else {\n      throw new Error('No more space in this tuple!');\n    }\n  }\n\n  value(): Array<CLValue> {\n    return this.data;\n  }\n\n  toJSON(): any {\n    return this.data.map(d => d.toJSON());\n  }\n}\n\nexport class CLTuple1Type extends CLTupleType {\n  constructor(inner: Array<CLType>) {\n    super(inner, TUPLE1_TYPE, CLTypeTag.Tuple1);\n  }\n}\n\nexport class CLTuple1 extends CLTuple {\n  constructor(value: Array<CLValue>) {\n    super(1, value);\n  }\n\n  clType(): CLType {\n    return new CLTuple1Type(this.data.map(e => e.clType()));\n  }\n}\n\nexport class CLTuple2Type extends CLTupleType {\n  constructor(inner: Array<CLType>) {\n    super(inner, TUPLE2_TYPE, CLTypeTag.Tuple2);\n  }\n}\n\nexport class CLTuple2 extends CLTuple {\n  constructor(value: Array<CLValue>) {\n    super(2, value);\n  }\n\n  clType(): CLType {\n    return new CLTuple2Type(this.data.map(e => e.clType()));\n  }\n}\n\nexport class CLTuple3Type extends CLTupleType {\n  constructor(inner: Array<CLType>) {\n    super(inner, TUPLE3_TYPE, CLTypeTag.Tuple3);\n  }\n}\n\nexport class CLTuple3 extends CLTuple {\n  constructor(value: Array<CLValue>) {\n    super(3, value);\n  }\n\n  clType(): CLType {\n    return new CLTuple3Type(this.data.map(e => e.clType()));\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { Ok, Err } from 'ts-results';\n\nimport {\n  CLType,\n  CLValue,\n  CLValueBytesParsers,\n  CLErrorCodes,\n  ResultAndRemainder,\n  ToBytesResult,\n  resultHelper,\n  padNum\n} from './index';\nimport { UREF_TYPE, CLTypeTag } from './constants';\nimport { decodeBase16, encodeBase16 } from '../Conversions';\n\nexport enum AccessRights {\n  // No permissions\n  None = 0b0,\n  // Permission to read the value under the associated [[URef]].\n  READ = 0b001,\n  // Permission to write a value under the associated [[URef]].\n  WRITE = 0b010,\n  // Permission to add to the value under the associated [[URef]].\n  ADD = 0b100,\n  // Permission to read or write the value under the associated [[URef]].\n  READ_WRITE = AccessRights.READ | AccessRights.WRITE,\n  // Permission to read or add to the value under the associated [[URef]].\n  READ_ADD = AccessRights.READ | AccessRights.ADD,\n  // Permission to add to, or write the value under the associated [[URef]].\n  ADD_WRITE = AccessRights.ADD | AccessRights.WRITE,\n  // Permission to read, add to, or write the value under the associated [[URef]].\n  READ_ADD_WRITE = AccessRights.READ | AccessRights.ADD | AccessRights.WRITE\n}\n\nexport class CLURefType extends CLType {\n  linksTo = UREF_TYPE;\n  tag = CLTypeTag.URef;\n}\n\nconst FORMATTED_STRING_PREFIX = 'uref';\n/**\n * Length of [[URef]] address field.\n * @internal\n */\nconst UREF_ADDR_LENGTH = 32;\n/**\n * Length of [[ACCESS_RIGHT]] field.\n * @internal\n */\nconst ACCESS_RIGHT_LENGTH = 1;\n\nconst UREF_BYTES_LENGTH = UREF_ADDR_LENGTH + ACCESS_RIGHT_LENGTH;\n\nexport class CLURefBytesParser extends CLValueBytesParsers {\n  toBytes(val: CLURef): ToBytesResult {\n    return Ok(concat([val.data, Uint8Array.from([val.accessRights])]));\n  }\n\n  fromBytesWithRemainder(\n    bytes: Uint8Array\n  ): ResultAndRemainder<CLURef, CLErrorCodes> {\n    if (bytes.length < UREF_BYTES_LENGTH) {\n      return resultHelper<CLURef, CLErrorCodes>(\n        Err(CLErrorCodes.EarlyEndOfStream)\n      );\n    }\n\n    const urefBytes = bytes.subarray(0, UREF_ADDR_LENGTH);\n    const accessRights = bytes[UREF_BYTES_LENGTH - 1];\n    const uref = new CLURef(urefBytes, accessRights);\n    return resultHelper(Ok(uref), bytes.subarray(UREF_BYTES_LENGTH));\n  }\n}\n\nexport class CLURef extends CLValue {\n  data: Uint8Array;\n  accessRights: AccessRights;\n\n  /**\n   * Constructs new instance of URef.\n   * @param uRefAddr Bytes representing address of the URef.\n   * @param accessRights Access rights flag. Use [[AccessRights.NONE]] to indicate no permissions.\n   */\n  constructor(v: Uint8Array, accessRights: AccessRights) {\n    super();\n    if (v.byteLength !== 32) {\n      throw new Error('The length of URefAddr should be 32');\n    }\n\n    if (!Object.values(AccessRights).includes(accessRights)) {\n      throw new Error('Unsuported AccessRights');\n    }\n\n    this.data = v;\n    this.accessRights = accessRights;\n  }\n\n  /**\n   * Parses a casper-client supported string formatted argument into a `URef`.\n   */\n  static fromFormattedStr(input: string): CLURef {\n    if (!input.startsWith(`${FORMATTED_STRING_PREFIX}-`)) {\n      throw new Error(\"Prefix is not 'uref-'\");\n    }\n    const parts = input\n      .substring(`${FORMATTED_STRING_PREFIX}-`.length)\n      .split('-', 2);\n    if (parts.length !== 2) {\n      throw new Error('No access rights as suffix');\n    }\n\n    const addr = decodeBase16(parts[0]);\n    const accessRight = parseInt(parts[1], 8) as AccessRights;\n\n    return new CLURef(addr, accessRight);\n  }\n\n  toFormattedStr(): string {\n    return [\n      FORMATTED_STRING_PREFIX,\n      encodeBase16(this.data),\n      padNum(this.accessRights.toString(8), 3)\n    ].join('-');\n  }\n\n  toJSON(): string {\n    return this.toFormattedStr();\n  }\n\n  clType(): CLType {\n    return new CLURefType();\n  }\n\n  value(): { data: Uint8Array; accessRights: AccessRights } {\n    return { data: this.data, accessRights: this.accessRights };\n  }\n}\n","import { Ok } from 'ts-results';\n\nimport {\n  CLType,\n  CLValue,\n  CLValueBytesParsers,\n  CLErrorCodes,\n  ResultAndRemainder,\n  ToBytesResult,\n  resultHelper\n} from './index';\nimport { UNIT_TYPE, CLTypeTag } from './constants';\n\nexport class CLUnitType extends CLType {\n  tag = CLTypeTag.Unit;\n  linksTo = UNIT_TYPE;\n}\n\nexport class CLUnitBytesParser extends CLValueBytesParsers {\n  toBytes(): ToBytesResult {\n    return Ok(Uint8Array.from([]));\n  }\n\n  fromBytesWithRemainder(\n    rawBytes: Uint8Array\n  ): ResultAndRemainder<CLUnit, CLErrorCodes> {\n    return resultHelper(Ok(new CLUnit()), rawBytes);\n  }\n}\n\nexport class CLUnit extends CLValue {\n  data = undefined;\n\n  clType(): CLType {\n    return new CLUnitType();\n  }\n\n  value(): undefined {\n    return this.data;\n  }\n}\n","/// The length in bytes of a [`AccountHash`].\nexport const ACCOUNT_HASH_LENGTH = 32;\n\nexport enum CLErrorCodes {\n  EarlyEndOfStream = 0,\n  Formatting,\n  LeftOverBytes = 'Left over bytes',\n  OutOfMemory = 'Out of memory exception',\n  UnknownValue = 'Unknown value'\n}\n\nexport enum KeyVariant {\n  Account,\n  Hash,\n  URef\n}\n\n/**\n * Casper types, i.e. types which can be stored and manipulated by smart contracts.\n *\n * Provides a description of the underlying data type of a [[CLValue]].\n */\nexport enum CLTypeTag {\n  /** A boolean value */\n  Bool = 0,\n  /** A 32-bit signed integer */\n  I32 = 1,\n  /** A 64-bit signed integer */\n  I64 = 2,\n  /** An 8-bit unsigned integer (a byte) */\n  U8 = 3,\n  /** A 32-bit unsigned integer */\n  U32 = 4,\n  /** A 64-bit unsigned integer */\n  U64 = 5,\n  /** A 128-bit unsigned integer */\n  U128 = 6,\n  /** A 256-bit unsigned integer */\n  U256 = 7,\n  /** A 512-bit unsigned integer */\n  U512 = 8,\n  /** A unit type, i.e. type with no values (analogous to `void` in C and `()` in Rust) */\n  Unit = 9,\n  /** A string of characters */\n  String = 10,\n  /** A key in the global state - URef/hash/etc. */\n  Key = 11,\n  /** An Unforgeable Reference (URef) */\n  URef = 12,\n  /** An [[Option]], i.e. a type that can contain a value or nothing at all */\n  Option = 13,\n  /** A list of values */\n  List = 14,\n  /** A fixed-length array of bytes */\n  ByteArray = 15,\n  /**\n   * A [[Result]], i.e. a type that can contain either a value representing success or one representing failure.\n   */\n  Result = 16,\n  /** A key-value map. */\n  Map = 17,\n  /** A 1-value tuple. */\n  Tuple1 = 18,\n  /** A 2-value tuple, i.e. a pair of values. */\n  Tuple2 = 19,\n  /** A 3-value tuple. */\n  Tuple3 = 20,\n  /** A value of any type. */\n  Any = 21,\n  /** A value of public key type. */\n  PublicKey = 22\n}\n\nexport const BOOL_TYPE = 'Bool';\nexport const KEY_TYPE = 'Key';\nexport const PUBLIC_KEY_TYPE = 'PublicKey';\nexport const STRING_TYPE = 'String';\nexport const UREF_TYPE = 'URef';\nexport const UNIT_TYPE = 'Unit';\nexport const I32_TYPE = 'I32';\nexport const I64_TYPE = 'I64';\nexport const U8_TYPE = 'U8';\nexport const U32_TYPE = 'U32';\nexport const U64_TYPE = 'U64';\nexport const U128_TYPE = 'U128';\nexport const U256_TYPE = 'U256';\nexport const U512_TYPE = 'U512';\n\nexport const BYTE_ARRAY_TYPE = 'ByteArray';\nexport const LIST_TYPE = 'List';\nexport const MAP_TYPE = 'Map';\nexport const OPTION_TYPE = 'Option';\nexport const RESULT_TYPE = 'Result';\nexport const TUPLE1_TYPE = 'Tuple1';\nexport const TUPLE2_TYPE = 'Tuple2';\nexport const TUPLE3_TYPE = 'Tuple3';\n\nexport const ANY_TYPE = 'Any';\nexport const ACCOUNT_HASH_TYPE = 'AccountHash';\n","export * from './Abstract';\nexport * from './Builders';\nexport * from './ByteArray';\nexport * from './Any';\nexport * from './Key';\nexport * from './List';\nexport * from './Map';\nexport * from './Numeric';\nexport * from './PublicKey';\nexport * from './String';\nexport * from './Tuple';\nexport * from './URef';\nexport * from './Unit';\nexport * from './AccountHash';\nexport * from './Bool';\nexport * from './URef';\nexport * from './Result';\nexport * from './Option';\nexport * from './constants';\nexport * from './utils';\n","import { Result, Ok, Err } from 'ts-results';\n\nimport {\n  ACCOUNT_HASH_TYPE,\n  BOOL_TYPE,\n  LIST_TYPE,\n  BYTE_ARRAY_TYPE,\n  KEY_TYPE,\n  PUBLIC_KEY_TYPE,\n  MAP_TYPE,\n  STRING_TYPE,\n  UREF_TYPE,\n  UNIT_TYPE,\n  RESULT_TYPE,\n  I32_TYPE,\n  I64_TYPE,\n  U8_TYPE,\n  U32_TYPE,\n  U64_TYPE,\n  U128_TYPE,\n  U256_TYPE,\n  U512_TYPE,\n  TUPLE1_TYPE,\n  TUPLE2_TYPE,\n  TUPLE3_TYPE,\n  OPTION_TYPE,\n  ANY_TYPE,\n  CLTypeTag\n} from './constants';\nimport {\n  CLValueBytesParsers,\n  CLAccountHashBytesParser,\n  CLType,\n  ResultAndRemainder,\n  resultHelper,\n  CLPublicKeyType,\n  CLPublicKeyBytesParser,\n  CLOptionType,\n  CLOptionBytesParser,\n  CLResultType,\n  CLResultBytesParser,\n  CLTuple1Type,\n  CLTuple2Type,\n  CLTuple3Type,\n  CLTupleBytesParser,\n  CLBoolType,\n  CLBoolBytesParser,\n  CLByteArrayType,\n  CLByteArrayBytesParser,\n  CLI32Type,\n  CLI64Type,\n  CLU8Type,\n  CLU32Type,\n  CLU64Type,\n  CLU128Type,\n  CLU256Type,\n  CLU512Type,\n  CLI32BytesParser,\n  CLI64BytesParser,\n  CLU8BytesParser,\n  CLU32BytesParser,\n  CLU64BytesParser,\n  CLU128BytesParser,\n  CLU256BytesParser,\n  CLU512BytesParser,\n  CLURefType,\n  CLURefBytesParser,\n  CLStringType,\n  CLStringBytesParser,\n  CLKeyType,\n  CLKeyBytesParser,\n  CLListType,\n  CLListBytesParser,\n  CLMapType,\n  CLMapBytesParser,\n  CLUnitType,\n  CLUnitBytesParser,\n  CLAnyType\n} from './index';\n\nexport const TUPLE_MATCH_LEN_TO_TYPE = [TUPLE1_TYPE, TUPLE2_TYPE, TUPLE3_TYPE];\n\nexport const matchTypeToCLType = (type: any): CLType => {\n  if (typeof type === typeof 'string') {\n    switch (type) {\n      case BOOL_TYPE:\n        return new CLBoolType();\n      case KEY_TYPE:\n        return new CLKeyType();\n      case PUBLIC_KEY_TYPE:\n        return new CLPublicKeyType();\n      case STRING_TYPE:\n        return new CLStringType();\n      case UREF_TYPE:\n        return new CLURefType();\n      case UNIT_TYPE:\n        return new CLUnitType();\n      case I32_TYPE:\n        return new CLI32Type();\n      case I64_TYPE:\n        return new CLI64Type();\n      case U8_TYPE:\n        return new CLU8Type();\n      case U32_TYPE:\n        return new CLU32Type();\n      case U64_TYPE:\n        return new CLU64Type();\n      case U128_TYPE:\n        return new CLU128Type();\n      case U256_TYPE:\n        return new CLU256Type();\n      case U512_TYPE:\n        return new CLU512Type();\n      case ANY_TYPE:\n        return new CLAnyType();\n      default:\n        throw new Error(`The simple type ${type} is not supported`);\n    }\n  }\n\n  if (typeof type === typeof {}) {\n    if (LIST_TYPE in type) {\n      const inner = matchTypeToCLType(type[LIST_TYPE]);\n      return new CLListType(inner);\n    }\n    if (BYTE_ARRAY_TYPE in type) {\n      const size = type[BYTE_ARRAY_TYPE];\n      return new CLByteArrayType(size);\n    }\n    if (MAP_TYPE in type) {\n      const keyType = matchTypeToCLType(type[MAP_TYPE].key);\n      const valType = matchTypeToCLType(type[MAP_TYPE].value);\n      return new CLMapType([keyType, valType]);\n    }\n    if (TUPLE1_TYPE in type) {\n      const vals = type[TUPLE1_TYPE].map((t: any) => matchTypeToCLType(t));\n      return new CLTuple1Type(vals);\n    }\n    if (TUPLE2_TYPE in type) {\n      const vals = type[TUPLE2_TYPE].map((t: any) => matchTypeToCLType(t));\n      return new CLTuple2Type(vals);\n    }\n    if (TUPLE3_TYPE in type) {\n      const vals = type[TUPLE3_TYPE].map((t: any) => matchTypeToCLType(t));\n      return new CLTuple3Type(vals);\n    }\n    if (OPTION_TYPE in type) {\n      const inner = matchTypeToCLType(type[OPTION_TYPE]);\n      return new CLOptionType(inner);\n    }\n    if (RESULT_TYPE in type) {\n      const innerOk = matchTypeToCLType(type[RESULT_TYPE].ok);\n      const innerErr = matchTypeToCLType(type[RESULT_TYPE].err);\n      return new CLResultType({ ok: innerOk, err: innerErr });\n    }\n    throw new Error(`The complex type ${type} is not supported`);\n  }\n\n  throw new Error(`Unknown data provided.`);\n};\n\nexport const matchByteParserByCLType = (\n  val: CLType\n): Result<CLValueBytesParsers, string> => {\n  switch (val.linksTo) {\n    case ACCOUNT_HASH_TYPE:\n      return Ok(new CLAccountHashBytesParser());\n    case BOOL_TYPE:\n      return Ok(new CLBoolBytesParser());\n    case I32_TYPE:\n      return Ok(new CLI32BytesParser());\n    case I64_TYPE:\n      return Ok(new CLI64BytesParser());\n    case U8_TYPE:\n      return Ok(new CLU8BytesParser());\n    case U32_TYPE:\n      return Ok(new CLU32BytesParser());\n    case U64_TYPE:\n      return Ok(new CLU64BytesParser());\n    case U128_TYPE:\n      return Ok(new CLU128BytesParser());\n    case U256_TYPE:\n      return Ok(new CLU256BytesParser());\n    case U512_TYPE:\n      return Ok(new CLU512BytesParser());\n    case BYTE_ARRAY_TYPE:\n      return Ok(new CLByteArrayBytesParser());\n    case UREF_TYPE:\n      return Ok(new CLURefBytesParser());\n    case KEY_TYPE:\n      return Ok(new CLKeyBytesParser());\n    case PUBLIC_KEY_TYPE:\n      return Ok(new CLPublicKeyBytesParser());\n    case LIST_TYPE:\n      return Ok(new CLListBytesParser());\n    case MAP_TYPE:\n      return Ok(new CLMapBytesParser());\n    case TUPLE1_TYPE:\n    case TUPLE2_TYPE:\n    case TUPLE3_TYPE:\n      return Ok(new CLTupleBytesParser());\n    case OPTION_TYPE:\n      return Ok(new CLOptionBytesParser());\n    case RESULT_TYPE:\n      return Ok(new CLResultBytesParser());\n    case STRING_TYPE:\n      return Ok(new CLStringBytesParser());\n    case UNIT_TYPE:\n      return Ok(new CLUnitBytesParser());\n    default:\n      return Err('Unknown type');\n  }\n};\n\nexport const matchBytesToCLType = (\n  bytes: Uint8Array\n): ResultAndRemainder<CLType, string> => {\n  const tag = bytes[0];\n  const remainder = bytes.subarray(1);\n\n  switch (tag) {\n    case CLTypeTag.Bool:\n      return resultHelper(Ok(new CLBoolType()), remainder);\n    case CLTypeTag.I32:\n      return resultHelper(Ok(new CLI32Type()), remainder);\n    case CLTypeTag.I64:\n      return resultHelper(Ok(new CLI64Type()), remainder);\n    case CLTypeTag.U8:\n      return resultHelper(Ok(new CLU8Type()), remainder);\n    case CLTypeTag.U32:\n      return resultHelper(Ok(new CLU32Type()), remainder);\n    case CLTypeTag.U64:\n      return resultHelper(Ok(new CLU64Type()), remainder);\n    case CLTypeTag.U64:\n      return resultHelper(Ok(new CLU64Type()), remainder);\n    case CLTypeTag.U128:\n      return resultHelper(Ok(new CLU128Type()), remainder);\n    case CLTypeTag.U256:\n      return resultHelper(Ok(new CLU256Type()), remainder);\n    case CLTypeTag.U512:\n      return resultHelper(Ok(new CLU512Type()), remainder);\n    case CLTypeTag.Unit:\n      return resultHelper(Ok(new CLUnitType()), remainder);\n    case CLTypeTag.String:\n      return resultHelper(Ok(new CLStringType()), remainder);\n    case CLTypeTag.Key:\n      return resultHelper(Ok(new CLKeyType()), remainder);\n    case CLTypeTag.URef:\n      return resultHelper(Ok(new CLURefType()), remainder);\n    case CLTypeTag.Option: {\n      const { result, remainder: typeRem } = matchBytesToCLType(remainder);\n\n      const innerType = result.unwrap();\n\n      return resultHelper(Ok(new CLOptionType(innerType)), typeRem);\n    }\n    case CLTypeTag.List: {\n      const { result, remainder: typeRem } = matchBytesToCLType(remainder);\n\n      const innerType = result.unwrap();\n\n      return resultHelper(Ok(new CLListType(innerType)), typeRem);\n    }\n    case CLTypeTag.ByteArray: {\n      const { result, remainder: typeRem } = matchBytesToCLType(remainder);\n      const innerType = result.unwrap();\n      return resultHelper(Ok(new CLListType(innerType)), typeRem);\n    }\n    case CLTypeTag.Result: {\n      const { result: okTypeRes, remainder: okTypeRem } = matchBytesToCLType(\n        remainder\n      );\n      const okType = okTypeRes.unwrap();\n\n      if (!okTypeRem)\n        return resultHelper<CLType, string>(\n          Err('Missing Error type bytes in Result')\n        );\n\n      const { result: errTypeRes, remainder: rem } = matchBytesToCLType(\n        okTypeRem\n      );\n      const errType = errTypeRes.unwrap();\n\n      return resultHelper(\n        Ok(new CLResultType({ ok: okType, err: errType })),\n        rem\n      );\n    }\n    case CLTypeTag.Map: {\n      const { result: keyTypeRes, remainder: keyTypeRem } = matchBytesToCLType(\n        remainder\n      );\n      const keyType = keyTypeRes.unwrap();\n\n      if (!keyTypeRem)\n        return resultHelper<CLType, string>(\n          Err('Missing Key type bytes in Map')\n        );\n\n      const { result: valTypeRes, remainder: rem } = matchBytesToCLType(\n        keyTypeRem\n      );\n      const valType = valTypeRes.unwrap();\n\n      return resultHelper(Ok(new CLMapType([keyType, valType])), rem);\n    }\n    case CLTypeTag.Tuple1: {\n      const { result: innerTypeRes, remainder: rem } = matchBytesToCLType(\n        remainder\n      );\n      const innerType = innerTypeRes.unwrap();\n\n      return resultHelper(Ok(new CLTuple1Type([innerType])), rem);\n    }\n    case CLTypeTag.Tuple2: {\n      const {\n        result: innerType1Res,\n        remainder: innerType1Rem\n      } = matchBytesToCLType(remainder);\n      const innerType1 = innerType1Res.unwrap();\n\n      if (!innerType1Rem) {\n        return resultHelper<CLType, string>(\n          Err('Missing second tuple type bytes in CLTuple2Type')\n        );\n      }\n\n      const {\n        result: innerType2Res,\n        remainder: innerType2Rem\n      } = matchBytesToCLType(innerType1Rem);\n      const innerType2 = innerType2Res.unwrap();\n\n      return resultHelper(\n        Ok(new CLTuple1Type([innerType1, innerType2])),\n        innerType2Rem\n      );\n    }\n    case CLTypeTag.Tuple3: {\n      const {\n        result: innerType1Res,\n        remainder: innerType1Rem\n      } = matchBytesToCLType(remainder);\n      const innerType1 = innerType1Res.unwrap();\n\n      if (!innerType1Rem) {\n        return resultHelper<CLType, string>(\n          Err('Missing second tuple type bytes in CLTuple2Type')\n        );\n      }\n\n      const {\n        result: innerType2Res,\n        remainder: innerType2Rem\n      } = matchBytesToCLType(innerType1Rem);\n      const innerType2 = innerType2Res.unwrap();\n\n      if (!innerType2Rem) {\n        return resultHelper<CLType, string>(\n          Err('Missing third tuple type bytes in CLTuple2Type')\n        );\n      }\n\n      const {\n        result: innerType3Res,\n        remainder: innerType3Rem\n      } = matchBytesToCLType(innerType2Rem);\n      const innerType3 = innerType3Res.unwrap();\n\n      return resultHelper(\n        Ok(new CLTuple1Type([innerType1, innerType2, innerType3])),\n        innerType3Rem\n      );\n    }\n    case CLTypeTag.Any: {\n      return resultHelper<CLType, string>(Err('Any unsupported'));\n    }\n    case CLTypeTag.PublicKey:\n      return resultHelper(Ok(new CLPublicKeyType()));\n  }\n\n  return resultHelper<CLType, string>(Err('Unsuported type'));\n};\n\nexport const padNum = (v: string, n = 1): string =>\n  new Array(n).join('0').slice((n || 2) * -1) + v;\n","import { CasperServiceByJsonRPC, GetDeployResult } from '../services';\nimport { DeployUtil, Keys, CLPublicKey } from './index';\nimport { encodeBase16 } from './Conversions';\nimport { Deploy, DeployParams, ExecutableDeployItem } from './DeployUtil';\nimport { AsymmetricKey, SignatureAlgorithm } from './Keys';\nimport { Secp256K1HDKey, Ed25519HDKey, CasperHDKey } from './CasperHDKeys';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nexport class CasperClient {\n  public nodeClient: CasperServiceByJsonRPC;\n\n  /**\n   * Construct a CasperClient object\n   * @param nodeUrl The url of the node to be communicated with\n   */\n  constructor(nodeUrl: string) {\n    this.nodeClient = new CasperServiceByJsonRPC(nodeUrl);\n  }\n\n  /**\n   * Generate a new key pair\n   * @param algo The signature algorithm of the account. The possible values are `SignatureAlgorithm.Ed25519` and SignatureAlgorithm.Secp256K1\n   * @returns New key pair with the specified SignatureAlgorithm\n   */\n  public newKeyPair(algo: SignatureAlgorithm): AsymmetricKey {\n    switch (algo) {\n      case SignatureAlgorithm.Ed25519:\n        return Keys.Ed25519.new();\n      case SignatureAlgorithm.Secp256K1:\n        return Keys.Secp256K1.new();\n      default:\n        throw new Error('Invalid signature algorithm');\n    }\n  }\n\n  /**\n   * Load public key from file\n   * @param path The path to the publicKey file\n   * @param algo The signature algorithm of the account. The possible values are `SignatureAlgorithm.Ed25519` and SignatureAlgorithm.Secp256K1\n   * @returns New key pair with the specified SignatureAlgorithm\n   */\n  public loadPublicKeyFromFile(\n    path: string,\n    algo: SignatureAlgorithm\n  ): Uint8Array {\n    switch (algo) {\n      case SignatureAlgorithm.Ed25519:\n        return Keys.Ed25519.parsePublicKeyFile(path);\n      case SignatureAlgorithm.Secp256K1:\n        return Keys.Secp256K1.parsePublicKeyFile(path);\n      default:\n        throw new Error('Invalid signature algorithm');\n    }\n  }\n\n  /**\n   * Load private key to buffer\n   * @param path The path to the private key file\n   * @param algo The signature algorithm of the account. Currently we support Ed25519 and Secp256K1\n   * @returns Uint8Array buffer of the private key\n   */\n  public loadPrivateKeyFromFile(\n    path: string,\n    algo: SignatureAlgorithm\n  ): Uint8Array {\n    switch (algo) {\n      case SignatureAlgorithm.Ed25519:\n        return Keys.Ed25519.parsePrivateKeyFile(path);\n      case SignatureAlgorithm.Secp256K1:\n        return Keys.Secp256K1.parsePrivateKeyFile(path);\n      default:\n        throw new Error('Invalid signature algorithm');\n    }\n  }\n\n  /**\n   * Load private key file to usable keypair\n   * @param path The path to the private key file\n   * @param algo The signature algorithm of the account\n   * @returns Usable keypair\n   */\n  public loadKeyPairFromPrivateFile(\n    path: string,\n    algo: SignatureAlgorithm\n  ): AsymmetricKey {\n    switch (algo) {\n      case SignatureAlgorithm.Ed25519:\n        return Keys.Ed25519.loadKeyPairFromPrivateFile(path);\n      case SignatureAlgorithm.Secp256K1:\n        return Keys.Secp256K1.loadKeyPairFromPrivateFile(path);\n      default:\n        throw new Error('Invalid signature algorithm');\n    }\n  }\n\n  /**\n   * Create a new hierarchical deterministic wallet, supporting bip32 protocol\n   * @param seed The seed buffer for parent key\n   * @returns A new bip32 compliant hierarchical deterministic wallet\n   */\n  public newHdWallet(\n    seed: Uint8Array,\n    algo: SignatureAlgorithm\n  ): CasperHDKey<AsymmetricKey> {\n    switch (algo) {\n      case SignatureAlgorithm.Ed25519:\n        return new Ed25519HDKey(seed);\n      case SignatureAlgorithm.Secp256K1:\n        return new Secp256K1HDKey(seed);\n    }\n  }\n\n  /**\n   * Compute public key from private key\n   * @param privateKey Private key buffer\n   * @param algo The signature algorithm of the account. Currently we support Ed25519 and Secp256K1\n   * @returns Uint8Array buffer of the public key computed from the provided private key\n   */\n  public privateToPublicKey(\n    privateKey: Uint8Array,\n    algo: SignatureAlgorithm\n  ): Uint8Array {\n    switch (algo) {\n      case SignatureAlgorithm.Ed25519:\n        return Keys.Ed25519.privateToPublicKey(privateKey);\n      case SignatureAlgorithm.Secp256K1:\n        return Keys.Secp256K1.privateToPublicKey(privateKey);\n      default:\n        throw new Error('Invalid signature algorithm');\n    }\n  }\n\n  /**\n   * Construct an unsigned Deploy object from the deploy parameters, session logic, and payment logic\n   * @param deployParams Deploy parameters\n   * @param session Session logic\n   * @param payment Payment logic\n   * @returns An unsigned Deploy object\n   * @see [DeployUtil.makeDeploy](./DeployUtil.ts#L1059)\n   */\n  public makeDeploy(\n    deployParams: DeployParams,\n    session: ExecutableDeployItem,\n    payment: ExecutableDeployItem\n  ): Deploy {\n    return DeployUtil.makeDeploy(deployParams, session, payment);\n  }\n\n  /**\n   * Sign the deploy with the specified signKeyPair\n   * @param deploy Unsigned Deploy object\n   * @param signKeyPair the keypair used to sign the Deploy object\n   * @returns A signed Deploy object\n   * @see [DeployUtil.signDeploy](./DeployUtil.ts#L1087)\n   */\n  public signDeploy(deploy: Deploy, signKeyPair: AsymmetricKey): Deploy {\n    return DeployUtil.signDeploy(deploy, signKeyPair);\n  }\n\n  /**\n   * Send deploy to network\n   * @param signedDeploy Signed deploy object\n   * @returns The sent Deploy's transaction hash, as a hexadecimal string\n   */\n  public putDeploy(signedDeploy: Deploy): Promise<string> {\n    return this.nodeClient.deploy(signedDeploy).then(it => it.deploy_hash);\n  }\n\n  /**\n   * Test deploy to network\n   * @param signedDeploy Signed deploy object\n   */\n  public speculativeDeploy(\n    signedDeploy: Deploy,\n    blockIdentifier?: string\n  ): Promise<string> {\n    return this.nodeClient\n      .speculativeDeploy(signedDeploy, blockIdentifier)\n      .then(res => {\n        return res;\n      });\n  }\n\n  /**\n   * Convert the Deploy object to a JSON representation\n   * @param deploy A Deploy object\n   * @returns A JSON representation of the Deploy\n   * @see [DeployUtil.deployToJson](./DeployUtil.ts#L1150)\n   */\n  public deployToJson(deploy: Deploy) {\n    return DeployUtil.deployToJson(deploy);\n  }\n\n  /**\n   * Convert a JSON Deploy representation to a Deploy object\n   * @param json A JSON respresentation of a deploy\n   * @returns A Deploy object\n   * @see [DeployUtil.deployToJson](./DeployUtil.ts#L1150)\n   */\n  public deployFromJson(json: any) {\n    return DeployUtil.deployFromJson(json);\n  }\n\n  /**\n   * Construct a Deploy consisting of a standard CSPR transfer. Fails if the Deploy is not a Transfer\n   * @param deployParams The parameters of the Deploy\n   * @param session Session logic\n   * @param payment Payment logic\n   */\n  public makeTransferDeploy(\n    deployParams: DeployParams,\n    session: ExecutableDeployItem,\n    payment: ExecutableDeployItem\n  ): Deploy {\n    if (!session.isTransfer()) {\n      throw new Error('The session is not a Transfer ExecutableDeployItem');\n    }\n    return this.makeDeploy(deployParams, session, payment);\n  }\n\n  /**\n   * Get the CSPR balance of an account using its public key\n   * @param publicKey CLPublicKey representation of an account's public key\n   * @returns Promise that resolves to the balance of the account\n   */\n  public async balanceOfByPublicKey(\n    publicKey: CLPublicKey\n  ): Promise<BigNumber> {\n    return this.balanceOfByAccountHash(encodeBase16(publicKey.toAccountHash()));\n  }\n\n  /**\n   * Get the CSPR balance of an account using its account hash\n   * @param accountHashStr The account's account hash as a hexadecimal string\n   * @returns Promise that resolves to the balance of the account\n   */\n  public async balanceOfByAccountHash(\n    accountHashStr: string\n  ): Promise<BigNumber> {\n    try {\n      const stateRootHash = await this.nodeClient\n        .getLatestBlockInfo()\n        .then(it => it.block?.header.state_root_hash);\n      // Find the balance Uref and cache it if we don't have it.\n      if (!stateRootHash) {\n        return BigNumber.from(0);\n      }\n      const balanceUref = await this.nodeClient.getAccountBalanceUrefByPublicKeyHash(\n        stateRootHash,\n        accountHashStr\n      );\n\n      if (!balanceUref) {\n        return BigNumber.from(0);\n      }\n\n      return await this.nodeClient.getAccountBalance(\n        stateRootHash,\n        balanceUref\n      );\n    } catch (e) {\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Get deploy details using a deploy's transaction hash\n   * @param deployHash The hexadecimal string representation of the deploy hash\n   * @returns Tuple of Deploy and raw RPC response\n   */\n  public async getDeploy(\n    deployHash: string\n  ): Promise<[Deploy, GetDeployResult]> {\n    return await this.nodeClient\n      .getDeployInfo(deployHash)\n      .then((result: GetDeployResult) => {\n        return [DeployUtil.deployFromJson(result).unwrap(), result];\n      });\n  }\n\n  /**\n   * Get the main purse uref for the specified publicKey\n   * @param publicKey The public key of the account\n   * @returns A Promise resolving to a hexadecimal string representation of the account's main purse uref\n   */\n  public async getAccountMainPurseUref(\n    publicKey: CLPublicKey\n  ): Promise<string | null> {\n    const stateRootHash = await this.nodeClient\n      .getLatestBlockInfo()\n      .then(it => it.block?.header.state_root_hash);\n\n    if (!stateRootHash) {\n      return null;\n    }\n\n    const balanceUref = await this.nodeClient.getAccountBalanceUrefByPublicKeyHash(\n      stateRootHash,\n      encodeBase16(publicKey.toAccountHash())\n    );\n\n    return balanceUref;\n  }\n}\n","import * as bip39 from '@scure/bip39';\nimport { wordlist as engWordlist } from '@scure/bip39/wordlists/english';\n\nimport { SignatureAlgorithm } from '../types';\n\nlet wordlist = engWordlist;\n\nexport abstract class CasperHDKey<AsymmetricKey> {\n  // Registered at https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n  static readonly bip44Index = 506;\n\n  constructor(\n    private seed: Uint8Array,\n    private signatureAlorithm: SignatureAlgorithm\n  ) {}\n\n  // see https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels\n  static bip44Path(index: number): string {\n    return [\n      'm',\n      `44'`, // bip 44\n      `${CasperHDKey.bip44Index}'`, // coin index\n      `0'`, // wallet\n      `0`, // external\n      `${index}` // child account index\n    ].join('/');\n  }\n\n  /**\n   * Returns mnemonic which can be used to construct HD wallet.\n   * @param wordLength mnemonic word length, default 12, possible lengths 12 or 24\n   * @returns mnemonic word array\n   */\n  public static newMnemonic(wordLength = 12): string {\n    const validWordLengths = [12, 24];\n    if (!validWordLengths.includes(wordLength)) {\n      throw new Error('Invalid word length');\n    }\n    const strength = wordLength === 12 ? 128 : 256;\n    return bip39.generateMnemonic(CasperHDKey.getWordlist(), strength);\n  }\n\n  /**\n   * Validate the mnemonic word array\n   * @param mnemonic word array\n   * @returns `true` if the word array is correct mnemonic, otherwise `false`\n   */\n  public static validateMnemonic(mnemonic: string): boolean {\n    return bip39.validateMnemonic(mnemonic, CasperHDKey.getWordlist());\n  }\n\n  /**\n   * Convert mnemonic to relevant `Uint8Array`\n   * @param mnemonic word array\n   * @returns relevant `Uint8Array`\n   */\n  public static mnemonicToSeed(mnemonic: string): Uint8Array {\n    return bip39.mnemonicToEntropy(mnemonic, CasperHDKey.getWordlist());\n  }\n\n  /**\n   * Returns randomly generated `Uint8Array` which can be used to construct HD wallet.\n   * @returns\n   */\n  public static newSeed(): Uint8Array {\n    return CasperHDKey.mnemonicToSeed(CasperHDKey.newMnemonic());\n  }\n\n  /**\n   * Set provided word list as default word list\n   * @param list\n   */\n  public static setWordlist(list: string[]) {\n    wordlist = list;\n  }\n\n  /**\n   * Returns word list\n   * @default english word list\n   * @returns word list\n   */\n  public static getWordlist(): string[] {\n    return wordlist;\n  }\n\n  /**\n   * Returns english word list\n   * @returns word list\n   */\n  public static getDefaultWordlist(): string[] {\n    return engWordlist;\n  }\n\n  /**\n   * Returns SignatureAlgorithm\n   */\n  public get signatureAlgorithm(): SignatureAlgorithm {\n    return this.signatureAlorithm;\n  }\n\n  /**\n   * Returns current wallet's mnemonic\n   */\n  public get mnemonic(): string {\n    return bip39.entropyToMnemonic(this.seed, CasperHDKey.getWordlist());\n  }\n\n  /**\n   * Derive the child key based on BIP44\n   * @param index index of the child\n   */\n  public deriveChild(index: number): AsymmetricKey {\n    return this.derive(CasperHDKey.bip44Path(index));\n  }\n\n  /**\n   * Derive the child key from the path\n   * @param path path to derive\n   */\n  abstract derive(path: string): AsymmetricKey;\n\n  /**\n   * Generate the signature for the message by using the key\n   * @param msg The message to sign\n   */\n  abstract sign(msg: Uint8Array): Uint8Array;\n\n  /**\n   * Verify the signature\n   * @param signature the signature generated for the msg\n   * @param msg the raw message\n   */\n  abstract verify(signature: Uint8Array, msg: Uint8Array): boolean;\n\n  /**\n   * Returns public key of the default HD wallet\n   */\n  abstract publicKey(): Uint8Array;\n\n  /**\n   * Returns private key of the default HD wallet\n   */\n  abstract privateKey(): Uint8Array;\n}\n","import { HDKey } from './hdkey';\nimport { CasperHDKey } from './CasperHDKey';\nimport { Ed25519, SignatureAlgorithm } from '../Keys';\n\nexport class Ed25519HDKey extends CasperHDKey<Ed25519> {\n  private hdKey: HDKey;\n\n  constructor(seed: Uint8Array) {\n    super(seed, SignatureAlgorithm.Ed25519);\n    this.hdKey = HDKey.fromMasterSeed(seed);\n  }\n\n  public static new() {\n    return new Ed25519HDKey(Ed25519HDKey.newSeed());\n  }\n\n  public static fromMnemonic(mnemonic: string) {\n    return new Ed25519HDKey(Ed25519HDKey.mnemonicToSeed(mnemonic));\n  }\n\n  publicKey(): Uint8Array {\n    return this.hdKey.publicKey;\n  }\n\n  privateKey(): Uint8Array {\n    return this.hdKey.privateKey;\n  }\n\n  derive(path: string, forceHardened = true) {\n    const newHdKey = this.hdKey.derive(path, forceHardened);\n\n    return new Ed25519({\n      publicKey: newHdKey.publicKeyRaw,\n      secretKey: newHdKey.privateKey\n    });\n  }\n\n  sign(hash: Uint8Array): Uint8Array {\n    return this.hdKey.sign(hash);\n  }\n\n  verify(signature: Uint8Array, msg: Uint8Array): boolean {\n    return this.hdKey.verify(msg, signature);\n  }\n}\n","import { HDKey } from '@scure/bip32';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { CasperHDKey } from './CasperHDKey';\nimport { Secp256K1, SignatureAlgorithm } from '../Keys';\n\nexport class Secp256K1HDKey extends CasperHDKey<Secp256K1> {\n  private hdKey: HDKey;\n\n  constructor(seed: Uint8Array) {\n    super(seed, SignatureAlgorithm.Ed25519);\n    this.hdKey = HDKey.fromMasterSeed(seed);\n  }\n\n  public static new() {\n    return new Secp256K1HDKey(Secp256K1HDKey.newSeed());\n  }\n\n  public static fromMnemonic(mnemonic: string) {\n    return new Secp256K1HDKey(Secp256K1HDKey.mnemonicToSeed(mnemonic));\n  }\n\n  public publicKey() {\n    return this.hdKey.publicKey!;\n  }\n\n  public privateKey() {\n    return this.hdKey.privateKey!;\n  }\n\n  public derive(path: string): Secp256K1 {\n    const secpKeyPair = this.hdKey.derive(path);\n\n    return new Secp256K1(\n      new Uint8Array(secpKeyPair.publicKey!),\n      new Uint8Array(secpKeyPair.privateKey!)\n    );\n  }\n\n  public sign(msg: Uint8Array) {\n    return this.hdKey.sign(sha256(Buffer.from(msg)));\n  }\n\n  public verify(signature: Uint8Array, msg: Uint8Array) {\n    return this.hdKey.verify(sha256(Buffer.from(msg)), Buffer.from(signature));\n  }\n}\n","// **NOTE** Copied from https://github.com/paulmillr/ed25519-keygen/blob/45fc42752e6c7a042bb2c9eada6309261d7f6606/src/hdkey.ts\n\n/*! micro-ed25519-hdkey - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { ed25519 } from '@noble/curves/ed25519';\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport {\n  concatBytes,\n  createView,\n  hexToBytes,\n  utf8ToBytes,\n  bytesToHex\n} from '@noble/hashes/utils';\nimport { bytes as assertBytes } from '@noble/hashes/_assert';\n\nexport const MASTER_SECRET = utf8ToBytes('ed25519 seed');\nexport const HARDENED_OFFSET = 0x80000000;\nconst ZERO = new Uint8Array([0]);\n\ntype Hex = Uint8Array | string;\nfunction ensureBytes(b: Hex, ...lengths: number[]): Uint8Array {\n  if (typeof b === 'string') b = hexToBytes(b);\n  assertBytes(b, ...lengths);\n  return b;\n}\n\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\nconst toU32 = (n: number) => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n  }\n  const buf = new Uint8Array(4);\n  createView(buf).setUint32(0, n, false);\n  return buf;\n};\n\ninterface HDKeyOpt {\n  depth?: number;\n  index?: number;\n  parentFingerprint?: number;\n  chainCode: Uint8Array;\n  privateKey: Uint8Array;\n}\n\nexport class HDKey {\n  get publicKeyRaw(): Uint8Array {\n    return ed25519.getPublicKey(this.privateKey);\n  }\n  get publicKey(): Uint8Array {\n    return concatBytes(ZERO, this.publicKeyRaw);\n  }\n  get pubHash(): Uint8Array {\n    return hash160(this.publicKey);\n  }\n  get fingerprint(): number {\n    return fromU32(this.pubHash);\n  }\n  get fingerprintHex(): string {\n    return bytesToHex(toU32(this.fingerprint));\n  }\n  get parentFingerprintHex(): string {\n    return bytesToHex(toU32(this.parentFingerprint));\n  }\n\n  static fromMasterSeed(seed: Hex): HDKey {\n    seed = ensureBytes(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(\n        `HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`\n      );\n    }\n    const I = hmac(sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      privateKey: I.slice(0, 32),\n      chainCode: I.slice(32)\n    });\n  }\n\n  readonly depth: number = 0;\n  readonly index: number = 0;\n  readonly chainCode: Uint8Array;\n  readonly parentFingerprint: number = 0;\n  readonly privateKey: Uint8Array;\n\n  constructor(opt: HDKeyOpt) {\n    if (!opt || typeof opt !== 'object')\n      throw new Error('HDKey.constructor must not be called directly');\n    assertBytes(opt.privateKey, 32);\n    assertBytes(opt.chainCode, 32);\n    this.depth = opt.depth || 0;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index)\n        throw new Error(\n          'HDKey: zero depth with non-zero index/parent fingerprint'\n        );\n    }\n    this.chainCode = opt.chainCode;\n    this.privateKey = opt.privateKey;\n  }\n\n  derive(path: string, forceHardened = false): HDKey {\n    if (!/^[mM]'?/.test(path))\n      throw new Error('Path must start with \"m\" or \"M\"');\n    if (/^[mM]'?$/.test(path)) return this;\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let child: HDKey = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      if (!m || m.length !== 3) throw new Error(`Invalid child index: ${c}`);\n      let idx = +m[1];\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET)\n        throw new Error('Invalid index');\n      // hardened key\n      if (forceHardened || m[2] === \"'\") idx += HARDENED_OFFSET;\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n\n  deriveChild(index: number): HDKey {\n    if (index < HARDENED_OFFSET)\n      throw new Error(\n        `Non-hardened child derivation not possible for Ed25519 (index=${index})`\n      );\n    // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n    const data = concatBytes(ZERO, this.privateKey, toU32(index));\n    const I = hmac(sha512, this.chainCode, data);\n    return new HDKey({\n      chainCode: I.slice(32),\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index,\n      privateKey: I.slice(0, 32)\n    });\n  }\n\n  sign(message: Hex): Uint8Array {\n    return ed25519.sign(message, this.privateKey);\n  }\n\n  verify(message: Hex, signature: Hex): boolean {\n    signature = ensureBytes(signature, 64);\n    return ed25519.verify(signature, message, this.publicKeyRaw);\n  }\n}\n","export * from './CasperHDKey';\nexport * from './Ed25519HDKey';\nexport * from './Secp256K1HDKey';\n","//! Checksummed hex encoding following an [EIP-55][1]-like scheme.\n//!\n//! [1]: https://eips.ethereum.org/EIPS/eip-55\n\n//! Migrate from https://github.com/casper-network/casper-node/blob/9609a616439de334d89917a14240940615a49f81/types/src/checksummed_hex.rs\n\nimport { concat } from '@ethersproject/bytes';\nimport { byteHash } from './ByteConverters';\nimport { decodeBase16 } from './Conversions';\n\n// The number of input bytes, at or below which [`decode`] will checksum-decode the output.\nexport const SMALL_BYTES_COUNT = 75;\n\n/**\n * Takes a slice of bytes and breaks it up into a vector of *nibbles* (ie, 4-bit values)\n * @param bytes\n * @returns double sized of Unit8Array\n */\nconst bytesToNibbles = (bytes: Uint8Array): Uint8Array => {\n  const outputNibbles = bytes.reduce((accum, byte) => {\n    return concat([accum, Uint8Array.of(byte >>> 4, byte & 0x0f)]);\n  }, new Uint8Array());\n  return outputNibbles;\n};\n\nconst bytesToBitsCycle = (bytes: Uint8Array) => {\n  const output: boolean[] = [];\n  for (let i = 0, k = 0; i < bytes.length; i++)\n    for (let j = 0; j < 8; j++)\n      output[k++] = ((bytes[i] >>> j) & 0x01) === 0x01;\n\n  return output;\n};\n\n// prettier-ignore\nconst HEX_CHARS = [\n  '0', '1', '2', '3', '4', '5', '6', '7', \n  '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', \n  'A', 'B', 'C', 'D', 'E', 'F'\n];\n\n/**\n * Returns the bytes encoded as hexadecimal with mixed-case based checksums following a scheme\n * similar to [EIP-55](https://eips.ethereum.org/EIPS/eip-55).\n * Key differences:\n * - Works on any length of data, not just 20-byte addresses\n * - Uses Blake2b hashes rather than Keccak\n * - Uses hash bits rather than nibbles\n * @param input Uint8Array to generate checksummed hex string\n * @returns checksummed hex presentation string of input\n */\nexport const encode = (input: Uint8Array): string => {\n  const inputNibbles = bytesToNibbles(input);\n  const hashBits = bytesToBitsCycle(byteHash(input)).values();\n  const hexOutputString = inputNibbles.reduce((accum, nibble) => {\n    const c = HEX_CHARS[nibble];\n\n    if (/^[a-zA-Z()]+$/.test(c) && hashBits.next().value) {\n      return accum + c.toUpperCase();\n    } else {\n      return accum + c.toLowerCase();\n    }\n  }, '');\n  return hexOutputString;\n};\n\nexport const isSamecase = (value: string) =>\n  /^[a-z0-9]+$|^[A-Z0-9]+$/.test(value);\n\n/**\n * Verify a mixed-case hexadecimal string that it conforms to the checksum scheme\n * similar to scheme in [EIP-55](https://eips.ethereum.org/EIPS/eip-55).\n * Key differences:\n * - Works on any length of (decoded) data up to `SMALL_BYTES_COUNT`, not just 20-byte addresses\n * - Uses Blake2b hashes rather than Keccak\n * - Uses hash bits rather than nibbles\n * For backward compatibility: if the hex string is all uppercase or all lowercase, the check is\n * skipped.\n * @param input string to check if it is checksummed\n * @returns true if input is checksummed\n */\nexport const isChecksummed = (input: string): boolean => {\n  const bytes = decodeBase16(input);\n\n  // If the string was not small or not mixed case, don't verify the checksum.\n  if (bytes.length > SMALL_BYTES_COUNT || isSamecase(input)) return true;\n\n  // Checks if input is public key\n  if (/^0(1[0-9a-fA-F]{64}|2[0-9a-fA-F]{66})$/.test(input)) {\n    return input === encode(bytes.slice(0, 1)) + encode(bytes.slice(1));\n  }\n\n  return input === encode(bytes);\n};\n","import { CLPublicKey, CLValue, CLValueBuilder, CLTypeBuilder } from '../index';\nimport * as DeployUtil from './DeployUtil';\nimport { CasperClient } from './CasperClient';\nimport { Deploy } from './DeployUtil';\nimport { RuntimeArgs } from './RuntimeArgs';\nimport { AsymmetricKey } from './Keys';\nimport { DEFAULT_DEPLOY_TTL } from '../constants';\n\n/**\n * Convert a contract hash hexadecimal string to a byte array\n * @param contractHash Hexadecimal string of a contract hash, without the \"hash-\" prefix\n * @returns `Uint8Array` representation of the contract hash\n */\nexport const contractHashToByteArray = (contractHash: string) =>\n  Uint8Array.from(Buffer.from(contractHash, 'hex'));\n\nconst NO_CLIENT_ERR =\n  'You need to either create Contract instance with casperClient or pass it as parameter to this function';\n\n/** Smart contract object for interacting with contracts on the Casper Network */\nexport class Contract {\n  public contractHash?: string;\n  public contractPackageHash?: string;\n\n  /**\n   * Constructor\n   * @param casperClient The `CasperClient` object connected to a live node\n   */\n  constructor(public casperClient?: CasperClient) {}\n\n  /**\n   * Attaches an on-chain smart contract to this `Contract` object using its hexadecimal string typed hash. The contract hash must include the prefix \"hash-\"\n   * @param contractHash The hexadecimal smart contract hash, with the prefix \"hash-\"\n   * @param contractPackageHash The hexadecimal smart contract package hash, with the prefix \"hash-\". This parameter is optional, and only used when there is event processing present.\n   */\n  public setContractHash(\n    contractHash: string,\n    contractPackageHash?: string\n  ): void {\n    if (\n      !contractHash.startsWith('hash-') ||\n      (contractPackageHash && !contractPackageHash.startsWith('hash-'))\n    ) {\n      throw new Error(\n        'Please provide contract hash in a format that contains hash- prefix.'\n      );\n    }\n\n    this.contractHash = contractHash;\n    this.contractPackageHash = contractPackageHash;\n  }\n\n  /**\n   * Install a smart contract on a Casper Network\n   * @param wasm `Uint8Array` representation of a WebAssembly compiled smart contract\n   * @param args The runtime arguments for the installment deploy\n   * @param paymentAmount The gas payment in motes, where 1 mote = 10^-9 CSPR. Use a stringified base-10 integer\n   * @param sender `CLPublicKey` of the sender of the installment deploy\n   * @param chainName The name of the network the installment deploy will be sent to. You can get the network name of a node by calling the REST endpoint `:8888/status`\n   * @param signingKeys An array of keypairs used to sign the deploy. If you are signing with one key, use an array with only the one keypair. If instead you are utilizing multi-sig functionality, provide multiple keypair objects in the array.\n   * @returns The installment deploy, to be sent to a node.\n   * @remarks In the future, this method will be an alias to a different method: `callModuleBytesEntrypoint`\n   */\n  public install(\n    wasm: Uint8Array,\n    args: RuntimeArgs,\n    paymentAmount: string,\n    sender: CLPublicKey,\n    chainName: string,\n    signingKeys: AsymmetricKey[] = []\n  ): Deploy {\n    const deploy = DeployUtil.makeDeploy(\n      new DeployUtil.DeployParams(sender, chainName),\n      DeployUtil.ExecutableDeployItem.newModuleBytes(wasm, args),\n      DeployUtil.standardPayment(paymentAmount)\n    );\n\n    const signedDeploy = deploy.sign(signingKeys);\n\n    return signedDeploy;\n  }\n\n  private checkSetup(): boolean {\n    if (this.contractHash) return true;\n    throw Error('You need to setContract before running this method.');\n  }\n\n  /**\n   * Call an entrypoint of a smart contract.\n   * @param entryPoint The name of an entrypoint of a smart contract that you wish to call\n   * @param args The runtime arguments for the deploy\n   * @param sender `CLPublicKey` of the sender of the deploy\n   * @param chainName The name of the network the installment deploy will be sent to. You can get the network name of a node by calling the REST endpoint `:8888/status`\n   * @param paymentAmount The gas payment in motes, where 1 mote = 10^-9 CSPR. Use a stringified base-10 integer\n   * @param signingKeys An array of keypairs used to sign the deploy. If you are signing with one key, use an array with only the one keypair. If instead you are utilizing multi-sig functionality, provide multiple keypair objects in the array.\n   * @param ttl The time that the deploy has to live. If the deploy awaits execution longer than this interval, in seconds, then the deploy will fail. This parameter will default to the [DEFAULT_DEPLOY_TTL](../constants.ts#L1) if not specified.\n   * @returns A Deploy object that can be sent to a node to call an entrypoint\n   */\n  public callEntrypoint(\n    entryPoint: string,\n    args: RuntimeArgs,\n    sender: CLPublicKey,\n    chainName: string,\n    paymentAmount: string,\n    signingKeys: AsymmetricKey[] = [],\n    ttl: number = DEFAULT_DEPLOY_TTL\n  ): Deploy {\n    this.checkSetup();\n\n    const contractHashAsByteArray = contractHashToByteArray(\n      this.contractHash!.slice(5)\n    );\n\n    const deploy = DeployUtil.makeDeploy(\n      new DeployUtil.DeployParams(sender, chainName, 1, ttl),\n      DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n        contractHashAsByteArray,\n        entryPoint,\n        args\n      ),\n      DeployUtil.standardPayment(paymentAmount)\n    );\n\n    const signedDeploy = deploy.sign(signingKeys);\n\n    return signedDeploy;\n  }\n\n  /**\n   * Query data from a smart contract.\n   * @param path Path to the data requested\n   * @param casperClient A `CasperClient` object with a connected node. This parameter is not required if there is an existing `CasperClient` object attached to this `Contract` instance\n   * @param stateRootHash The state root hash at which to query this data. If no state root hash is provided, the most recent one will be queried and used.\n   * @returns A `Promise` that resolves to a stored `CLValue` within the smart contract. This `Promise` will be rejected if there is no `CasperClient` to use, or if the stored value is unavailable or invalid\n   */\n  public async queryContractData(\n    path: string[] = [],\n    casperClient?: CasperClient,\n    stateRootHash?: string\n  ): Promise<any> {\n    const client = casperClient || this.casperClient;\n    if (!client) throw Error(NO_CLIENT_ERR);\n\n    const stateRootHashToUse =\n      stateRootHash || (await client.nodeClient.getStateRootHash());\n\n    const contractData = await client.nodeClient.getBlockState(\n      stateRootHashToUse,\n      this.contractHash!,\n      path\n    );\n\n    if (contractData && contractData.CLValue?.isCLValue) {\n      return contractData.CLValue.value();\n    } else {\n      throw Error('Invalid stored value');\n    }\n  }\n\n  /**\n   * Query a dictionary associated with a smart contract to obtain stored key-value pairs.\n   * @param dictionaryName The name of the dictionary to be queried\n   * @param dictionaryItemKey The key of the key-value pair to be obtained\n   * @param stateRootHash The state root hash at which to query this data. If no state root hash is provided, the most recent one will be queried and used.\n   * @param casperClient A `CasperClient` object with a connected node. This parameter is not required if there is an existing `CasperClient` object attached to this `Contract` instance\n   * @returns A `Promise` which resolves to a `CLValue`. This `Promise` will be rejected if there is no `CasperClient` to use, or if the value in the dictionaryName at the key dictionaryItemKey is unavailable or invalid\n   */\n  public async queryContractDictionary(\n    dictionaryName: string,\n    dictionaryItemKey: string,\n    stateRootHash?: string,\n    casperClient?: CasperClient\n  ): Promise<CLValue> {\n    this.checkSetup();\n\n    const client = casperClient || this.casperClient;\n    if (!client) throw Error(NO_CLIENT_ERR);\n\n    const stateRootHashToUse =\n      stateRootHash || (await client.nodeClient.getStateRootHash());\n\n    const storedValue = await client.nodeClient.getDictionaryItemByName(\n      stateRootHashToUse,\n      this.contractHash!,\n      dictionaryName,\n      dictionaryItemKey\n    );\n\n    if (storedValue && storedValue.CLValue?.isCLValue) {\n      return storedValue.CLValue;\n    } else {\n      throw Error('Invalid stored value');\n    }\n  }\n}\n\n/**\n * Converts a `Map` of strings to a `CLMap` of `CLString`s\n * @param map A `Map` of strings\n * @returns A `CLMap` of `CLString`s\n * @see [CLMap](CLValue/Map.ts#L137)\n * @see [CLString](CLValue/String.ts#L54)\n */\nexport const toCLMap = (map: Map<string, string>) => {\n  const clMap = CLValueBuilder.map([\n    CLTypeBuilder.string(),\n    CLTypeBuilder.string()\n  ]);\n  for (const [key, value] of Array.from(map.entries())) {\n    clMap.set(CLValueBuilder.string(key), CLValueBuilder.string(value));\n  }\n  return clMap;\n};\n\n/**\n * Converts a `CLMap` of `CLValue`s to a `Map` of strings\n * @param map A `CLMap` of `CLValue`s\n * @returns A `Map` containing the values of the `CLMap`\n * @see [CLMap](CLValue/Map.ts#L137)\n */\nexport const fromCLMap = (map: [CLValue, CLValue][]) => {\n  const jsMap = new Map();\n\n  for (const [innerKey, value] of map) {\n    jsMap.set(innerKey.value(), value.value());\n  }\n\n  return jsMap;\n};\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\n// https://nodejs.org/api/buffer.html\n\n/**\n * Encode Uint8Array into string using Base-64 encoding.\n */\nexport function encodeBase64(bytes: Uint8Array): string {\n  return Buffer.from(bytes).toString('base64');\n}\n\n/**\n * Decode Base-64 encoded string and returns Uint8Array of bytes.\n *\n * @param base64String base16 encoded string\n */\nexport function decodeBase64(base64String: string): Uint8Array {\n  return new Uint8Array(Buffer.from(base64String, 'base64'));\n}\n\n/**\n * Convert base64 encoded string to base16 encoded string\n *\n * @param base64 base64 encoded string\n */\nexport function base64to16(base64: string): string {\n  return encodeBase16(decodeBase64(base64));\n}\n\n/**\n * Encode Uint8Array into string using Base-16 encoding.\n */\nexport function encodeBase16(bytes: Uint8Array): string {\n  return Buffer.from(bytes).toString('hex');\n}\n\n/**\n * Decode Base-16 encoded string and returns Uint8Array of bytes.\n *\n * @param base16String base16 encoded string\n */\nexport function decodeBase16(base16String: string): Uint8Array {\n  return new Uint8Array(Buffer.from(base16String, 'hex'));\n}\n\n/**\n * Convert a CSPR amount to its mote equivalent\n * @param cspr A `BigNumberish` amount of CSPR to convert to the mote equivalent\n * @returns A `BigNumber` containing the CSPR amount\n * @remarks 1 CSPR = 10^9 motes\n */\nexport function csprToMotes(cspr: BigNumberish): BigNumber {\n  return BigNumber.from(cspr).mul('1000000000');\n}\n\n/**\n * Convert an amount in motes to its CSPR equivalent\n * @param motes A `BigNumberish` amount of motes to convert to the CSPR equivalent\n * @returns A `BigNumber` containing the CSPR amount\n * @remarks\n * Note that this function will round to the nearest whole integer\n * 1 mote = 10^-9 CSPR\n */\nexport function motesToCSPR(motes: BigNumberish): BigNumber {\n  return BigNumber.from(motes).div('1000000000');\n}\n","/**\n * Util methods for making Deploy message\n *\n * @packageDocumentation\n */\nimport { Result, Ok, Err, Some, None } from 'ts-results';\nimport { concat } from '@ethersproject/bytes';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { jsonArrayMember, jsonMember, jsonObject, TypedJSON } from 'typedjson';\nimport humanizeDuration from 'humanize-duration';\n\nimport { decodeBase16, encodeBase16 } from './Conversions';\nimport {\n  CLValue,\n  CLValueBuilder,\n  CLTypeBuilder,\n  CLValueParsers,\n  CLPublicKey,\n  ToBytes,\n  CLU32,\n  CLU32Type,\n  CLU64,\n  CLU64Type,\n  CLOption,\n  CLURef,\n  ToBytesResult,\n  CLErrorCodes\n} from './CLValue';\nimport {\n  toBytesArrayU8,\n  toBytesBytesArray,\n  toBytesDeployHash,\n  toBytesString,\n  toBytesU64,\n  toBytesU32,\n  toBytesVector,\n  byteHash\n} from './ByteConverters';\nimport { RuntimeArgs } from './RuntimeArgs';\nimport { DeployUtil, Keys } from './index';\nimport { AsymmetricKey, SignatureAlgorithm, validateSignature } from './Keys';\nimport { CasperClient } from './CasperClient';\nimport { TimeService } from '../services/TimeService';\nimport { DEFAULT_DEPLOY_TTL } from '../constants';\nimport { TIME_API_URL } from '../config';\n\nconst shortEnglishHumanizer = humanizeDuration.humanizer({\n  spacer: '',\n  serialComma: false,\n  conjunction: ' ',\n  delimiter: ' ',\n  language: 'shortEn',\n  languages: {\n    // https://docs.rs/humantime/2.0.1/humantime/fn.parse_duration.html\n    shortEn: {\n      d: () => 'day',\n      h: () => 'h',\n      m: () => 'm',\n      s: () => 's',\n      ms: () => 'ms'\n    }\n  }\n});\n\n/**\n * Deserializes a `Uint8Array` into a hexadecimal string\n * @param bytes A `Uint8Array` to be deserialized\n * @returns A base-16 encoded string of the provided byte array\n */\nconst byteArrayJsonSerializer: (bytes: Uint8Array) => string = (\n  bytes: Uint8Array\n) => {\n  return encodeBase16(bytes);\n};\n\n//Shouldn't the above and below function names be swapped?\n\n/**\n * Serializes a hexadecimal string to a `Uint8Array`\n * @param bytes A hexadecimal string to be serialized\n * @returns A base-16 encoded string of the provided byte array\n */\nconst byteArrayJsonDeserializer: (str: string) => Uint8Array = (\n  str: string\n) => {\n  return decodeBase16(str);\n};\n\n/**\n * Returns a humanizer duration\n * @param ttl in milliseconds\n * @returns A human-readable time in days, hours, minutes, seconds, then milliseconds\n */\nexport const humanizerTTL = (ttl: number) => {\n  return shortEnglishHumanizer(ttl);\n};\n\n/**\n * Returns duration in milliseconds\n * @param ttl Human-readable string generated by [humanizerTTL](#L91)\n * @returns The time-to-live in milliseconds\n */\nexport const dehumanizerTTL = (ttl: string): number => {\n  const dehumanizeUnit = (s: string): number => {\n    if (s.includes('ms')) {\n      return Number(s.replace('ms', ''));\n    }\n    if (s.includes('s') && !s.includes('m')) {\n      return Number(s.replace('s', '')) * 1000;\n    }\n    if (s.includes('m') && !s.includes('s')) {\n      return Number(s.replace('m', '')) * 60 * 1000;\n    }\n    if (s.includes('h')) {\n      return Number(s.replace('h', '')) * 60 * 60 * 1000;\n    }\n    if (s.includes('day')) {\n      return Number(s.replace('day', '')) * 24 * 60 * 60 * 1000;\n    }\n    throw Error('Unsuported TTL unit');\n  };\n\n  return ttl\n    .split(' ')\n    .map(dehumanizeUnit)\n    .reduce((acc, val) => (acc += val));\n};\n\n/**\n * An object containing a unique address constructed from the `transferId` of a `Deploy`\n */\nexport class UniqAddress {\n  /** The `CLPublicKey` representation of the transacting account */\n  publicKey: CLPublicKey;\n\n  /** A transaction nonce */\n  transferId: BigNumber;\n\n  /**\n   * Constructs UniqAddress from the transacting account's `CLPublicKey` and unique transferId.\n   * @param publicKey CLPublicKey instance\n   * @param transferId BigNumberish value (can be also string representing number). Max U64.\n   */\n  constructor(publicKey: CLPublicKey, transferId: BigNumberish) {\n    if (!(publicKey instanceof CLPublicKey)) {\n      throw new Error('publicKey is not an instance of CLPublicKey');\n    }\n    const bigNum = BigNumber.from(transferId);\n    if (bigNum.gt('18446744073709551615')) {\n      throw new Error('transferId max value is U64');\n    }\n    this.transferId = bigNum;\n    this.publicKey = publicKey;\n  }\n\n  /**\n   * Stringifies the `UniqAddress`\n   * @returns string with the format \"accountHex-transferIdHex\"\n   */\n  toString(): string {\n    return `${this.publicKey.toHex()}-${this.transferId.toHexString()}`;\n  }\n\n  /**\n   * Builds UniqAddress from string\n   * @param value `UniqAddress` string representation in the format \"accountHex-transferIdHex\"\n   * @returns A new `UniqAddress`\n   */\n  static fromString(value: string): UniqAddress {\n    const [accountHex, transferHex] = value.split('-');\n    const publicKey = CLPublicKey.fromHex(accountHex);\n    return new UniqAddress(publicKey, transferHex);\n  }\n}\n\n/** Header data of a `Deploy` object that contains information like the transacting account, timestamp, gas price, and other relevent deploy information */\n@jsonObject\nexport class DeployHeader implements ToBytes {\n  @jsonMember({\n    serializer: (account: CLPublicKey) => {\n      return account.toHex();\n    },\n    deserializer: (hexStr: string) => {\n      return CLPublicKey.fromHex(hexStr, false);\n    }\n  })\n  public account: CLPublicKey;\n\n  @jsonMember({\n    serializer: (n: number) => new Date(n).toISOString(),\n    deserializer: (s: string) => Date.parse(s)\n  })\n  public timestamp: number;\n\n  @jsonMember({\n    serializer: humanizerTTL,\n    deserializer: dehumanizerTTL\n  })\n  public ttl: number;\n\n  @jsonMember({ constructor: Number, name: 'gas_price' })\n  public gasPrice: number;\n\n  @jsonMember({\n    name: 'body_hash',\n    serializer: byteArrayJsonSerializer,\n    deserializer: byteArrayJsonDeserializer\n  })\n  public bodyHash: Uint8Array;\n\n  @jsonArrayMember(Uint8Array, {\n    serializer: (value: Uint8Array[]) =>\n      value.map(it => byteArrayJsonSerializer(it)),\n    deserializer: (json: any) =>\n      json.map((it: string) => byteArrayJsonDeserializer(it))\n  })\n  public dependencies: Uint8Array[];\n\n  @jsonMember({ name: 'chain_name', constructor: String })\n  public chainName: string;\n\n  /**\n   * Constructs the header portion of a deploy\n   * @param account The `CLPublicKey` representation of the transacting account.\n   * @param timestamp The UNIX timestamp at which the deploy was created\n   * @param ttl The amount of time in milliseconds that the deploy is given to live before it is dropped and rejected by validators\n   * @param gasPrice Price per gas unit for this deploy, measured in motes, where 1 mote = 10^-9 CSPR\n   * @param bodyHash  Hash of the compiled WebAssembly logic\n   * @param dependencies Zero, one, or many instances of session code that is/are required to execute before this deploy\n   * @param chainName The chain for which the deploy should be deployed on. For the Casper mainnet, use \"casper\" and for the testnet, use \"casper-test\"\n   */\n  constructor(\n    account: CLPublicKey,\n    timestamp: number,\n    ttl: number,\n    gasPrice: number,\n    bodyHash: Uint8Array,\n    dependencies: Uint8Array[],\n    chainName: string\n  ) {\n    this.account = account;\n    this.timestamp = timestamp;\n    this.ttl = ttl;\n    this.gasPrice = gasPrice;\n    this.bodyHash = bodyHash;\n    this.dependencies = dependencies;\n    this.chainName = chainName;\n  }\n\n  /**\n   * Converts `DeployHeader` to `ToBytesResult`.\n   * @returns `Ok` result, consisting of the account's byte representation, the timestamp, ttl, gasPrice, bodyHash, dependencies, and chainName concatenated together in a byte array\n   */\n  public toBytes(): ToBytesResult {\n    return Ok(\n      concat([\n        CLValueParsers.toBytes(this.account).unwrap(),\n        toBytesU64(this.timestamp),\n        toBytesU64(this.ttl),\n        toBytesU64(this.gasPrice),\n        toBytesDeployHash(this.bodyHash),\n        toBytesVector(this.dependencies.map(d => new DeployHash(d))),\n        toBytesString(this.chainName)\n      ])\n    );\n  }\n}\n\n/**\n * The cryptographic hash of a Deploy.\n */\nclass DeployHash implements ToBytes {\n  /**\n   * Constructs a `DeployHash` from a `Uint8Array` typed deploy hash\n   */\n  constructor(private hash: Uint8Array) {}\n\n  /**\n   * Converts `DeployHash` to `ToBytes`\n   * @returns `Ok` result, consisting of the deploy hash as a byte array\n   */\n  public toBytes(): ToBytesResult {\n    return Ok(toBytesDeployHash(this.hash));\n  }\n}\n\nexport interface DeployJson {\n  session: Record<string, any>;\n  approvals: { signature: string; signer: string }[];\n  header: DeployHeader;\n  payment: Record<string, any>;\n  hash: string;\n}\n\n/**\n * A struct containing a signature and the public key of the signer.\n */\n@jsonObject\nexport class Approval {\n  @jsonMember({ constructor: String })\n  public signer: string;\n  @jsonMember({ constructor: String })\n  public signature: string;\n}\n\nabstract class ExecutableDeployItemInternal implements ToBytes {\n  public abstract tag: number;\n\n  public abstract args: RuntimeArgs;\n\n  public abstract toBytes(): ToBytesResult;\n\n  public getArgByName(name: string): CLValue | undefined {\n    return this.args.args.get(name);\n  }\n\n  public setArg(name: string, value: CLValue) {\n    this.args.args.set(name, value);\n  }\n}\n\n/**\n * Deserializes an array of runtime arguments to a `RuntimeArgs` object\n * @param arr An array of type `any` containing valid serialized runtime arguments. Can be generated from [serRA](#L338)\n * @returns `RuntimeArgs` object\n */\nconst desRA = (arr: any) => {\n  const raSerializer = new TypedJSON(RuntimeArgs);\n  const value = {\n    args: arr\n  };\n  return raSerializer.parse(value);\n};\n\n/**\n * Serializes a `RuntimeArgs` object to a byte array\n * @param ra `RuntimeArgs` object to be serialized\n * @returns A serialized byte array of runtime arguments, which can be deserialized by [desRA](#L326)\n */\nconst serRA = (ra: RuntimeArgs) => {\n  const raSerializer = new TypedJSON(RuntimeArgs);\n  const json = raSerializer.toPlainJson(ra);\n\n  return Object.values(json as any)[0];\n};\n\n/**\n * An object which can be passed along in a deploy, including session code and runtime arguments.\n */\n@jsonObject\nexport class ModuleBytes extends ExecutableDeployItemInternal {\n  public tag = 0;\n\n  /**\n   * A `Uint8Array` typed representation of the session code.\n   */\n  @jsonMember({\n    name: 'module_bytes',\n    serializer: byteArrayJsonSerializer,\n    deserializer: byteArrayJsonDeserializer\n  })\n  public moduleBytes: Uint8Array;\n\n  /**\n   * A `RuntimeArgs` object containing the runtime arguments passed along with the deploy.\n   */\n  @jsonMember({\n    deserializer: desRA,\n    serializer: serRA\n  })\n  public args: RuntimeArgs;\n\n  /**\n   * Constructs a `ModuleBytes` object from the `Uint8Array` typed session code and a `RuntimeArgs` object.\n   * @param moduleBytes The `Uint8Array` representation of the session code\n   * @param args Runtime arguments as `RuntimeArgs`\n   */\n  constructor(moduleBytes: Uint8Array, args: RuntimeArgs) {\n    super();\n\n    this.moduleBytes = moduleBytes;\n    this.args = args;\n  }\n\n  /**\n   * Converts `ModuleBytes` to `ToBytesResult`\n   * @returns `Ok` result, consisting of the `ModuleBytes` as a byte array\n   */\n  public toBytes(): ToBytesResult {\n    if (!this.args) return Err(CLErrorCodes.Formatting);\n\n    return Ok(\n      concat([\n        Uint8Array.from([this.tag]),\n        toBytesArrayU8(this.moduleBytes),\n        toBytesBytesArray(this.args.toBytes().unwrap())\n      ])\n    );\n  }\n}\n\n/** The `StoredContractByHash` class, when instantiated, represents a stored smart contract referenced by it's hash */\n@jsonObject\nexport class StoredContractByHash extends ExecutableDeployItemInternal {\n  /** An identifier that other functions use to recognize that `StoredContractByHash` objects are indeed stored contracts by hash during deserialization */\n  public tag = 1;\n\n  /** The `Uint8Array` typed hash of the stored smart contract */\n  @jsonMember({\n    serializer: byteArrayJsonSerializer,\n    deserializer: byteArrayJsonDeserializer\n  })\n  public hash: Uint8Array;\n\n  /** An entrypoint of the stored smart contract */\n  @jsonMember({\n    name: 'entry_point',\n    constructor: String\n  })\n  public entryPoint: string;\n\n  /** A `RuntimeArgs` object containing the runtime arguments to be passed along with the deploy. */\n  @jsonMember({\n    deserializer: desRA,\n    serializer: serRA\n  })\n  public args: RuntimeArgs;\n\n  /**\n   * Constructs a `StoredContractByHash` object from the `Uint8Array` typed hash, entrypoint of the contract, and associated runtime arguments\n   * @param hash `Uint8Array` typed smart contract hash\n   * @param entryPoint An entrypoint of the smart contract\n   * @param args The runtime arguments for interaction on the `entryPoint`\n   */\n  constructor(hash: Uint8Array, entryPoint: string, args: RuntimeArgs) {\n    super();\n\n    this.entryPoint = entryPoint;\n    this.args = args;\n    this.hash = hash;\n  }\n\n  /**\n   * Converts `StoredContractByHash` to `ToBytesResult`\n   * @returns `Ok` result, consisting of the tag, contract hash, entrypoint, and runtime arguments as a byte array\n   */\n  public toBytes(): ToBytesResult {\n    return Ok(\n      concat([\n        Uint8Array.from([this.tag]),\n        toBytesBytesArray(this.hash),\n        toBytesString(this.entryPoint),\n        toBytesBytesArray(this.args.toBytes().unwrap())\n      ])\n    );\n  }\n}\n\n/** The `StoredContractByName` class, when instantiated, represents a stored smart contract referenced by it's name */\n@jsonObject\nexport class StoredContractByName extends ExecutableDeployItemInternal {\n  /** An identifier that other functions use to recognize that `StoredContractByName` objects are indeed stored contracts by name during deserialization */\n  public tag = 2;\n\n  /** The name of the smart contract */\n  @jsonMember({ constructor: String })\n  public name: string;\n\n  /** An entrypoint of the smart contract */\n  @jsonMember({\n    name: 'entry_point',\n    constructor: String\n  })\n  public entryPoint: string;\n\n  /** A `RuntimeArgs` object containing the runtime arguments to be passed along with the deploy. */\n  @jsonMember({\n    deserializer: desRA,\n    serializer: serRA\n  })\n  public args: RuntimeArgs;\n\n  /**\n   * Constructs a `StoredContractByName` object from the name, entrypoint of the contract, and associated runtime arguments\n   * @param name The name of the smart contract\n   * @param entryPoint An entrypoint of the smart contract\n   * @param args The runtime arguments for interaction on the `entryPoint`\n   */\n  constructor(name: string, entryPoint: string, args: RuntimeArgs) {\n    super();\n\n    this.name = name;\n    this.entryPoint = entryPoint;\n    this.args = args;\n  }\n\n  /**\n   * Converts `StoredContractByName` to `ToBytesResult`\n   * @returns `Ok` result, consisting of the tag, name, entrypoint, and runtime arguments as a byte array\n   */\n  public toBytes(): ToBytesResult {\n    return Ok(\n      concat([\n        Uint8Array.from([this.tag]),\n        toBytesString(this.name),\n        toBytesString(this.entryPoint),\n        toBytesBytesArray(this.args.toBytes().unwrap())\n      ])\n    );\n  }\n}\n\n/** The `StoredVersionedContractByName` class, when instantiated, represents a stored smart contract referenced by it's name */\n@jsonObject\nexport class StoredVersionedContractByName extends ExecutableDeployItemInternal {\n  /** An identifier that other functions use to recognize that `StoredVersionedContractByName` objects are indeed stored versioned contracts by name during deserialization */\n  public tag = 4;\n\n  /** The name of the stored versioned contract */\n  @jsonMember({ constructor: String })\n  public name: string;\n\n  /** The version of the contract */\n  @jsonMember({ constructor: Number, preserveNull: true })\n  public version: number | null;\n\n  /** An entrypoint of the smart contract */\n  @jsonMember({ name: 'entry_point', constructor: String })\n  public entryPoint: string;\n\n  /** A `RuntimeArgs` object containing the runtime arguments to be passed along with the deploy. */\n  @jsonMember({\n    deserializer: desRA,\n    serializer: serRA\n  })\n  public args: RuntimeArgs;\n\n  /**\n   * Constructs a `StoredContractByName` object from the name, entrypoint of the contract, and associated runtime arguments\n   * @param name The name of the smart contract\n   * @param version The version of the named smart contract\n   * @param entryPoint An entrypoint of the smart contract\n   * @param args The runtime arguments for interaction on the `entryPoint`\n   */\n  constructor(\n    name: string,\n    version: number | null,\n    entryPoint: string,\n    args: RuntimeArgs\n  ) {\n    super();\n    this.name = name;\n    this.version = version;\n    this.entryPoint = entryPoint;\n    this.args = args;\n  }\n\n  /**\n   * Converts `StoredVersionedContractByName` to `ToBytesResult`\n   * @returns `Ok` result, consisting of the tag, name, serialized version, entrypoint, and runtime arguments as a byte array\n   */\n  public toBytes(): ToBytesResult {\n    let serializedVersion;\n    if (this.version === null) {\n      serializedVersion = new CLOption(None, new CLU32Type());\n    } else {\n      serializedVersion = new CLOption(Some(new CLU32(this.version as number)));\n    }\n    return Ok(\n      concat([\n        Uint8Array.from([this.tag]),\n        toBytesString(this.name),\n        CLValueParsers.toBytes(serializedVersion).unwrap(),\n        toBytesString(this.entryPoint),\n        toBytesBytesArray(this.args.toBytes().unwrap())\n      ])\n    );\n  }\n}\n\n/** The `StoredVersionedContractByHash` class, when instantiated, represents a stored versioned smart contract referenced by it's hash */\n@jsonObject\nexport class StoredVersionedContractByHash extends ExecutableDeployItemInternal {\n  /** An identifier that other functions use to recognize that `StoredVersionedContractByHash` objects are indeed stored versioned contracts by hash during deserialization */\n  public tag = 3;\n\n  /** The `Uint8Array` typed hash of the stored smart contract */\n  @jsonMember({\n    serializer: byteArrayJsonSerializer,\n    deserializer: byteArrayJsonDeserializer\n  })\n  public hash: Uint8Array;\n\n  /** The version of the contract */\n  @jsonMember({\n    constructor: Number,\n    preserveNull: true\n  })\n  public version: number | null;\n\n  /** An entrypoint of the stored smart contract */\n  @jsonMember({\n    name: 'entry_point',\n    constructor: String\n  })\n  public entryPoint: string;\n\n  /** A `RuntimeArgs` object containing the runtime arguments to be passed along with the deploy. */\n  @jsonMember({\n    deserializer: desRA,\n    serializer: serRA\n  })\n  public args: RuntimeArgs;\n\n  /**\n   * Constructs a `StoredContractByHash` object from the `Uint8Array` typed hash, entrypoint of the contract, and associated runtime arguments\n   * @param hash `Uint8Array` typed smart contract hash\n   * @param version The version of the smart contract\n   * @param entryPoint An entrypoint of the smart contract\n   * @param args The runtime arguments for interaction on the `entryPoint`\n   */\n  constructor(\n    hash: Uint8Array,\n    version: number | null,\n    entryPoint: string,\n    args: RuntimeArgs\n  ) {\n    super();\n    this.hash = hash;\n    this.version = version;\n    this.entryPoint = entryPoint;\n    this.args = args;\n  }\n\n  /**\n   * Converts `StoredVersionedContractByHash` to `ToBytesResult`\n   * @returns `Ok` result, consisting of the tag, hash, serialized version, entrypoint, and runtime arguments as a byte array\n   */\n  public toBytes(): ToBytesResult {\n    let serializedVersion;\n\n    if (this.version === null) {\n      serializedVersion = new CLOption(None, new CLU32Type());\n    } else {\n      serializedVersion = new CLOption(Some(new CLU32(this.version as number)));\n    }\n    return Ok(\n      concat([\n        Uint8Array.from([this.tag]),\n        toBytesBytesArray(this.hash),\n        CLValueParsers.toBytes(serializedVersion).unwrap(),\n        toBytesString(this.entryPoint),\n        toBytesBytesArray(this.args.toBytes().unwrap())\n      ])\n    );\n  }\n}\n\n/** Represents a transferral deploy. Construct and deploy to execute a standard CSPR transfer */\n@jsonObject\nexport class Transfer extends ExecutableDeployItemInternal {\n  /** An identifier that other functions use to recognize that `Transfer` objects are indeed transfers during deserialization */\n  public tag = 5;\n\n  /** Runtime arguments necessary for building the transfer deploy */\n  @jsonMember({\n    deserializer: desRA,\n    serializer: serRA\n  })\n  public args: RuntimeArgs;\n\n  /**\n   * Constructor for Transfer deploy item.\n   * @param args `RuntimeArgs` containing the transfer amount in motes, the URef of the target purse or the public key of the target account, the URef of the source purse, and the transfer id\n   * @remarks The `RuntimeArgs` should contain the arguments `amount`, `target`, `sourcePurse`, and `id`\n   */\n  constructor(args: RuntimeArgs) {\n    super();\n    this.args = args;\n  }\n\n  /**\n   * Converts `Transfer` to `ToBytesResult`\n   * @returns `Ok` result, consisting of the tag and runtime arguments concatenated in a byte array\n   */\n  public toBytes(): ToBytesResult {\n    return Ok(\n      concat([\n        Uint8Array.from([this.tag]),\n        toBytesBytesArray(this.args.toBytes().unwrap())\n      ])\n    );\n  }\n}\n\n/** Represents an executable deploy object that can be deployed on-chain. `ModuleBytes`, `StoredContractByHash`, `StoredContractByName`, `StoredVersionedContractByHash`, `StoredVersionedContractByName`, and `Transfer` objects can all be casted as `ExecutableDeployItem`s. */\n@jsonObject\nexport class ExecutableDeployItem implements ToBytes {\n  /** Optional `ModuleBytes` object representing the `ExecutableDeployItem` if applicable. */\n  @jsonMember({\n    name: 'ModuleBytes',\n    constructor: ModuleBytes\n  })\n  public moduleBytes?: ModuleBytes;\n\n  /** Optional `StoredContractByHash` object representing the `ExecutableDeployItem` if applicable. */\n  @jsonMember({\n    name: 'StoredContractByHash',\n    constructor: StoredContractByHash\n  })\n  public storedContractByHash?: StoredContractByHash;\n\n  /** Optional `StoredContractByName` object representing the `ExecutableDeployItem` if applicable. */\n  @jsonMember({\n    name: 'StoredContractByName',\n    constructor: StoredContractByName\n  })\n  public storedContractByName?: StoredContractByName;\n\n  /** Optional `StoredVersionedContractByHash` object representing the `ExecutableDeployItem` if applicable. */\n  @jsonMember({\n    name: 'StoredVersionedContractByHash',\n    constructor: StoredVersionedContractByHash\n  })\n  public storedVersionedContractByHash?: StoredVersionedContractByHash;\n\n  /** Optional `StoredVersionedContractByName` object representing the `ExecutableDeployItem` if applicable. */\n  @jsonMember({\n    name: 'StoredVersionedContractByName',\n    constructor: StoredVersionedContractByName\n  })\n  public storedVersionedContractByName?: StoredVersionedContractByName;\n\n  /** Optional `Transfer` object representing the `ExecutableDeployItem` if applicable. */\n  @jsonMember({\n    name: 'Transfer',\n    constructor: Transfer\n  })\n  public transfer?: Transfer;\n\n  /**\n   * Converts `ExecutableDeployItem` to `ToBytesResult` depending on the `ExecutableDeployItem`'s type. Throws an error if it cannot serialize the `ExecutableDeployItem` from its parent type.\n   * @returns `ModuleBytes`, or `StoredContractByHash`, or `StoredContractByName`, or `StoredVersionedContractByHash`, or `StoredVersionedContractByName`, or `Transfer` depending on the original type.\n   */\n  public toBytes(): ToBytesResult {\n    if (this.isModuleBytes()) {\n      return this.moduleBytes!.toBytes();\n    } else if (this.isStoredContractByHash()) {\n      return this.storedContractByHash!.toBytes();\n    } else if (this.isStoredContractByName()) {\n      return this.storedContractByName!.toBytes();\n    } else if (this.isStoredVersionContractByHash()) {\n      return this.storedVersionedContractByHash!.toBytes();\n    } else if (this.isStoredVersionContractByName()) {\n      return this.storedVersionedContractByName!.toBytes();\n    } else if (this.isTransfer()) {\n      return this.transfer!.toBytes();\n    }\n    throw new Error('failed to serialize ExecutableDeployItemJsonWrapper');\n  }\n\n  /**\n   * Gets a `CLValue` argument via its name, returns `undefined` if the argument does not exist. Throws an error if it cannot serialize the `ExecutableDeployItem` from its original type.\n   * @param name The name of the argument\n   * @returns A `CLValue` runtime argument\n   */\n  public getArgByName(name: string): CLValue | undefined {\n    if (this.isModuleBytes()) {\n      return this.moduleBytes!.getArgByName(name);\n    } else if (this.isStoredContractByHash()) {\n      return this.storedContractByHash!.getArgByName(name);\n    } else if (this.isStoredContractByName()) {\n      return this.storedContractByName!.getArgByName(name);\n    } else if (this.isStoredVersionContractByHash()) {\n      return this.storedVersionedContractByHash!.getArgByName(name);\n    } else if (this.isStoredVersionContractByName()) {\n      return this.storedVersionedContractByName!.getArgByName(name);\n    } else if (this.isTransfer()) {\n      return this.transfer!.getArgByName(name);\n    }\n    throw new Error('failed to serialize ExecutableDeployItemJsonWrapper');\n  }\n\n  /**\n   * Sets an argument given an argument name and a value typed as a `CLValue`. Throws an error if it cannot serialize the `ExecutableDeployItem` from its original type.\n   * @param name The name of the argument being set\n   * @param value The `CLValue` that will be stored under the new argument `name`\n   * @returns The success status of setting the argument\n   */\n  public setArg(name: string, value: CLValue) {\n    if (this.isModuleBytes()) {\n      return this.moduleBytes!.setArg(name, value);\n    } else if (this.isStoredContractByHash()) {\n      return this.storedContractByHash!.setArg(name, value);\n    } else if (this.isStoredContractByName()) {\n      return this.storedContractByName!.setArg(name, value);\n    } else if (this.isStoredVersionContractByHash()) {\n      return this.storedVersionedContractByHash!.setArg(name, value);\n    } else if (this.isStoredVersionContractByName()) {\n      return this.storedVersionedContractByName!.setArg(name, value);\n    } else if (this.isTransfer()) {\n      return this.transfer!.setArg(name, value);\n    }\n    throw new Error('failed to serialize ExecutableDeployItemJsonWrapper');\n  }\n\n  /**\n   * Builds an `ExecutableDeployItem` from an `ExecutableDeployItemInternal`. The `ExecutableDeployItemInternal` abstract class is inherited by `ModuleBytes`, `StoredContractByHash`, `StoredContractByName`, `StoredVersionedContractByHash`, `StoredVersionedContractByName`, and `Transfer`, so you may pass in an object of any of these types.\n   * @param item The `ExecutableDeployItemInternal` to build into an `ExecutableDeployItem`\n   */\n  public static fromExecutableDeployItemInternal(\n    item: ExecutableDeployItemInternal\n  ) {\n    const res = new ExecutableDeployItem();\n    switch (item.tag) {\n      case 0:\n        res.moduleBytes = item as ModuleBytes;\n        break;\n      case 1:\n        res.storedContractByHash = item as StoredContractByHash;\n        break;\n      case 2:\n        res.storedContractByName = item as StoredContractByName;\n        break;\n      case 3:\n        res.storedVersionedContractByHash = item as StoredVersionedContractByHash;\n        break;\n      case 4:\n        res.storedVersionedContractByName = item as StoredVersionedContractByName;\n        break;\n      case 5:\n        res.transfer = item as Transfer;\n        break;\n    }\n    return res;\n  }\n\n  /**\n   * Creates a new `ModuleBytes` object from a `Uint8Array` of module bytes and a set of `RuntimeArgs`\n   * @param moduleBytes A set of module bytes as a `Uint8Array`\n   * @param args The runtime arguments for the new `ModuleBytes` object\n   * @returns A new `ExecutableDeployItem` created from a new `ModuleBytes` object built using `moduleBytes` and `args`\n   */\n  public static newModuleBytes(\n    moduleBytes: Uint8Array,\n    args: RuntimeArgs\n  ): ExecutableDeployItem {\n    return ExecutableDeployItem.fromExecutableDeployItemInternal(\n      new ModuleBytes(moduleBytes, args)\n    );\n  }\n\n  /**\n   * Creates a new `StoredContractByHash` object from a `Uint8Array` contract hash, entrypoint, and runtime arguments\n   * @param hash `Uint8Array` representation of a smart contract hash\n   * @param entryPoint Name of an entrypoint of the stored contract\n   * @param args The runtime arguments for the new `StoredContractByHash` object\n   * @returns A new `ExecutableDeployItem` created from a new `StoredContractByHash` object built using `hash`, `entryPoint` and `args`\n   */\n  public static newStoredContractByHash(\n    hash: Uint8Array,\n    entryPoint: string,\n    args: RuntimeArgs\n  ) {\n    return ExecutableDeployItem.fromExecutableDeployItemInternal(\n      new StoredContractByHash(hash, entryPoint, args)\n    );\n  }\n\n  /**\n   * Creates a new `StoredContractByName` object from a contract name, entrypoint, and runtime arguments\n   * @param name The name of the stored smart contract\n   * @param entryPoint Name of an entrypoint of the stored contract\n   * @param args The runtime arguments for the new `StoredContractByHash` object\n   * @returns A new `ExecutableDeployItem` created from a new `StoredContractByName` object built using `name`, `entryPoint` and `args`\n   */\n  public static newStoredContractByName(\n    name: string,\n    entryPoint: string,\n    args: RuntimeArgs\n  ) {\n    return ExecutableDeployItem.fromExecutableDeployItemInternal(\n      new StoredContractByName(name, entryPoint, args)\n    );\n  }\n\n  /**\n   * Creates a new `StoredVersionedContractByHash` object from a `Uint8Array` contract hash, version number, entrypoint, and runtime arguments\n   * @param hash `Uint8Array` representation of a smart contract hash\n   * @param version The version of the stored contract\n   * @param entryPoint Name of an entrypoint of the stored contract\n   * @param args The runtime arguments for the new `StoredContractByHash` object\n   * @returns A new `ExecutableDeployItem` created from a new `StoredVersionedContractByHash` object built using `hash`, `version`, `entryPoint` and `args`\n   */\n  public static newStoredVersionContractByHash(\n    hash: Uint8Array,\n    version: number | null,\n    entryPoint: string,\n    args: RuntimeArgs\n  ) {\n    return ExecutableDeployItem.fromExecutableDeployItemInternal(\n      new StoredVersionedContractByHash(hash, version, entryPoint, args)\n    );\n  }\n\n  /**\n   * Creates a new `StoredVersionedContractByName` object from a contract name, version number, entrypoint, and runtime arguments\n   * @param name The name of the stored smart contract\n   * @param version The version of the stored contract\n   * @param entryPoint Name of an entrypoint of the stored contract\n   * @param args The runtime arguments for the new `StoredContractByHash` object\n   * @returns A new `ExecutableDeployItem` created from a new `StoredVersionedContractByName` object built using `name`, `version`, `entryPoint` and `args`\n   */\n  public static newStoredVersionContractByName(\n    name: string,\n    version: number | null,\n    entryPoint: string,\n    args: RuntimeArgs\n  ) {\n    return ExecutableDeployItem.fromExecutableDeployItemInternal(\n      new StoredVersionedContractByName(name, version, entryPoint, args)\n    );\n  }\n\n  /**\n   * Creates a new `Transfer` object\n   * @param amount The number of motes to transfer, where 1 mote = 1 * 10^-9 CSPR\n   * @param target URef of the target purse or the public key of target account, as a `CLUref` or `CLPublicKey` respectively\n   * @param sourcePurse URef of the source purse. If this is omitted, the main purse of the account creating this transfer will be used as the source purse\n   * @param id User-defined transfer id\n   * @returns New `Transfer` object which can be deployed to execute a standard CSPR transferral\n   */\n  public static newTransfer(\n    amount: BigNumberish,\n    target: CLURef | CLPublicKey,\n    sourcePurse: CLURef | null = null,\n    id: BigNumberish\n  ): ExecutableDeployItem {\n    const runtimeArgs = RuntimeArgs.fromMap({});\n    runtimeArgs.insert('amount', CLValueBuilder.u512(amount));\n    if (sourcePurse) {\n      runtimeArgs.insert('source', sourcePurse);\n    }\n    if (target instanceof CLURef) {\n      runtimeArgs.insert('target', target);\n    } else if (target instanceof CLPublicKey) {\n      runtimeArgs.insert('target', target);\n    } else {\n      throw new Error('Please specify target');\n    }\n    if (id === undefined) {\n      throw new Error('transfer-id missing in new transfer.');\n    } else {\n      runtimeArgs.insert(\n        'id',\n        CLValueBuilder.option(Some(new CLU64(id)), new CLU64Type())\n      );\n    }\n    return ExecutableDeployItem.fromExecutableDeployItemInternal(\n      new Transfer(runtimeArgs)\n    );\n  }\n\n  // TODO: Abstract the logic of this and newTransfer so there won't be so much redundancy.\n  /**\n   * Creates a new `Transfer` object with an optional transfer id\n   * @param amount The number of motes to transfer, where 1 mote = 1 * 10^-9 CSPR\n   * @param target URef of the target purse or the public key of target account, as a `CLUref` or `CLPublicKey` respectively\n   * @param sourcePurse URef of the source purse. If this is omitted, the main purse of the account creating this transfer will be used as the source purse\n   * @param id User-defined transfer id, which if not provided will be created on the fly\n   * @returns New `Transfer` object which can be deployed to execute a standard CSPR transferral\n   */\n  public static newTransferWithOptionalTransferId(\n    amount: BigNumberish,\n    target: CLURef | CLPublicKey,\n    sourcePurse?: CLURef | null,\n    id?: BigNumberish\n  ) {\n    const runtimeArgs = RuntimeArgs.fromMap({});\n    runtimeArgs.insert('amount', CLValueBuilder.u512(amount));\n    if (sourcePurse) {\n      runtimeArgs.insert('source', sourcePurse);\n    }\n    if (target instanceof CLURef) {\n      runtimeArgs.insert('target', target);\n    } else if (target instanceof CLPublicKey) {\n      runtimeArgs.insert(\n        'target',\n        CLValueBuilder.byteArray(target.toAccountHash())\n      );\n    } else {\n      throw new Error('Please specify target');\n    }\n    if (id !== undefined && id !== null) {\n      runtimeArgs.insert(\n        'id',\n        CLValueBuilder.option(Some(CLValueBuilder.u64(id)), CLTypeBuilder.u64())\n      );\n    } else {\n      runtimeArgs.insert(\n        'id',\n        CLValueBuilder.option(None, CLTypeBuilder.u64())\n      );\n    }\n\n    return ExecutableDeployItem.fromExecutableDeployItemInternal(\n      new Transfer(runtimeArgs)\n    );\n  }\n\n  /**\n   * Constructor for Transfer deploy item using UniqAddress.\n   * @param source `CLPublicKey` of source account\n   * @param target `UniqAddress` of target account\n   * @param amount The amount of motes to transfer, where 1 mote = 1 * 10^-9 CSPR\n   * @param paymentAmount The number of motes paid to execution engine, where 1 mote = 1 * 10^-9 CSPR\n   * @param chainName Name of the chain, to avoid the `Deploy` from being accidentally or maliciously included in a different chain.\n   * @param gasPrice The gas price at which to execute the deploy\n   * @param ttl Time that the `Deploy` will remain valid for, in milliseconds. The default value is 1800000, which is 30 minutes\n   * @param sourcePurse URef of the source purse. If this is omitted, the main purse of the account creating this \\\n   * transfer will be used as the source purse\n   * @returns A new `Deploy` representing a transferral to a unique address\n   */\n  public static newTransferToUniqAddress(\n    source: CLPublicKey,\n    target: UniqAddress,\n    amount: BigNumberish,\n    paymentAmount: BigNumberish,\n    chainName: string,\n    gasPrice = 1,\n    ttl = DEFAULT_DEPLOY_TTL,\n    sourcePurse?: CLURef\n  ): Deploy {\n    const deployParams = new DeployUtil.DeployParams(\n      source,\n      chainName,\n      gasPrice,\n      ttl\n    );\n\n    const payment = DeployUtil.standardPayment(paymentAmount);\n\n    const session = DeployUtil.ExecutableDeployItem.newTransfer(\n      amount,\n      target.publicKey,\n      sourcePurse,\n      target.transferId\n    );\n\n    return DeployUtil.makeDeploy(deployParams, session, payment);\n  }\n\n  /**\n   * Identifies whether the `ExecutableDeployItem` is of the original type `ModuleBytes`\n   * @returns `true` is the `ExecutableDeployItem` conforms to `ModuleBytes`, and `false` otherwise.\n   */\n  public isModuleBytes(): boolean {\n    return !!this.moduleBytes;\n  }\n\n  /**\n   * Casts the `ExecutableDeployItem` to `ModuleBytes` if possible\n   * @returns `ModuleBytes` representation of `ExecutableDeployItem`, or `undefined` if the `ExecutableDeployItem` cannot be cast\n   */\n  public asModuleBytes(): ModuleBytes | undefined {\n    return this.moduleBytes;\n  }\n\n  /**\n   * Identifies whether the `ExecutableDeployItem` is of the original type `StoredContractByHash`\n   * @returns `true` is the `ExecutableDeployItem` conforms to `StoredContractByHash`, and `false` otherwise.\n   */\n  public isStoredContractByHash(): boolean {\n    return !!this.storedContractByHash;\n  }\n\n  /**\n   * Casts the `ExecutableDeployItem` to `StoredContractByHash` if possible\n   * @returns `StoredContractByHash` representation of `ExecutableDeployItem`, or `undefined` if the `ExecutableDeployItem` cannot be cast\n   */\n  public asStoredContractByHash(): StoredContractByHash | undefined {\n    return this.storedContractByHash;\n  }\n\n  /**\n   * Identifies whether the `ExecutableDeployItem` is of the original type `StoredContractByName`\n   * @returns `true` is the `ExecutableDeployItem` conforms to `StoredContractByName`, and `false` otherwise.\n   */\n  public isStoredContractByName(): boolean {\n    return !!this.storedContractByName;\n  }\n\n  /**\n   * Casts the `ExecutableDeployItem` to `StoredContractByName` if possible\n   * @returns `StoredContractByName` representation of `ExecutableDeployItem`, or `undefined` if the `ExecutableDeployItem` cannot be cast\n   */\n  public asStoredContractByName(): StoredContractByName | undefined {\n    return this.storedContractByName;\n  }\n\n  /**\n   * Identifies whether the `ExecutableDeployItem` is of the original type `StoredVersionedContractByName`\n   * @returns `true` is the `ExecutableDeployItem` conforms to `StoredVersionedContractByName`, and `false` otherwise.\n   */\n  public isStoredVersionContractByName(): boolean {\n    return !!this.storedVersionedContractByName;\n  }\n\n  /**\n   * Casts the `ExecutableDeployItem` to `StoredVersionedContractByName` if possible\n   * @returns `StoredVersionedContractByName` representation of `ExecutableDeployItem`, or `undefined` if the `ExecutableDeployItem` cannot be cast\n   */\n  public asStoredVersionContractByName():\n    | StoredVersionedContractByName\n    | undefined {\n    return this.storedVersionedContractByName;\n  }\n\n  /**\n   * Identifies whether the `ExecutableDeployItem` is of the original type `StoredVersionedContractByHash`\n   * @returns `true` is the `ExecutableDeployItem` conforms to `StoredVersionedContractByHash`, and `false` otherwise.\n   */\n  public isStoredVersionContractByHash(): boolean {\n    return !!this.storedVersionedContractByHash;\n  }\n\n  /**\n   * Casts the `ExecutableDeployItem` to `StoredVersionedContractByHash` if possible\n   * @returns `StoredVersionedContractByHash` representation of `ExecutableDeployItem`, or `undefined` if the `ExecutableDeployItem` cannot be cast\n   */\n  public asStoredVersionContractByHash():\n    | StoredVersionedContractByHash\n    | undefined {\n    return this.storedVersionedContractByHash;\n  }\n\n  /**\n   * Identifies whether the `ExecutableDeployItem` is of the original type `Transfer`\n   * @returns `true` is the `ExecutableDeployItem` conforms to `Transfer`, and `false` otherwise.\n   */\n  public isTransfer() {\n    return !!this.transfer;\n  }\n\n  /**\n   * Casts the `ExecutableDeployItem` to `Transfer` if possible\n   * @returns `Transfer` representation of `ExecutableDeployItem`, or `undefined` if the `ExecutableDeployItem` cannot be cast\n   */\n  public asTransfer(): Transfer | undefined {\n    return this.transfer;\n  }\n}\n\n/**\n * A deploy containing a smart contract along with the requester's signature(s).\n */\n@jsonObject\nexport class Deploy {\n  /**\n   * The deploy hash\n   */\n  @jsonMember({\n    serializer: byteArrayJsonSerializer,\n    deserializer: byteArrayJsonDeserializer\n  })\n  public hash: Uint8Array;\n\n  /**\n   * The header of the deploy\n   */\n  @jsonMember({ constructor: DeployHeader })\n  public header: DeployHeader;\n\n  /**\n   * The payment logic of the deploy\n   */\n  @jsonMember({\n    constructor: ExecutableDeployItem\n  })\n  public payment: ExecutableDeployItem;\n\n  /**\n   * The session code of the deploy\n   */\n  @jsonMember({\n    constructor: ExecutableDeployItem\n  })\n  public session: ExecutableDeployItem;\n\n  /**\n   * An array of approvals in the form of signatures from an account or multiple accounts\n   */\n  @jsonArrayMember(Approval)\n  public approvals: Approval[];\n\n  /**\n   * Constructs a `Deploy` object\n   * @param hash The DeployHash identifying this Deploy\n   * @param header The deploy header\n   * @param payment An ExecutableDeployItem representing the payment logic\n   * @param session An ExecutableDeployItem representing the session logic\n   * @param approvals An array of signatures and associated accounts who have approved this deploy\n   */\n  constructor(\n    hash: Uint8Array,\n    header: DeployHeader,\n    payment: ExecutableDeployItem,\n    session: ExecutableDeployItem,\n    approvals: Approval[]\n  ) {\n    this.approvals = approvals;\n    this.session = session;\n    this.payment = payment;\n    this.header = header;\n    this.hash = hash;\n  }\n\n  /**\n   * Identifies whether this `Deploy` represents a transfer of CSPR\n   * @returns `true` if the `Deploy` is a `Transfer`, and `false` otherwise\n   */\n  public isTransfer(): boolean {\n    return this.session.isTransfer();\n  }\n\n  /**\n   * Identifies whether this `Deploy` represents a standard payment, like that of gas payment\n   * @returns `true` if the `Deploy` is a standard payment, and `false` otherwise\n   */\n  public isStandardPayment(): boolean {\n    if (this.payment.isModuleBytes()) {\n      return this.payment.asModuleBytes()?.moduleBytes.length === 0;\n    }\n    return false;\n  }\n\n  /**\n   * Can be used to send the `Deploy` to an online Casper node\n   * @param nodeUrl The url of a live Casper node\n   * @returns The deploy hash of the `Deploy`\n   * @remarks Works by instantiating a `CasperClient` with the provided `nodeUrl` and calling [`putDeploy`](./CasperClient.ts#L157) on it\n   */\n  public async send(nodeUrl: string): Promise<string> {\n    const client = new CasperClient(nodeUrl);\n\n    const deployHash = client.putDeploy(this);\n\n    return deployHash;\n  }\n\n  /**\n   * Signs the `Deploy` using the provided `AsymmetricKey`(s)\n   * @param keys An array consisting of one or many `AsymmetricKey`(s)\n   * @returns The original `Deploy` signed by the provided `AsymmetricKey`(s)\n   */\n  public sign(keys: AsymmetricKey[]): Deploy {\n    const signedDeploy = keys.reduce((acc: Deploy, key: AsymmetricKey) => {\n      acc = signDeploy(acc, key);\n      return acc;\n    }, this);\n\n    return signedDeploy;\n  }\n}\n\n/**\n * Serializes a `DeployHeader` into an array of bytes\n * @param deployHeader\n * @returns A serialized representation of the provided `DeployHeader`\n */\nexport const serializeHeader = (deployHeader: DeployHeader): ToBytesResult => {\n  return deployHeader.toBytes();\n};\n\n/**\n * Serializes the body of a deploy into an array of bytes\n * @param payment Payment logic for use in a deployment\n * @param session Session logic of a deploy\n * @returns `Uint8Array` typed byte array, containing the payment and session logic of a deploy\n */\nexport const serializeBody = (\n  payment: ExecutableDeployItem,\n  session: ExecutableDeployItem\n): Uint8Array => {\n  return concat([payment.toBytes().unwrap(), session.toBytes().unwrap()]);\n};\n\n/**\n * Serializes an array of `Approval`s into a `Uint8Array` typed byte array\n * @param approvals An array of `Approval`s to be serialized\n * @returns `Uint8Array` typed byte array that can be deserialized to an array of `Approval`s\n */\nexport const serializeApprovals = (approvals: Approval[]): Uint8Array => {\n  const len = toBytesU32(approvals.length);\n  const bytes = concat(\n    approvals.map(approval => {\n      return concat([\n        Uint8Array.from(Buffer.from(approval.signer, 'hex')),\n        Uint8Array.from(Buffer.from(approval.signature, 'hex'))\n      ]);\n    })\n  );\n  return concat([len, bytes]);\n};\n\n/**\n * enum of supported contract types\n * @enum\n */\nexport enum ContractType {\n  /** A pure WebAssembly representation of a smart contract */\n  WASM = 'WASM',\n  /** A linked contract by hash */\n  Hash = 'Hash',\n  /** A linked contract by name */\n  Name = 'Name'\n}\n\n/** The parameters of a `Deploy` object */\nexport class DeployParams {\n  /**\n   * Container for `Deploy` construction options.\n   * @param accountPublicKey The public key of the deploying account as a `CLPublicKey`\n   * @param chainName Name of the chain, to avoid the `Deploy` from being accidentally or maliciously included in a different chain.\n   * @param gasPrice Conversion rate between the cost of Wasm opcodes and the motes sent by the payment code, where 1 mote = 1 * 10^-9 CSPR\n   * @param ttl Time that the `Deploy` will remain valid for, in milliseconds. The default value is 1800000, which is 30 minutes\n   * @param dependencies Hex-encoded `Deploy` hashes of deploys which must be executed before this one.\n   * @param timestamp  Note that timestamp is UTC, not local.\n   */\n  constructor(\n    public accountPublicKey: CLPublicKey,\n    public chainName: string,\n    public gasPrice: number = 1,\n    public ttl: number = DEFAULT_DEPLOY_TTL,\n    public dependencies: Uint8Array[] = [],\n    public timestamp?: number\n  ) {\n    this.dependencies = dependencies.filter(\n      d =>\n        dependencies.filter(t => encodeBase16(d) === encodeBase16(t)).length < 2\n    );\n  }\n}\n\n/**\n * Builds a `Deploy` object from `DeployParams`, session logic, and payment logic\n * @param deployParam The parameters of the deploy, see [DeployParams](#L1323)\n * @param session The session logic of the deploy\n * @param payment The payment logic of the deploy\n * @returns A new `Deploy` object\n */\nexport function makeDeploy(\n  deployParam: DeployParams,\n  session: ExecutableDeployItem,\n  payment: ExecutableDeployItem\n): Deploy {\n  const serializedBody = serializeBody(payment, session);\n  const bodyHash = byteHash(serializedBody);\n\n  if (!deployParam.timestamp) {\n    deployParam.timestamp = Date.now();\n  }\n\n  const header: DeployHeader = new DeployHeader(\n    deployParam.accountPublicKey,\n    deployParam.timestamp!,\n    deployParam.ttl,\n    deployParam.gasPrice,\n    bodyHash,\n    deployParam.dependencies,\n    deployParam.chainName\n  );\n  const serializedHeader = serializeHeader(header);\n  const deployHash = byteHash(serializedHeader.unwrap());\n  return new Deploy(deployHash, header, payment, session, []);\n}\n\n/**\n * Builds a `Deploy` object from `DeployParams`, session logic, and payment logic. \n * If there is no timestamp in `DeployParams` it fetches it from the TimeService.\n * Recommened to use in browser environment.\n * @param deployParam The parameters of the deploy, see [DeployParams](#L1323)\n * @param session The session logic of the deploy\n * @param payment The payment logic of the deploy\n * @returns A new `Deploy` object\n */\nexport async function makeDeployWithAutoTimestamp(\n  deployParam: DeployParams,\n  session: ExecutableDeployItem,\n  payment: ExecutableDeployItem\n): Promise<Deploy> {\n  if (!deployParam.timestamp && typeof window !== 'undefined') {\n    const timeService = new TimeService(\n      `${location.protocol}//${TIME_API_URL}`\n    );\n    const { unixtime } = await timeService.getTime()\n    deployParam.timestamp = unixtime;\n  }\n\n  return makeDeploy(deployParam, session, payment);\n}\n\n/**\n * Uses the provided key pair to sign the Deploy message\n * @param deploy Either an unsigned `Deploy` object or one with other signatures\n * @param signingKey The keypair used to sign the `Deploy`\n */\nexport const signDeploy = (\n  deploy: Deploy,\n  signingKey: AsymmetricKey\n): Deploy => {\n  const approval = new Approval();\n  const signature = signingKey.sign(deploy.hash);\n  approval.signer = signingKey.accountHex();\n  switch (signingKey.signatureAlgorithm) {\n    case SignatureAlgorithm.Ed25519:\n      approval.signature = Keys.Ed25519.accountHex(signature);\n      break;\n    case SignatureAlgorithm.Secp256K1:\n      approval.signature = Keys.Secp256K1.accountHex(signature);\n      break;\n  }\n  deploy.approvals.push(approval);\n\n  return deploy;\n};\n\n/**\n * Sets the algorithm of the already generated signature\n *\n * @param deploy A `Deploy` to be signed with `sig`\n * @param sig the Ed25519 or Secp256K1 signature\n * @param publicKey the public key used to generate the signature\n */\nexport const setSignature = (\n  deploy: Deploy,\n  sig: Uint8Array,\n  publicKey: CLPublicKey\n): Deploy => {\n  const approval = new Approval();\n  approval.signer = publicKey.toHex();\n  // TBD: Make sure it is proper\n  if (publicKey.isEd25519()) {\n    approval.signature = Keys.Ed25519.accountHex(sig);\n  }\n  if (publicKey.isSecp256K1()) {\n    approval.signature = Keys.Secp256K1.accountHex(sig);\n  }\n  deploy.approvals.push(approval);\n  return deploy;\n};\n\n/**\n * Creates an instance of standard payment logic\n *\n * @param paymentAmount The amount of motes to be used to pay for gas\n * @returns A standard payment, as an `ExecutableDeployItem` to be attached to a `Deploy`\n */\nexport const standardPayment = (paymentAmount: BigNumberish) => {\n  const paymentArgs = RuntimeArgs.fromMap({\n    amount: CLValueBuilder.u512(paymentAmount.toString())\n  });\n\n  return ExecutableDeployItem.newModuleBytes(Uint8Array.from([]), paymentArgs);\n};\n\n/**\n * Convert the deploy object to a JSON representation\n *\n * @param deploy The `Deploy` object to convert to JSON\n * @returns A JSON version of the `Deploy`, which can be converted back later\n */\nexport const deployToJson = (deploy: Deploy) => {\n  const serializer = new TypedJSON(Deploy);\n  return {\n    deploy: serializer.toPlainJson(deploy)\n  };\n};\n\n/**\n * Convert a JSON representation of a deploy to a `Deploy` object\n *\n * @param json A JSON representation of a `Deploy`\n * @returns A `Result` that collapses to a `Deploy` or an error string\n */\nexport const deployFromJson = (json: any): Result<Deploy, Error> => {\n  if (json.deploy === undefined) {\n    return new Err(new Error(\"The Deploy JSON doesn't have 'deploy' field.\"));\n  }\n  let deploy = null;\n  try {\n    const serializer = new TypedJSON(Deploy);\n    deploy = serializer.parse(json.deploy);\n  } catch (serializationError) {\n    return new Err(serializationError);\n  }\n\n  if (deploy === undefined || deploy === null) {\n    return Err(new Error(\"The JSON can't be parsed as a Deploy.\"));\n  }\n\n  const valid = validateDeploy(deploy);\n  if (valid.err) {\n    return new Err(new Error(valid.val));\n  }\n\n  return new Ok(deploy);\n};\n\n/**\n * Adds a runtime argument to a `Deploy` object\n * @param deploy The `Deploy` object for which to add the runtime argument\n * @param name The name of the runtime argument\n * @param value The value of the runtime argument\n * @returns The original `Deploy` with the additional runtime argument\n * @remarks Will fail if the `Deploy` has already been signed\n */\nexport const addArgToDeploy = (\n  deploy: Deploy,\n  name: string,\n  value: CLValue\n): Deploy => {\n  if (deploy.approvals.length !== 0) {\n    throw Error('Can not add argument to already signed deploy.');\n  }\n\n  const deployParams = new DeployUtil.DeployParams(\n    deploy.header.account,\n    deploy.header.chainName,\n    deploy.header.gasPrice,\n    deploy.header.ttl,\n    deploy.header.dependencies,\n    deploy.header.timestamp\n  );\n\n  const session = deploy.session;\n  session.setArg(name, value);\n\n  return makeDeploy(deployParams, session, deploy.payment);\n};\n\n/**\n * Gets the byte-size of a deploy\n * @param deploy The `Deploy` for which to calculate the size\n * @returns The size of the `Deploy` in its serialized representation\n */\nexport const deploySizeInBytes = (deploy: Deploy): number => {\n  const hashSize = deploy.hash.length;\n  const bodySize = serializeBody(deploy.payment, deploy.session).length;\n  const headerSize = serializeHeader(deploy.header).unwrap().length;\n  const approvalsSize = deploy.approvals\n    .map(approval => {\n      return (approval.signature.length + approval.signer.length) / 2;\n    })\n    .reduce((a, b) => a + b, 0);\n\n  return hashSize + headerSize + bodySize + approvalsSize;\n};\n\n/**\n * Validate a `Deploy` by calculating and comparing its stored blake2b hash\n * @param deploy A `Deploy` to be validated\n * @returns A `Result` that collapses to a `Deploy` or an error string\n */\nexport const validateDeploy = (deploy: Deploy): Result<Deploy, string> => {\n  if (!(deploy instanceof Deploy)) {\n    return new Err(\"'deploy' is not an instance of Deploy class.\");\n  }\n\n  const serializedBody = serializeBody(deploy.payment, deploy.session);\n  const bodyHash = byteHash(serializedBody);\n\n  if (!arrayEquals(deploy.header.bodyHash, bodyHash)) {\n    return Err(`Invalid deploy: bodyHash mismatch. Expected: ${bodyHash},\n                  got: ${deploy.header.bodyHash}.`);\n  }\n\n  const serializedHeader = serializeHeader(deploy.header).unwrap();\n  const deployHash = byteHash(serializedHeader);\n\n  if (!arrayEquals(deploy.hash, deployHash)) {\n    return Err(`Invalid deploy: hash mismatch. Expected: ${deployHash},\n                  got: ${deploy.hash}.`);\n  }\n\n  const isProperlySigned = deploy.approvals.every(({ signer, signature }) => {\n    const pk = CLPublicKey.fromHex(signer, false);\n    const signatureRaw = decodeBase16(signature.slice(2));\n    return validateSignature(deploy.hash, signatureRaw, pk);\n  });\n\n  if (!isProperlySigned) {\n    return Err('Invalid signature.');\n  } else {\n    return Ok(deploy);\n  }\n};\n\n/**\n * Compares two `Uint8Array`s\n * @param a The first `Uint8Array`\n * @param b The second `Uint8Array`\n * @returns `true` if the two `Uint8Array`s match, and `false` otherwise\n */\nexport const arrayEquals = (a: Uint8Array, b: Uint8Array): boolean => {\n  return a.length === b.length && a.every((val, index) => val === b[index]);\n};\n\n/**\n * Serializes a `Deploy` to a `Uint8Array`\n * @param deploy The `Deploy` to be serialized\n * @returns A `Uint8Array` serialization of the provided `Deploy`\n */\nexport const deployToBytes = (deploy: Deploy): Uint8Array => {\n  return concat([\n    serializeHeader(deploy.header).unwrap(),\n    deploy.hash,\n    serializeBody(deploy.payment, deploy.session),\n    serializeApprovals(deploy.approvals)\n  ]);\n};\n","/**\n * Used to represent account keypairs\n * @packageDocumentation\n */\n\nimport * as fs from 'fs';\n\nimport * as ed25519 from '@noble/ed25519';\nimport * as secp256k1 from '@noble/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { hmac } from '@noble/hashes/hmac';\nimport KeyEncoder from 'key-encoder';\n\nimport { decodeBase64, encodeBase16, encodeBase64 } from '../index';\nimport { CLPublicKey } from './CLValue';\nimport { byteHash } from './ByteConverters';\nimport { SignatureAlgorithm } from './types';\n\nexport { SignatureAlgorithm } from './types';\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\nsecp256k1.utils.hmacSha256Sync = (k, ...m) =>\n  hmac(sha256, k, secp256k1.utils.concatBytes(...m));\n\nconst keyEncoder = new KeyEncoder('secp256k1');\n\nconst ED25519_PEM_SECRET_KEY_TAG = 'PRIVATE KEY';\nconst ED25519_PEM_PUBLIC_KEY_TAG = 'PUBLIC KEY';\n\nexport interface SignKeyPair {\n  publicKey: Uint8Array; // Array with 32-byte public key\n  secretKey: Uint8Array; // Array with 32-byte secret key\n}\n\nexport const getKeysFromHexPrivKey = (\n  key: string,\n  variant: SignatureAlgorithm\n): AsymmetricKey => {\n  const rawPrivKeyBytes = decodeBase64(key);\n  let keyPair: AsymmetricKey;\n\n  if (variant === SignatureAlgorithm.Secp256K1) {\n    const privKey = Secp256K1.parsePrivateKey(rawPrivKeyBytes);\n    const pubKey = Secp256K1.privateToPublicKey(privKey);\n    keyPair = new Secp256K1(pubKey, privKey);\n    return keyPair;\n  }\n\n  if (variant === SignatureAlgorithm.Ed25519) {\n    const privKey = Ed25519.parsePrivateKey(rawPrivKeyBytes);\n    const pubKey = Ed25519.privateToPublicKey(privKey);\n    keyPair = Ed25519.parseKeyPair(pubKey, privKey);\n    return keyPair;\n  }\n\n  throw Error('Unsupported key type');\n};\n\n/**\n * Gets the blake2b hash of the provided public key\n * @param signatureAlgorithm The signature algorithm of the key. Currently supported are Ed25519 and Secp256k1\n * @param publicKey The public key as a byte array\n * @returns A blake2b hash of the public key\n */\nfunction accountHashHelper(\n  signatureAlgorithm: SignatureAlgorithm,\n  publicKey: Uint8Array\n) {\n  const separator = Buffer.from([0]);\n  const prefix = Buffer.concat([Buffer.from(signatureAlgorithm), separator]);\n\n  if (publicKey.length === 0) {\n    return Buffer.from([]);\n  } else {\n    return byteHash(Buffer.concat([prefix, Buffer.from(publicKey)]));\n  }\n}\n\n/**\n * Reads in a base64 private key, ignoring the header: `-----BEGIN PUBLIC KEY-----`\n * and footer: `-----END PUBLIC KEY-----`\n * @param {string} content A .pem private key string with a header and footer\n * @returns A base64 private key as a `Uint8Array`\n * @remarks\n * If the provided base64 `content` string does not include a header/footer,\n * it will pass through this function unaffected\n * @example\n * Example PEM:\n *\n * ```\n * -----BEGIN PUBLIC KEY-----\\r\\n\n * MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEj1fgdbpNbt06EY/8C+wbBXq6VvG+vCVD\\r\\n\n * Nl74LvVAmXfpdzCWFKbdrnIlX3EFDxkd9qpk35F/kLcqV3rDn/u3dg==\\r\\n\n * -----END PUBLIC KEY-----\\r\\n\n * ```\n */\nexport function readBase64WithPEM(content: string): Uint8Array {\n  const base64 = content\n    // there are two kinks of line-endings, CRLF(\\r\\n) and LF(\\n)\n    // we need handle both\n    .split(/\\r?\\n/)\n    .filter(x => !x.startsWith('---'))\n    .join('')\n    // remove the line-endings in the end of content\n    .trim();\n  return decodeBase64(base64);\n}\n\nexport const validateSignature = (\n  msg: Uint8Array,\n  signature: Uint8Array,\n  pk: CLPublicKey\n): boolean => {\n  if (pk.isEd25519()) {\n    return ed25519.sync.verify(signature, msg, pk.value());\n  }\n  if (pk.isSecp256K1()) {\n    return secp256k1.verify(signature, sha256(Buffer.from(msg)), pk.value());\n  }\n  throw Error('Unsupported PublicKey type');\n};\n\n/** Public/private keypair object for representing an account */\nexport abstract class AsymmetricKey {\n  public readonly publicKey: CLPublicKey;\n  public readonly privateKey: Uint8Array;\n  public readonly signatureAlgorithm: SignatureAlgorithm;\n\n  /**\n   * Constructs an `AsymmetricKey` inherited object\n   * @param {Uint8Array} publicKey An account's public key as a byte array\n   * @param {Uint8Array} privateKey An account's private key as a byte array\n   * @param {SignatureAlgorithm} signatureAlgorithm The signature algorithm of the key. Currently supported are Ed25519 and Secp256k1\n   */\n  constructor(\n    publicKey: Uint8Array,\n    privateKey: Uint8Array,\n    signatureAlgorithm: SignatureAlgorithm\n  ) {\n    this.publicKey = new CLPublicKey(publicKey, signatureAlgorithm);\n    this.privateKey = privateKey;\n    this.signatureAlgorithm = signatureAlgorithm;\n  }\n\n  /**\n   * Computes the blake2b account hash of the public key\n   * @returns The account hash as a byte array\n   */\n  public accountHash(): Uint8Array {\n    return this.publicKey.toAccountHash();\n  }\n\n  /**\n   * Gets the hexadecimal public key of the account\n   * @returns The public key of the `AsymmetricKey` as a hexadecimal string\n   */\n  public accountHex(): string {\n    return this.publicKey.toHex();\n  }\n\n  /**\n   * Inserts the provided `content` and `tag` into a .pem compliant string\n   * @param tag The tag inserted on the END line\n   * @param content The base-64 PEM compliant private key\n   */\n  protected toPem(tag: string, content: string) {\n    // prettier-ignore\n    return `-----BEGIN ${tag}-----\\n` +\n      `${content}\\n` +\n      `-----END ${tag}-----\\n`;\n  }\n\n  /**\n   * Export the public key encoded as a .pem\n   */\n  public abstract exportPublicKeyInPem(): string;\n\n  /**\n   * Export the private key encoded as a .pem\n   */\n  public abstract exportPrivateKeyInPem(): string;\n\n  /**\n   * Sign a message using this `AsymmetricKey`'s private key\n   * @param {Uint8Array} msg The message to be signed, as a byte array\n   * @returns A byte array containing the signed message\n   */\n  public abstract sign(msg: Uint8Array): Uint8Array;\n\n  /**\n   * Validate the signature by comparing it to the provided message\n   * @param {Uint8Array} signature The signature as a byte array\n   * @param {Uint8Array} msg The original message to be validated\n   * @returns `true` if the signature is valid, `false` otherwise\n   */\n  public abstract verify(signature: Uint8Array, msg: Uint8Array): boolean;\n}\n\n/**\n * Ed25519 variant of `AsymmetricKey`\n * @remarks\n * Based on SignatureAlgorithm.scala\n * @see [Documentation](https://docs.casper.network/concepts/accounts-and-keys/#eddsa-keys)\n */\nexport class Ed25519 extends AsymmetricKey {\n  /**\n   * Constructs a new Ed25519 object from a `SignKeyPair`\n   * @param {SignKeyPair} keyPair An object containing the keys \"publicKey\" and \"secretKey\" with corresponding `ByteArray` values\n   */\n  constructor(keyPair: SignKeyPair) {\n    if (keyPair.secretKey.length != 32) {\n      console.warn(\n        `You're using private key from old version, please use newly formatted key with 32 bytes length.`\n      );\n    }\n\n    super(\n      keyPair.publicKey,\n      Ed25519.parsePrivateKey(keyPair.secretKey),\n      SignatureAlgorithm.Ed25519\n    );\n  }\n\n  /**\n   * Generates a new Ed25519 key pair\n   * @returns A new `Ed25519` object\n   */\n  public static new() {\n    const privateKey = ed25519.utils.randomPrivateKey();\n    const publicKey = ed25519.sync.getPublicKey(privateKey);\n    return new Ed25519({\n      secretKey: privateKey,\n      publicKey\n    });\n  }\n\n  /**\n   * Generate the accountHex for the Ed25519 public key\n   * @param publicKey\n   */\n  public static accountHex(publicKey: Uint8Array): string {\n    return '01' + encodeBase16(publicKey);\n  }\n\n  /**\n   * Parse the key pair from a public key file and the corresponding private key file\n   * @param {string} publicKeyPath Path of public key file\n   * @param {string} privateKeyPath Path of private key file\n   * @returns A new `AsymmetricKey`\n   */\n  public static parseKeyFiles(\n    publicKeyPath: string,\n    privateKeyPath: string\n  ): AsymmetricKey {\n    const publicKey = Ed25519.parsePublicKeyFile(publicKeyPath);\n    const privateKey = Ed25519.parsePrivateKeyFile(privateKeyPath);\n    return new Ed25519({\n      publicKey,\n      secretKey: privateKey\n    });\n  }\n\n  /**\n   * Generates the account hash of a Ed25519 public key\n   * @param {Uint8Array} publicKey An Ed25519 public key\n   * @returns The blake2b account hash of the public key\n   */\n  public static accountHash(publicKey: Uint8Array): Uint8Array {\n    return accountHashHelper(SignatureAlgorithm.Ed25519, publicKey);\n  }\n\n  /**\n   * Construct a keypair from a public key and corresponding private key\n   * @param {Uint8Array} publicKey The public key of an Ed25519 account\n   * @param {Uint8Array} privateKey The private key of the same Ed25519 account\n   * @returns A new `Ed25519` keypair\n   */\n  public static parseKeyPair(\n    publicKey: Uint8Array,\n    privateKey: Uint8Array\n  ): Ed25519 {\n    const keyPair = new Ed25519({\n      publicKey: Ed25519.parsePublicKey(publicKey),\n      secretKey: Ed25519.parsePrivateKey(privateKey)\n    });\n\n    if (\n      encodeBase64(Ed25519.privateToPublicKey(keyPair.privateKey)) !==\n      encodeBase64(keyPair.publicKey.value())\n    ) {\n      throw Error('Invalid key pairs');\n    }\n\n    return keyPair;\n  }\n\n  public static parsePrivateKeyFile(path: string): Uint8Array {\n    return Ed25519.parsePrivateKey(Ed25519.readBase64File(path));\n  }\n\n  /**\n   * Parses a file containing an Ed25519 public key\n   * @param {string} path The path to the public key file\n   * @returns A `Uint8Array` typed representation of the public key\n   * @see {@link Ed25519.parsePublicKey}\n   */\n  public static parsePublicKeyFile(path: string): Uint8Array {\n    return Ed25519.parsePublicKey(Ed25519.readBase64File(path));\n  }\n\n  /**\n   * Parses a byte array containing an Ed25519 private key\n   * @param {Uint8Array} bytes A private key as a byte array\n   * @returns A validated byte array containing the provided Ed25519 private key\n   * @see {@link Ed25519.parseKey}\n   */\n  public static parsePrivateKey(bytes: Uint8Array) {\n    return Ed25519.parseKey(bytes, 0, 32);\n  }\n\n  /**\n   * Parses a byte array containing an Ed25519 public key\n   * @param {Uint8Array} bytes A public key in bytes\n   * @returns A validated byte array containing the provided Ed25519 public key\n   * @see {@link Ed25519.parseKey}\n   */\n  public static parsePublicKey(bytes: Uint8Array) {\n    return Ed25519.parseKey(bytes, 32, 64);\n  }\n\n  /**\n   * Calls global {@link readBase64WithPEM} and returns the result\n   * @param {string} content A .pem private key string with a header and footer\n   * @returns The result of global `readBase64WithPEM`\n   * @see {@link readBase64WithPEM}\n   */\n  public static readBase64WithPEM(content: string) {\n    return readBase64WithPEM(content);\n  }\n\n  /**\n   * Read the Base64 content of a file, ignoring PEM frames\n   * @param {string} path The path to the PEM file\n   * @returns The result of {@link Ed25519.readBase64WithPEM} after reading in the content as a `string` with `fs`\n   */\n  private static readBase64File(path: string): Uint8Array {\n    const content = fs.readFileSync(path).toString();\n    return Ed25519.readBase64WithPEM(content);\n  }\n\n  /**\n   * Parses and validates a key in a certain range \"from\" to \"to\"\n   * @param {Uint8Array} bytes The key to be parsed and validated\n   * @param {number} from The starting index from which to parse the key\n   * @param {number} to The ending index from which to parse the key\n   * @returns The parsed key\n   * @throws `Error` if the key is of an unexpected length\n   */\n  private static parseKey(bytes: Uint8Array, from: number, to: number) {\n    const len = bytes.length;\n    // prettier-ignore\n    const key =\n        (len === 32) ? bytes :\n          (len === 64) ? Buffer.from(bytes).slice(from, to) :\n            (len > 32 && len < 64) ? Buffer.from(bytes).slice(len % 32) :\n              null;\n    if (key == null || key.length !== 32) {\n      throw Error(`Unexpected key length: ${len}`);\n    }\n    return key;\n  }\n\n  /**\n   * Convert this instance's private key to PEM format\n   * @returns A PEM compliant string containing this instance's private key\n   * @see {@link AsymmetricKey.toPem}\n   */\n  public exportPrivateKeyInPem() {\n    // prettier-ignore\n    const derPrefix = Buffer.from([48, 46, 2, 1, 0, 48, 5, 6, 3, 43, 101, 112, 4, 34, 4, 32]);\n    const encoded = encodeBase64(\n      Buffer.concat([derPrefix, Buffer.from(this.privateKey)])\n    );\n\n    return this.toPem(ED25519_PEM_SECRET_KEY_TAG, encoded);\n  }\n\n  /**\n   * Convert this instance's public key to PEM format\n   * @returns A PEM compliant string containing this instance's public key\n   * @see {@link AsymmetricKey.toPem}\n   */\n  public exportPublicKeyInPem() {\n    // prettier-ignore\n    const derPrefix = Buffer.from([48, 42, 48, 5, 6, 3, 43, 101, 112, 3, 33, 0]);\n    const encoded = encodeBase64(\n      Buffer.concat([derPrefix, Buffer.from(this.publicKey.value())])\n    );\n    return this.toPem(ED25519_PEM_PUBLIC_KEY_TAG, encoded);\n  }\n\n  /**\n   * Sign a message by using this instance's keypair\n   * @param {Uint8Array} msg The message to be signed, as a byte array\n   * @returns `Uint8Array` typed signature of the provided `msg`\n   */\n  public sign(msg: Uint8Array): Uint8Array {\n    return ed25519.sync.sign(msg, this.privateKey);\n  }\n\n  /**\n   * Verifies a signature given the signature and the original message\n   * @param {Uint8Array} signature The signed message as a byte array\n   * @param {Uint8Array} msg The original message as a byte array\n   * @returns 'true' if the message if valid, `false` otherwise\n   */\n  public verify(signature: Uint8Array, msg: Uint8Array) {\n    return ed25519.sync.verify(signature, msg, this.publicKey.value());\n  }\n\n  /**\n   * Derive a public key from private key or seed phrase\n   * @param {Uint8Array} privateKey The private key or seed phrase from which to derive the public key\n   * @returns A `Uint8Array` public key generated deterministically from the provided private key or seed phrase\n   * @remarks Both secret keys and seed phrases may be used to derive the public key\n   */\n  public static privateToPublicKey(privateKey: Uint8Array): Uint8Array {\n    return ed25519.sync.getPublicKey(privateKey);\n  }\n\n  /**\n   * Restore Ed25519 keyPair from private key file\n   * @param {string} privateKeyPath The path to the private key file\n   * @returns An Ed25519 `AsymmetricKey`\n   * @see {@link Ed25519.parsePrivateKeyFile}\n   * @see {@link Ed25519.privateToPublicKey}\n   * @see {@link Ed25519.parseKeyPair}\n   */\n  public static loadKeyPairFromPrivateFile(privateKeyPath: string) {\n    const privateKey = Ed25519.parsePrivateKeyFile(privateKeyPath);\n    const publicKey = Ed25519.privateToPublicKey(privateKey);\n    return Ed25519.parseKeyPair(publicKey, privateKey);\n  }\n}\n\n/**\n * Secp256k1 variant of `AsymmetricKey`\n * @privateRemarks\n * Orignated from [Secp256k1](https://en.bitcoin.it/wiki/Secp256k1) to support Ethereum keys on the Casper.\n * @see [Documentation](https://docs.casper.network/concepts/accounts-and-keys/#ethereum-keys)\n */\nexport class Secp256K1 extends AsymmetricKey {\n  /**\n   * Constructs a new Secp256K1 object from a public key and a private key\n   * @param {Uint8Array} publicKey A secp256k1 public key\n   * @param {Uint8Array} privateKey A secp256k1 private key\n   */\n  constructor(publicKey: Uint8Array, privateKey: Uint8Array) {\n    super(publicKey, privateKey, SignatureAlgorithm.Secp256K1);\n  }\n\n  /**\n   * Generate a new pseudorandom Secp256k1 key pair\n   * @returns A new `Secp256K1` object\n   */\n  public static new() {\n    const privateKey = secp256k1.utils.randomPrivateKey();\n    const publicKey = secp256k1.getPublicKey(privateKey, true);\n    return new Secp256K1(publicKey, privateKey);\n  }\n\n  /**\n   * Parse the key pair from a public key file and the corresponding private key file\n   * @param {string} publicKeyPath Path of public key file\n   * @param {string} privateKeyPath Path of private key file\n   * @returns A new `Secp256K1` object\n   */\n  public static parseKeyFiles(\n    publicKeyPath: string,\n    privateKeyPath: string\n  ): AsymmetricKey {\n    const publicKey = Secp256K1.parsePublicKeyFile(publicKeyPath);\n    const privateKey = Secp256K1.parsePrivateKeyFile(privateKeyPath);\n    return new Secp256K1(publicKey, privateKey);\n  }\n\n  /**\n   * Generates the account hash of a secp256k1 public key\n   * @param {Uint8Array} publicKey A secp256k1 public key\n   * @returns The blake2b account hash of the public key\n   */\n  public static accountHash(publicKey: Uint8Array): Uint8Array {\n    return accountHashHelper(SignatureAlgorithm.Secp256K1, publicKey);\n  }\n\n  /**\n   * Converts a `Uint8Array` public key to hexadecimal format\n   * @param publicKey\n   * @remarks\n   * The returned public key hex will be prefixed with a \"02\" to indicate that it is of the secp256k1 variety\n   */\n  public static accountHex(publicKey: Uint8Array): string {\n    return '02' + encodeBase16(publicKey);\n  }\n\n  /**\n   * Construct a keypair from a public key and corresponding private key\n   * @param {Uint8Array} publicKey The public key of a secp256k1 account\n   * @param {Uint8Array} privateKey The private key of the same secp256k1 account\n   * @returns A new `AsymmetricKey` keypair\n   */\n  public static parseKeyPair(\n    publicKey: Uint8Array,\n    privateKey: Uint8Array,\n    originalFormat: 'raw' | 'der'\n  ): AsymmetricKey {\n    const publ = Secp256K1.parsePublicKey(publicKey, originalFormat);\n    const priv = Secp256K1.parsePrivateKey(privateKey, originalFormat);\n    // nacl expects that the private key will contain both.\n    return new Secp256K1(publ, priv);\n  }\n\n  /**\n   * Parses a file containing a secp256k1 private key\n   * @param {string} path The path to the private key file\n   * @returns A `Uint8Array` typed representation of the private key\n   * @see {@link Secp256K1.parsePrivateKey}\n   */\n  public static parsePrivateKeyFile(path: string): Uint8Array {\n    return Secp256K1.parsePrivateKey(Secp256K1.readBase64File(path));\n  }\n\n  /**\n   * Parses a file containing a secp256k1 public key\n   * @param {string} path The path to the public key file\n   * @returns A `Uint8Array` typed representation of the private key\n   * @see {@link Secp256K1.parsePublicKey}\n   */\n  public static parsePublicKeyFile(path: string): Uint8Array {\n    return Secp256K1.parsePublicKey(Secp256K1.readBase64File(path));\n  }\n\n  /**\n   * Parses a byte array containing a secp256k1 private key\n   * @param {Uint8Array} bytes A private key as a byte array\n   * @param {string} [originalFormat=der] The original format of the private key.\n   * Options are \"der\" or \"raw\", meaning \"derived\" or \"raw\", indicating a seed phrase and\n   * a raw private key respectively.\n   * @returns A validated byte array containing the provided secp256k1 private key\n   * @privateRemarks Validate that \"der\" means derived and \"raw\" means a raw private key\n   */\n  public static parsePrivateKey(\n    bytes: Uint8Array,\n    originalFormat: 'der' | 'raw' = 'der'\n  ) {\n    let rawKeyHex: string;\n    if (originalFormat === 'der') {\n      rawKeyHex = keyEncoder.encodePrivate(Buffer.from(bytes), 'der', 'raw');\n    } else {\n      rawKeyHex = encodeBase16(bytes);\n    }\n\n    const privateKey = Buffer.from(rawKeyHex, 'hex');\n    return privateKey;\n  }\n\n  /**\n   * Parses a byte array containing an Ed25519 public key\n   * @param {Uint8Array} bytes A public key in bytes\n   * @param {string} [originalFormat=der] The original format of the private key.\n   * Options are \"der\" or \"raw\", meaning \"derived\" or \"raw\", indicating a seed phrase and\n   * a raw private key respectively.\n   * @returns A validated byte array containing the provided Ed25519 public key\n   * @privateRemarks Validate that \"der\" means derived and \"raw\" means a raw public key\n   */\n  public static parsePublicKey(\n    bytes: Uint8Array,\n    originalFormat: 'der' | 'raw' = 'der'\n  ) {\n    let rawKeyHex: string;\n    if (originalFormat === 'der') {\n      rawKeyHex = keyEncoder.encodePublic(Buffer.from(bytes), 'der', 'raw');\n    } else {\n      rawKeyHex = encodeBase16(bytes);\n    }\n\n    const publicKey = Uint8Array.from(Buffer.from(rawKeyHex, 'hex'));\n    return publicKey;\n  }\n\n  /**\n   * Calls global {@link readBase64WithPEM} and returns the result\n   * @param {string} content A .pem private key string with a header and footer\n   * @returns The result of global `readBase64WithPEM`\n   * @see {@link readBase64WithPEM}\n   */\n  public static readBase64WithPEM(content: string) {\n    return readBase64WithPEM(content);\n  }\n\n  /**\n   * Read the Base64 content of a file, ignoring PEM frames\n   * @param {string} path The path to the PEM file\n   * @returns The result of {@link Secp256K1.readBase64WithPEM} after reading in the content as a `string` with `fs`\n   */\n  private static readBase64File(path: string): Uint8Array {\n    const content = fs.readFileSync(path).toString();\n    return Secp256K1.readBase64WithPEM(content);\n  }\n\n  /**\n   * Convert this instance's private key to PEM format\n   * @returns A PEM compliant string containing this instance's private key\n   */\n  public exportPrivateKeyInPem(): string {\n    return keyEncoder.encodePrivate(\n      encodeBase16(this.privateKey),\n      'raw',\n      'pem'\n    );\n  }\n\n  /**\n   * Convert this instance's public key to PEM format\n   * @returns A PEM compliant string containing this instance's public key\n   */\n  public exportPublicKeyInPem(): string {\n    return keyEncoder.encodePublic(\n      encodeBase16(this.publicKey.value()),\n      'raw',\n      'pem'\n    );\n  }\n\n  /**\n   * Sign a message by using this instance's keypair\n   * @param {Uint8Array} msg The message to be signed, as a byte array\n   * @returns `Uint8Array` typed signature of the provided `msg`\n   * @see [secp256k1.ecdsaSign](https://github.com/cryptocoinjs/secp256k1-node/blob/HEAD/API.md#ecdsasignmessage-uint8array-privatekey-uint8array--data-noncefn---data-uint8array-noncefn-message-uint8array-privatekey-uint8array-algo-null-data-uint8array-counter-number--uint8array----output-uint8array--len-number--uint8array--signature-uint8array-recid-number-)\n   */\n  public sign(msg: Uint8Array): Uint8Array {\n    const signature = secp256k1.signSync(\n      sha256(Buffer.from(msg)),\n      this.privateKey,\n      {\n        der: false\n      }\n    );\n    return signature;\n  }\n\n  /**\n   * Verifies a signature given the signature and the original message\n   * @param {Uint8Array} signature The signed message as a byte array\n   * @param {Uint8Array} msg The original message as a byte array\n   * @see [secp256k1.ecdsaVerify](https://github.com/cryptocoinjs/secp256k1-node/blob/HEAD/API.md#ecdsaverifysignature-uint8array-message-uint8array-publickey-uint8array-boolean)\n   * @returns 'true' if the message if valid, `false` otherwise\n   * @privateRemarks Need to document return and return type\n   */\n  public verify(signature: Uint8Array, msg: Uint8Array) {\n    return secp256k1.verify(\n      signature,\n      sha256(Buffer.from(msg)),\n      this.publicKey.value()\n    );\n  }\n\n  /**\n   * Derive a public key from private key\n   * @param {Uint8Array} privateKey The private key from which to derive the public key\n   * @returns A `Uint8Array` public key generated deterministically from the provided private key\n   * @see [secp256k1.publicKeyCreate](https://github.com/cryptocoinjs/secp256k1-node/blob/HEAD/API.md#publickeycreateprivatekey-uint8array-compressed-boolean--true-output-uint8array--len-number--uint8array--len--new-uint8arraylen-uint8array)\n   */\n  public static privateToPublicKey(privateKey: Uint8Array): Uint8Array {\n    return secp256k1.getPublicKey(privateKey, true);\n  }\n\n  /**\n   * Restore secp256k1 keyPair from private key file\n   * @param {string} privateKeyPath The path to the private key file\n   * @returns A secp256k1 `AsymmetricKey`\n   * @see {@link Secp256K1.parsePrivateKeyFile}\n   * @see {@link Secp256K1.privateToPublicKey}\n   * @see {@link Secp256K1.parseKeyPair}\n   */\n  public static loadKeyPairFromPrivateFile(privateKeyPath: string) {\n    const privateKey = Secp256K1.parsePrivateKeyFile(privateKeyPath);\n    const publicKey = Secp256K1.privateToPublicKey(privateKey);\n    return Secp256K1.parseKeyPair(publicKey, privateKey, 'raw');\n  }\n}\n","/**\n * Implements a collection of runtime arguments.\n */\nimport { Ok, Err } from 'ts-results';\nimport { toBytesString, toBytesVector } from './ByteConverters';\nimport {\n  CLValue,\n  CLValueParsers,\n  CLStringBytesParser,\n  CLU32BytesParser,\n  ToBytes,\n  ToBytesResult,\n  ResultAndRemainder,\n  resultHelper\n} from './CLValue';\nimport { concat } from '@ethersproject/bytes';\nimport { jsonMapMember, jsonObject } from 'typedjson';\n\nexport class NamedArg implements ToBytes {\n  constructor(public name: string, public value: CLValue) {}\n\n  public toBytes(): ToBytesResult {\n    const name = toBytesString(this.name);\n    const value = CLValueParsers.toBytesWithType(this.value);\n    return Ok(concat([name, value.unwrap()]));\n  }\n\n  public static fromBytes(\n    bytes: Uint8Array\n  ): ResultAndRemainder<NamedArg, string> {\n    const {\n      result: nameRes,\n      remainder: nameRem\n    } = new CLStringBytesParser().fromBytesWithRemainder(bytes);\n    const name = nameRes.unwrap();\n    if (!nameRem) {\n      return resultHelper<NamedArg, string>(\n        Err('Missing data for value of named arg')\n      );\n    }\n    const value = CLValueParsers.fromBytesWithType(nameRem).unwrap();\n    return resultHelper(Ok(new NamedArg(name.value(), value)));\n  }\n}\n\nconst desRA = (_arr: any) => {\n  const parsed = new Map(\n    Array.from(_arr, ([key, value]) => {\n      const val = CLValueParsers.fromJSON(value);\n      return [key, val.unwrap()];\n    })\n  );\n\n  if (parsed.size !== Array.from(_arr).length)\n    throw Error(`Duplicate key exists.`);\n\n  return parsed;\n};\n\nconst serRA = (map: Map<string, CLValue>) => {\n  return Array.from(map, ([key, value]) => {\n    return [key, CLValueParsers.toJSON(value).unwrap()];\n  });\n};\n\n@jsonObject()\nexport class RuntimeArgs implements ToBytes {\n  @jsonMapMember(String, CLValue, {\n    serializer: serRA,\n    deserializer: desRA\n  })\n  public args: Map<string, CLValue>;\n\n  constructor(args: Map<string, CLValue>) {\n    this.args = args;\n  }\n\n  public static fromMap(args: Record<string, CLValue>) {\n    const map: Map<string, CLValue> = new Map(\n      Object.keys(args).map(k => [k, args[k]])\n    );\n    return new RuntimeArgs(map);\n  }\n\n  public static fromNamedArgs(namedArgs: NamedArg[]) {\n    const args = namedArgs.reduce<Record<string, CLValue>>((pre, cur) => {\n      pre[cur.name] = cur.value;\n      return pre;\n    }, {});\n    return RuntimeArgs.fromMap(args);\n  }\n\n  public insert(key: string, value: CLValue) {\n    this.args.set(key, value);\n  }\n\n  public toBytes(): ToBytesResult {\n    const vec = Array.from(this.args.entries()).map((a: [string, CLValue]) => {\n      return new NamedArg(a[0], a[1]);\n    });\n    return Ok(toBytesVector(vec));\n  }\n\n  // TODO: Add tests to check if it is working properly\n  public static fromBytes(\n    bytes: Uint8Array\n  ): ResultAndRemainder<RuntimeArgs, string> {\n    const {\n      result: sizeRes,\n      remainder: sizeRem\n    } = new CLU32BytesParser().fromBytesWithRemainder(bytes);\n\n    const size = sizeRes\n      .unwrap()\n      .value()\n      .toNumber();\n\n    let remainBytes = sizeRem;\n    const res: NamedArg[] = [];\n    for (let i = 0; i < size; i++) {\n      if (!remainBytes)\n        return resultHelper<RuntimeArgs, string>(\n          Err('Error while parsing bytes')\n        );\n      const {\n        result: namedArgRes,\n        remainder: namedArgRem\n      } = NamedArg.fromBytes(remainBytes);\n\n      res.push(namedArgRes.unwrap());\n      remainBytes = namedArgRem;\n    }\n    return resultHelper(Ok(RuntimeArgs.fromNamedArgs(res)), remainBytes);\n  }\n}\n","/**\n * Functions to convert data to the FFI\n * @packageDocumentation\n */\n\ntype Serializer<T> = (arg: T) => Uint8Array;\n\n/**\n * Help function to serialize size\n *\n * @param size\n * @constructor\n */\nconst Size: Serializer<number> = size => {\n  const buffer = Buffer.alloc(4);\n  buffer.writeInt32LE(size, 0);\n  return buffer;\n};\n\n/**\n * `Array[Byte]` serializes as follows:\n *  1) your array of bytes\n *\n * So for `[1,2,3,4,5,6]` it serializes to`[1, 2, 3, 4, 5, 6]`\n *\n * @param bytes\n */\nexport const ByteArrayArg: Serializer<Uint8Array> = bytes => {\n  return Buffer.from(bytes);\n};\n\n/**\n * Serialize ByteArray\n *\n * `Seq[Byte]` serializes as follows:\n *  1) length of the array as 4 bytes\n *  2) your array of bytes\n *\n * So for `[1,2,3,4,5,6]` it serializes to`[6, 0, 0, 0, 1, 2, 3, 4, 5, 6]`\n */\nexport const ByteSequenceArg: Serializer<Uint8Array> = bytes => {\n  return Buffer.concat([Size(bytes.length), bytes].map(Buffer.from));\n};\n\n/**\n * Serialize public key\n *\n * A public key is the same as array but it's expected to be 32 bytes long exactly.\n * It's `[u8; 32]` (32 element byte array) but serializes to `(32.toBytes() ++ array.toBytes())`\n * We serialize 32(literally, number 32) to 4 bytes instead of 1 byte, little endianness.\n * This is how`111..11` public key looks like when serialized:\n * [32, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n */\nexport const PublicKeyArg = ByteArrayArg;\n\n/**\n * Serialize UINT64\n *\n * @param value\n */\nexport const UInt64Arg: Serializer<bigint> = value => {\n  const u64Buffer = Buffer.alloc(8);\n  u64Buffer.writeBigUInt64LE(value, 0);\n  return u64Buffer;\n};\n\n/**\n * Combine multiple arguments.\n *\n * so, what you want to send is`Vec(PublicKey, u64)`:\n * • `PublicKey` serializes to`byte array of the key`,\n * • `u64` serializes to`8 byte array`,\n *\n * so, what we have is(for example):\n *  `Vec([32, 0, 0, 0, {public key bytes}], [1, 2, 3, 4, 0, 0, 0, 0])`\n *\n * Which gives us:\n * `[2, 0, 0, 0`  - for the number of elements in the external vector\n * `32, 0, 0, 0, 1, 1, …` - public key\n * `8, 0, 0, 0, ` - for the number of bytes in the second element of the vector.\n * That was serialized `u64` (`[1, 2, 3, 4, 0, 0, 0, 0]`)\n * `1, 2, 3, 4, 0, 0, 0, 0]`\n */\nexport function Args(...args: Uint8Array[]): Uint8Array {\n  const arrays = [Size(args.length)].concat(args.map(ByteSequenceArg));\n  return Buffer.concat(arrays.map(Buffer.from));\n}\n","import * as ed25519 from '@noble/ed25519';\nimport * as secp256k1 from '@noble/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport { CLPublicKey } from './CLValue/';\nimport { AsymmetricKey } from './Keys';\n\n/**\n * Method for formatting messages with Casper header.\n * @param message The string to be formatted.\n * @returns The bytes of the formatted message\n */\nexport const formatMessageWithHeaders = (message: string): Uint8Array => {\n  // Avoiding usage of Text Encoder lib to support legacy nodejs versions.\n  return Uint8Array.from(Buffer.from(`Casper Message:\\n${message}`));\n};\n\n/**\n * Method for signing string message.\n * @param key AsymmetricKey used to sign the message\n * @param message Message that will be signed\n * @return Uint8Array Signature in byte format\n */\nexport const signRawMessage = (\n  key: AsymmetricKey,\n  message: string\n): Uint8Array => {\n  return key.sign(formatMessageWithHeaders(message));\n};\n\n/**\n * Method for signing formatted message in bytes format.\n * @param key AsymmetricKey used to sign the message\n * @param formattedMessageBytes Bytes of the formatted message. (Strings can be formatted using the `formatMessageWithHeaders()` method)\n * @returns Uint8Array Signature in byte format\n */\nexport const signFormattedMessage = (\n  key: AsymmetricKey,\n  formattedMessageBytes: Uint8Array\n): Uint8Array => {\n  return key.sign(formattedMessageBytes);\n};\n\n/**\n * Method to verify signature\n * @param key Public key of private key used to signed.\n * @param message Message that was signed\n * @param signature Signature in byte format\n * @return boolean Verification result\n */\nexport const verifyMessageSignature = (\n  key: CLPublicKey,\n  message: string,\n  signature: Uint8Array\n): boolean => {\n  const messageWithHeader = formatMessageWithHeaders(message);\n  if (key.isEd25519()) {\n    return ed25519.sync.verify(signature, messageWithHeader, key.value());\n  }\n  if (key.isSecp256K1()) {\n    return secp256k1.verify(\n      signature,\n      sha256(Buffer.from(messageWithHeader)),\n      key.value()\n    );\n  }\n\n  throw new Error('Unsupported algorithm.');\n};\n","import { JsonTypes } from 'typedjson';\n\nexport type EventsMap = {\n  connected: string;\n  disconnected: void;\n  accountChanged: string;\n  locked: void;\n  unlocked: void;\n};\n\nexport default abstract class BaseSigner {\n  protected activeAccount?: string;\n\n  protected connected: boolean;\n\n  protected locked: boolean;\n\n  private readonly events: Record<string, ((event: any) => void)[]> = {};\n\n  public on<K extends keyof EventsMap>(\n    name: K,\n    listener: (ev: EventsMap[K]) => void\n  ): void {\n    this.addEventListener(name, listener);\n  }\n\n  public addEventListener<K extends keyof EventsMap>(\n    name: K,\n    listener: (ev: EventsMap[K]) => void\n  ): void {\n    if (!this.events[name]) this.events[name] = [];\n\n    this.events[name].push(listener);\n  }\n\n  public off<K extends keyof EventsMap>(\n    name: K,\n    listener: (ev: EventsMap[K]) => void\n  ): void {\n    this.removeEventListener(name, listener);\n  }\n\n  public removeEventListener<K extends keyof EventsMap>(\n    name: K,\n    listenerToRemove: (ev: EventsMap[K]) => void\n  ): void {\n    if (!this.events[name]) {\n      throw new Error(\n        `Can't remove a listener. Event \"${name}\" doesn't exits.`\n      );\n    }\n\n    const filterListeners = (listener: (event: any) => void) =>\n      listener !== listenerToRemove;\n\n    this.events[name] = this.events[name].filter(filterListeners);\n  }\n\n  protected emit<K extends keyof EventsMap>(name: K, event: EventsMap[K]) {\n    this.events[name]?.forEach(cb => cb(event));\n  }\n\n  /**\n   * Returns Signer version\n   */\n  public abstract getVersion(): Promise<string>;\n\n  /**\n   * Returns connection status from Signer\n   */\n  public abstract isConnected(): Promise<boolean>;\n\n  /**\n   * Request connection to the Signer\n   */\n  public abstract connect(): Promise<string>;\n\n  /**\n   * Disconnect from the Signer\n   */\n  public abstract disconnect(): Promise<boolean>;\n\n  /**\n   * Request the signer to change active account\n   * @returns changed active public key in hex format\n   */\n  public abstract changeAccount(): Promise<boolean>;\n\n  /**\n   * Sign deploy from `DeployUtil.deployToJson`\n   *\n   * @param deploy - deploy in JSON format\n   * @param signingPublicKey - public key in hex format, the corresponding private key will be used to sign.\n   *\n   * @throws Error if the Signer extension is not connected.\n   * @throws Error if signingPublicKey is not available or does not match the Active Key in the Signer.\n   *\n   * @returns serialized deploy which can be converted into `Deploy` using `DeployUtil.deployFromJson`\n   *\n   * @example\n   *  import { DeployUtil } from \"casper-js-sdk\";\n   *\n   *  try {\n   *    const serializedDeploy = DeployUtil.deployToJson(deploy);\n   *    const signedSerializedDeploy = await signer.signDeploy(serializedDeploy, pulicKey);\n   *    const signedDeploy = DeployUtil.deployFromJson(signedSerializedDeploy).unwrap();\n   *  } catch (error) {\n   *    if (isSignerError(error)) {\n   *      // handle signer error\n   *    }\n   *    // handle unknown error\n   *  }\n   */\n  public abstract signDeploy(\n    deploy: { deploy: JsonTypes },\n    signingPublicKey: string\n  ): Promise<{ deploy: JsonTypes }>;\n\n  /**\n   * Sign message with given public key's private key\n   * @param message string to be signed.\n   * @param signingPublicKey public key in hex format, the corresponding private key will be used to sign.\n   * @returns string in hex format\n   *\n   * @example\n   *  import { decodeBase16, verifyMessageSignature } from \"casper-js-sdk\";\n   *\n   *  try {\n   *\n   *    const message = \"Hello Casper\";\n   *    const signature = await signer.signMessage(message, publicKey);\n   *    const isValidSignature = verifyMessageSignature(CLPublicKey.fromHex(publicKey), message, decodeBase16(signature));\n   *\n   *  } catch(error) {\n   *    if (isSignerError(error)) {\n   *      // handle signer error\n   *    }\n   *    // handle unknown error\n   *  }\n   */\n  public abstract signMessage(\n    message: string,\n    signingPublicKey: string\n  ): Promise<string>;\n\n  /**\n   * Retrives active public key in hex format\n   * @returns string active public key in hex format\n   */\n  public abstract getActiveAccount(): Promise<string>;\n}\n","/**\n * Provide methods to communicate with [CasperLabs Signer Extension](https://github.com/casper-ecosystem/signer).\n * Works only on browser.\n *\n * @packageDocumentation\n */\n\nimport { JsonTypes } from 'typedjson';\nimport {\n  CasperLabsHelper,\n  SignerTestingHelper\n} from '../../@types/casperlabsSigner';\n\ndeclare global {\n  interface Window {\n    casperlabsHelper: CasperLabsHelper;\n    signerTestingHelper: SignerTestingHelper;\n  }\n}\n\n/**\n * Can be used to determine whether the CasperLabs Helper is available at `window`\n * @returns `true` if the CasperLabs Helper is present, `false` otherwise\n */\nconst helperPresent = () => {\n  return !(typeof window.casperlabsHelper === 'undefined');\n};\n\n/**\n * Gets the current Signer version\n * @returns The current Signer version\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const getVersion: () => Promise<string> = async () => {\n  if (helperPresent()) {\n    try {\n      return await window.casperlabsHelper.getVersion();\n    } catch {\n      return '<1.0.0';\n    }\n  }\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Checks whether CasperLabs Signer extension is connected\n * @returns `true` if the Signer is connected to the current website\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const isConnected: () => Promise<boolean> = async () => {\n  if (helperPresent()) return await window.casperlabsHelper.isConnected();\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Attempt connection to Signer\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const sendConnectionRequest: () => void = () => {\n  if (helperPresent()) return window.casperlabsHelper.requestConnection();\n  throw new Error(\n    'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n  );\n};\n\n/**\n * Gets the public key currently selected in the Signer in base64 format\n * @deprecated in favour of {@link Signer.getActivePublicKey}.\n * @returns `Promise` that resolves to a `base64` encoded public key string of the currently selected account\n *\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const getSelectedPublicKeyBase64: () => Promise<string> = () => {\n  if (helperPresent())\n    return window.casperlabsHelper.getSelectedPublicKeyBase64();\n  throw new Error(\n    'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n  );\n};\n\n/**\n * Retrieve the active public key.\n *\n * @returns {string} Hex-encoded public key with algorithm prefix, where 01 indicates an Ed25519 key and 02 indicates Secp256k1\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const getActivePublicKey: () => Promise<string> = () => {\n  if (helperPresent()) return window.casperlabsHelper.getActivePublicKey();\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Send Deploy in JSON format to Signer extension to be signed.\n *\n * @param deploy A deploy in JSON format\n * @param signingPublicKeyHex Hex-formatted public key. The corresponding secret key is used to sign the deploy.\n * @param {string} targetPublicKeyHex Hex-formatted target public key.\n * If the `target` in the deploy is an account hash this can be used to verify it and display the hex-formatted public key in the UI.\n *\n * @returns A signed JSON deploy object\n *\n * @throws Errors if the Signer extension is not connected.\n * @throws Errors if signingPublicKeyHex is not available or does not match the Active Key in the Signer.\n * @throws Errors if targetPublicKeyHex is not the same as the key (or corresponding account hash) that is used as target in deploy.\n */\nexport const sign: (\n  deploy: { deploy: JsonTypes },\n  signingPublicKeyHex: string,\n  targetPublicKeyHex?: string\n) => Promise<{ deploy: JsonTypes }> = (\n  deploy: { deploy: JsonTypes },\n  signingPublicKeyHex: string,\n  targetPublicKeyHex?: string\n) => {\n  if (helperPresent())\n    return window.casperlabsHelper.sign(\n      deploy,\n      signingPublicKeyHex,\n      targetPublicKeyHex\n    );\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Initiates a signature request with the Signer. Used for signing messages\n * @param {string} message The message to sign\n * @param {string} signingPublicKey The public key of the signing account\n * @returns A `Promise` that resolves to the signed message\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const signMessage: (\n  message: string,\n  signingPublicKey: string\n) => Promise<string> = (message: string, signingPublicKey: string) => {\n  if (helperPresent())\n    return window.casperlabsHelper.signMessage(message, signingPublicKey);\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Disconnects from the currently open site\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const disconnectFromSite: () => void = () => {\n  if (helperPresent()) return window.casperlabsHelper.disconnectFromSite();\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Forces Signer to connect to the currently open site\n * @throws `Error` if the Signer isn't available to the JavaScript client\n */\nexport const forceConnection: () => void = () => {\n  if (helperPresent()) return window.signerTestingHelper.forceConnection();\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Forces Signer to disconnect from the currently open site\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const forceDisconnect: () => void = () => {\n  if (helperPresent()) return window.signerTestingHelper.forceDisconnect();\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Query the Signer to check if the user has created a vault\n * @returns A `Promise` that resolves to a `boolean` indicating whether the user has or hasn't created a vault\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const hasCreatedVault: () => Promise<boolean> = () => {\n  if (helperPresent()) return window.signerTestingHelper.hasCreatedVault();\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Initiates a request to reset the user's existing vault\n * @returns A `Promise` that resolves to `void`\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const resetExistingVault: () => Promise<void> = () => {\n  if (helperPresent()) return window.signerTestingHelper.resetExistingVault();\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Initiates a request to create a new vault within the Signer\n * @param {string} password The password of the new vault\n * @returns A `Promise` that resolves to `void`\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const createNewVault: (password: string) => Promise<void> = (\n  password: string\n) => {\n  if (helperPresent())\n    return window.signerTestingHelper.createNewVault(password);\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Initiates a request to create a test account within the Signer\n * @param {string} name The name of the test account\n * @param {string} privateKey The private key of the new test account\n * @returns A `Promise` that resolves to `void`\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n */\nexport const createTestAccount: (\n  name: string,\n  privateKey: string\n) => Promise<void> = (name: string, privateKey: string) => {\n  if (helperPresent())\n    return window.signerTestingHelper.createTestAccount(name, privateKey);\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Gets the current transaction nonce\n * @returns A `Promise` that resolves to the transaction nonce, or `null`\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n * @privateRemarks Documentation needs reviewing\n */\nexport const getToSignMessageID: () => Promise<number | null> = () => {\n  if (helperPresent()) return window.signerTestingHelper.getToSignMessageID();\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n\n/**\n * Sign a test deploy with a given id (nonce)\n * @param {number} msgId The transaction id\n * @returns A `Promise` that resolves to `void`\n * @throws `Error` if the JavaScript client isn't connected to the CasperLabs Signer browser extension\n * @privateRemarks Documentation needs reviewing\n */\nexport const signTestDeploy: (msgId: number) => Promise<void> = (\n  msgId: number\n) => {\n  if (helperPresent()) return window.signerTestingHelper.signTestDeploy(msgId);\n  return Promise.reject(\n    new Error(\n      'Content script not found - make sure you have the Signer installed and refresh the page before trying again.'\n    )\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { JsonTypes } from 'typedjson';\nimport BaseSigner from './BaseSigner';\nimport { SignerError, SignerErrorCodes } from './error';\nimport { CLPublicKey, DeployUtil } from '..';\n\nconst EVENT_TYPE_PREFIX = 'casper-wallet';\n\nconst CasperWalletEventTypes = {\n  /** Account was connected using the wallet: */\n  Connected: `${EVENT_TYPE_PREFIX}:connected`,\n  /** Active key was changed using the Wallet interface: */\n  ActiveKeyChanged: `${EVENT_TYPE_PREFIX}:activeKeyChanged`,\n  /** Account was disconnected using the wallet: */\n  Disconnected: `${EVENT_TYPE_PREFIX}:disconnected`,\n  /** Browser tab was changed to some connected site: */\n  TabChanged: `${EVENT_TYPE_PREFIX}:tabChanged`,\n  /** Wallet was locked: */\n  Locked: `${EVENT_TYPE_PREFIX}:locked`,\n  /** Wallet was unlocked: */\n  Unlocked: `${EVENT_TYPE_PREFIX}:unlocked`\n} as const;\n\ntype CasperWalletProviderOptions = {\n  timeout: number; // timeout of request to extension (in ms)\n};\n\ntype CasperWalletState = {\n  /** contain wallet is locked flag */\n  isLocked: boolean;\n  /** if unlocked contain connected status flag of active key otherwise null */\n  isConnected: boolean | null;\n  /** if unlocked and connected contain active key otherwise null */\n  activeKey: string | null;\n};\n\nexport class CasperWallet extends BaseSigner {\n  public isCasperWallet = true;\n\n  private casperWalletProvider: ReturnType<CasperWalletProvider>;\n\n  constructor(options?: CasperWalletProviderOptions) {\n    super();\n\n    this.connected = false;\n    this.locked = true;\n\n    this.setOption(options);\n\n    // Register event listeners\n    window.addEventListener(\n      CasperWalletEventTypes.Connected,\n      this.handleConnected.bind(this)\n    );\n    window.addEventListener(\n      CasperWalletEventTypes.Disconnected,\n      this.handleDisconnected.bind(this)\n    );\n    window.addEventListener(\n      CasperWalletEventTypes.ActiveKeyChanged,\n      this.handleActiveKeyChanged.bind(this)\n    );\n    window.addEventListener(\n      CasperWalletEventTypes.Locked,\n      this.handleLocked.bind(this)\n    );\n    window.addEventListener(\n      CasperWalletEventTypes.Unlocked,\n      this.handleUnlocked.bind(this)\n    );\n    window.addEventListener(\n      CasperWalletEventTypes.TabChanged,\n      this.handleTabChanged.bind(this)\n    );\n  }\n\n  private handleConnected(event: any) {\n    try {\n      const state: CasperWalletState = JSON.parse(event.detail);\n      this.updateState(state);\n\n      this.emit('connected', this.activeAccount!);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private handleDisconnected(event: any) {\n    try {\n      const state: CasperWalletState = JSON.parse(event.detail);\n      this.updateState(state);\n      // @ts-ignore\n      this.emit('disconnected');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private handleActiveKeyChanged(event: any) {\n    try {\n      const state: CasperWalletState = JSON.parse(event.detail);\n      this.updateState(state);\n\n      this.emit('accountChanged', state.activeKey!);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private handleLocked(event: any) {\n    try {\n      const state: CasperWalletState = JSON.parse(event.detail);\n      this.updateState(state);\n\n      // @ts-ignore\n      this.emit('locked');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private handleUnlocked(event: any) {\n    try {\n      const state: CasperWalletState = JSON.parse(event.detail);\n      this.updateState(state);\n\n      // @ts-ignore\n      this.emit('unlocked');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private handleTabChanged(event: any) {\n    try {\n      const state: CasperWalletState = JSON.parse(event.detail);\n      this.updateState(state);\n\n      //  TODO\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private updateState(state: CasperWalletState) {\n    this.connected = state.isConnected ?? false;\n    this.activeAccount = state.activeKey ?? undefined;\n    this.locked = state.isLocked;\n  }\n\n  public async getVersion(): Promise<string> {\n    return this.casperWalletProvider.getVersion();\n  }\n\n  /**\n   * Get the connection status of the Casper Wallet extension\n   * @returns `true` when currently connected at least one account, `false` otherwise.\n   * @throws when wallet is locked (err.code: 1)\n   */\n  public async isConnected(): Promise<boolean> {\n    return this.casperWalletProvider.isConnected();\n  }\n\n  public async connect(): Promise<string> {\n    await this.casperWalletProvider.requestConnection();\n    const activeAccount = await this.casperWalletProvider.getActivePublicKey();\n\n    return activeAccount;\n  }\n\n  public async disconnect(): Promise<boolean> {\n    return this.casperWalletProvider.disconnectFromSite();\n  }\n\n  public async changeAccount(): Promise<boolean> {\n    return this.casperWalletProvider.requestSwitchAccount();\n  }\n\n  public async signDeploy(\n    deploy: { deploy: JsonTypes },\n    signingPublicKey: string\n  ): Promise<{ deploy: JsonTypes }> {\n    if (DeployUtil.deployFromJson(deploy).err) {\n      throw new SignerError(SignerErrorCodes.INVALID_DEPLOY);\n    }\n\n    const result = await this.casperWalletProvider.sign(\n      JSON.stringify(deploy),\n      signingPublicKey\n    );\n\n    if (result.cancelled) {\n      throw new SignerError(SignerErrorCodes.USER_CANCELED_REQUEST);\n    } else {\n      const signedDeploy = DeployUtil.setSignature(\n        DeployUtil.deployFromJson(deploy).unwrap(),\n        result.signature,\n        CLPublicKey.fromHex(signingPublicKey)\n      );\n\n      return DeployUtil.deployToJson(signedDeploy);\n    }\n  }\n\n  public async signMessage(\n    message: string,\n    signingPublicKey: string\n  ): Promise<string> {\n    const result = await this.casperWalletProvider.signMessage(\n      message,\n      signingPublicKey\n    );\n\n    if (result.cancelled) {\n      throw new SignerError(SignerErrorCodes.USER_CANCELED_REQUEST);\n    } else {\n      return result.signatureHex;\n    }\n  }\n\n  /**\n   * Retrives active public key in hex format\n   * @returns string active public key in hex format\n   * @throws when wallet is locked (err.code: 1)\n   * @throws when active account not approved to connect with the site (err.code: 2)\n   */\n  public async getActiveAccount(): Promise<string> {\n    const result = await this.casperWalletProvider.getActivePublicKey();\n\n    return result;\n  }\n\n  /**\n   * Recreate CasperWalletProvider instance\n   * @param options Casper WalletProvider options\n   * @see {@link CasperWalletProviderOptions}\n   */\n  public async setOption(options?: CasperWalletProviderOptions) {\n    if (!window.CasperWalletProvider) {\n      throw new SignerError(SignerErrorCodes.NOT_FOUND_SIGNER);\n    }\n\n    this.casperWalletProvider = window.CasperWalletProvider(options);\n  }\n}\n","export class SignerError extends Error {\n  public isSignerError = true;\n  public message: string;\n  constructor(public code: SignerErrorCodes) {\n    super(SignerErrorMessage[code]);\n    this.message = SignerErrorMessage[code];\n  }\n}\n\nexport const isSignerError = (error: any): error is SignerError => {\n  // using `instanceof` won't working if the error was thrown in a different window/frame/iframe than where the check is happening\n\n  return typeof error === 'object' && error.isSignerError;\n};\n\nexport enum SignerErrorCodes {\n  NOT_FOUND_SIGNER,\n  USER_CANCELED_REQUEST,\n  NOT_FOUND_ACCOUNT,\n  INVALID_DEPLOY,\n  INTERNAL_ERROR\n}\n\nexport const SignerErrorMessage = {\n  [SignerErrorCodes.NOT_FOUND_SIGNER]: 'Signer was not found.',\n  [SignerErrorCodes.USER_CANCELED_REQUEST]: 'User canceled the request.',\n  [SignerErrorCodes.NOT_FOUND_ACCOUNT]: 'The signer account was not found.',\n  [SignerErrorCodes.INVALID_DEPLOY]: 'The provided deploy is not valid.',\n  [SignerErrorCodes.INTERNAL_ERROR]: 'Internal error occurred.'\n} as const;\n","import * as Signer from './CasperSigner';\nexport { CasperWallet } from './CasperWallet';\nexport * from './error';\n\nexport { Signer };\n","import { jsonArrayMember, jsonMember, jsonObject } from 'typedjson';\nimport { CLValue, CLType, CLValueParsers, matchTypeToCLType } from './CLValue';\n\n@jsonObject\nclass NamedKey {\n  @jsonMember({ constructor: String })\n  public name: string;\n  @jsonMember({ constructor: String })\n  public key: string;\n}\n\n@jsonObject\nclass AssociatedKey {\n  @jsonMember({ name: 'account_hash', constructor: String })\n  public accountHash: string;\n  @jsonMember({ constructor: Number })\n  public weight: number;\n}\n\n@jsonObject\nclass ActionThresholds {\n  @jsonMember({ constructor: Number })\n  public deployment: number;\n\n  @jsonMember({ name: 'key_management', constructor: Number })\n  public keyManagement: number;\n}\n\n/**\n * Structure representing a user's account, stored in global state.\n */\n@jsonObject\nclass AccountJson {\n  public accountHash(): string {\n    return this._accountHash;\n  }\n\n  @jsonMember({ name: 'account_hash', constructor: String })\n  private _accountHash: string;\n  @jsonArrayMember(NamedKey, { name: 'named_keys' })\n  public namedKeys: NamedKey[];\n  @jsonMember({ name: 'main_purse', constructor: String })\n  public mainPurse: string;\n  @jsonArrayMember(AssociatedKey, { name: 'associated_keys' })\n  public associatedKeys: AssociatedKey[];\n  @jsonMember({ name: 'action_thresholds', constructor: ActionThresholds })\n  public actionThresholds: ActionThresholds;\n}\n\n@jsonObject\nexport class TransferJson {\n  // Deploy that created the transfer\n  @jsonMember({ name: 'deploy_hash', constructor: String })\n  public deployHash: string;\n\n  // Account from which transfer was executed\n  @jsonMember({ constructor: String })\n  public from: string;\n\n  // Target account hash\n  @jsonMember({ constructor: String })\n  public to: string;\n\n  // Source purse\n  @jsonMember({ constructor: String })\n  public source: string;\n\n  // Target purse\n  @jsonMember({ constructor: String })\n  public target: string;\n\n  // Transfer amount\n  @jsonMember({ constructor: String })\n  public amount: string;\n\n  // Gas\n  @jsonMember({ constructor: String })\n  public gas: string;\n\n  // User-defined id\n  @jsonMember({ constructor: Number, preserveNull: true })\n  public id: number | null;\n}\n\n@jsonObject\nexport class Transfers {\n  @jsonArrayMember(TransferJson)\n  transfers: TransferJson[];\n}\n\n@jsonObject\nexport class DeployInfoJson {\n  // The relevant Deploy.\n  @jsonMember({ name: 'deploy_hash', constructor: String })\n  public deployHash: string;\n\n  // Transfers performed by the Deploy.\n  @jsonArrayMember(String)\n  public transfers: string[];\n\n  // Account identifier of the creator of the Deploy.\n  @jsonMember({ constructor: String })\n  public from: string;\n  // Source purse used for payment of the Deploy.\n  @jsonMember({ constructor: String })\n  public source: string;\n\n  // Gas cost of executing the Deploy.\n  @jsonMember({ constructor: String })\n  public gas: string;\n}\n\n/**\n * Info about a seigniorage allocation for a validator\n */\n@jsonObject\nclass Validator {\n  // Validator's public key\n  @jsonMember({ name: 'validator_public_key', constructor: String })\n  public validatorPublicKey: string;\n\n  // Allocated amount\n  @jsonMember({ constructor: String })\n  public amount: string;\n}\n\n/**\n * Info about a seigniorage allocation for a delegator\n */\n@jsonObject\nclass Delegator {\n  // Delegator's public key\n  @jsonMember({ name: 'delegator_public_key', constructor: String })\n  public delegatorPublicKey: string;\n\n  // Validator's public key\n  @jsonMember({ name: 'validator_public_key', constructor: String })\n  public validatorPublicKey: string;\n\n  // Allocated amount\n  @jsonMember({ constructor: String })\n  public amount: string;\n}\n\n/**\n * Information about a seigniorage allocation\n */\n@jsonObject\nexport class SeigniorageAllocation {\n  @jsonMember({ constructor: Validator })\n  public Validator?: Validator;\n\n  @jsonMember({ constructor: Delegator })\n  public Delegator?: Delegator;\n}\n\n/**\n * Auction metadata. Intended to be recorded at each era.\n */\n@jsonObject\nexport class EraInfoJson {\n  @jsonArrayMember(SeigniorageAllocation, { name: 'seigniorage_allocations' })\n  public seigniorageAllocations: SeigniorageAllocation[];\n}\n\n/**\n * Named CLType arguments\n */\n@jsonObject\nexport class NamedCLTypeArg {\n  @jsonMember({ constructor: String })\n  public name: string;\n\n  @jsonMember({\n    name: 'cl_type',\n    deserializer: json => matchTypeToCLType(json)\n  })\n  public clType: CLType;\n}\n\n/**\n * Entry point metadata\n */\n@jsonObject\nexport class EntryPoint {\n  @jsonMember({\n    name: 'access',\n    deserializer: json => {\n      if (typeof json === 'string') return json;\n      // TODO: add support for object access\n      return null;\n    }\n  })\n  public access: string;\n\n  @jsonMember({ name: 'entry_point_type', constructor: String })\n  public entryPointType: string;\n\n  @jsonMember({ constructor: String })\n  public name: string;\n\n  @jsonMember({\n    name: 'ret',\n    deserializer: json => matchTypeToCLType(json)\n  })\n  public ret: string;\n\n  @jsonArrayMember(NamedCLTypeArg)\n  public args: NamedCLTypeArg[];\n}\n\n/**\n * Contract metadata.\n */\n@jsonObject\nexport class ContractMetadataJson {\n  @jsonMember({ name: 'contract_package_hash', constructor: String })\n  public contractPackageHash: string;\n\n  @jsonMember({ name: 'contract_wasm_hash', constructor: String })\n  public contractWasmHash: string;\n\n  @jsonArrayMember(EntryPoint, { name: 'entry_points' })\n  public entrypoints: EntryPoint[];\n\n  @jsonMember({ name: 'protocol_version', constructor: String })\n  public protocolVersion: string;\n\n  @jsonArrayMember(NamedKey, { name: 'named_keys' })\n  public namedKeys: NamedKey[];\n}\n\n/**\n * Contract Version.\n */\n@jsonObject\nexport class ContractVersionJson {\n  @jsonMember({ name: 'protocol_version_major', constructor: Number })\n  public protocolVersionMajor: number;\n\n  @jsonMember({ name: 'contract_version', constructor: Number })\n  public contractVersion: number;\n\n  @jsonMember({ name: 'contract_hash', constructor: String })\n  public contractHash: string;\n}\n\n/**\n * Disabled Version.\n */\n@jsonObject\nexport class DisabledVersionJson {\n  @jsonMember({ name: 'protocol_version_major', constructor: Number })\n  public accessKey: number;\n\n  @jsonMember({ name: 'contract_version', constructor: Number })\n  public contractVersion: number;\n}\n\n/**\n * Groups.\n */\n@jsonObject\nexport class GroupsJson {\n  @jsonMember({ name: 'group', constructor: String })\n  public group: string;\n\n  @jsonArrayMember(String, { name: 'keys' })\n  public keys: string[];\n}\n\n/**\n * Contract Package.\n */\n@jsonObject\nexport class ContractPackageJson {\n  @jsonMember({ name: 'access_key', constructor: String })\n  public accessKey: string;\n\n  @jsonArrayMember(ContractVersionJson, { name: 'versions' })\n  public versions: ContractVersionJson[];\n\n  @jsonArrayMember(DisabledVersionJson, { name: 'disabled_versions' })\n  public disabledVersions: DisabledVersionJson[];\n\n  @jsonArrayMember(GroupsJson, { name: 'groups' })\n  public groups: GroupsJson[];\n}\n\n@jsonObject\nexport class StoredValue {\n  @jsonMember({\n    deserializer: json => {\n      if (!json) return;\n      return CLValueParsers.fromJSON(json).unwrap();\n    }\n  })\n  public CLValue?: CLValue;\n\n  // An account\n  @jsonMember({ constructor: AccountJson })\n  public Account?: AccountJson;\n\n  // A contract's Wasm\n  @jsonMember({ constructor: String })\n  public ContractWASM?: string;\n\n  // Methods and type signatures supported by a contract\n  @jsonMember({ constructor: ContractMetadataJson })\n  public Contract?: ContractMetadataJson;\n\n  // A contract definition, metadata, and security container\n  @jsonMember({ constructor: ContractPackageJson })\n  public ContractPackage?: ContractPackageJson;\n\n  // A record of a transfer\n  @jsonMember({ constructor: TransferJson })\n  public Transfer?: TransferJson;\n\n  // A record of a deploy\n  @jsonMember({ constructor: DeployInfoJson })\n  public DeployInfo?: DeployInfoJson;\n\n  @jsonMember({ constructor: EraInfoJson })\n  public EraInfo?: EraInfoJson;\n}\n","import { Result } from 'ts-results';\nimport * as Contracts from './Contracts';\nimport * as DeployUtil from './DeployUtil';\nimport * as HDKeys from './CasperHDKeys';\nimport * as Keys from './Keys';\nimport * as Serialization from './Serialization';\nexport * from './Signer';\nexport * from './CLValue';\nexport * from './StoredValue';\nexport * from './RuntimeArgs';\nexport * from './CasperClient';\nexport * from './SignedMessage';\nexport * from './Conversions';\n\nexport { Contracts, HDKeys, Keys, Serialization, DeployUtil, Result };\n","/**\n * Supported Asymmetric Key algorithms\n * @enum\n */\nexport enum SignatureAlgorithm {\n  Ed25519 = 'ed25519',\n  Secp256K1 = 'secp256k1'\n}\n","/**\n * A service to query balance for accounts\n */\nimport { CasperServiceByJsonRPC } from './CasperServiceByJsonRPC';\nimport { CLPublicKey } from '../lib';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nexport class BalanceServiceByJsonRPC {\n  private balanceUrefs = new Map<string, string>();\n\n  constructor(private casperService: CasperServiceByJsonRPC) {}\n\n  /**\n   * Query balance for the specified account\n   *\n   * It will cache balance URef values for accounts so that on subsequent queries,\n   * it only takes 1 state query not 4 to get the value.\n   * @param blockHashBase16\n   * @param publicKey\n   */\n  public async getAccountBalance(\n    blockHashBase16: string,\n    publicKey: CLPublicKey\n  ): Promise<BigNumber | undefined> {\n    try {\n      const stateRootHash = await this.casperService.getStateRootHash(\n        blockHashBase16\n      );\n      let balanceUref = this.balanceUrefs.get(publicKey.toHex());\n\n      // Find the balance Uref and cache it if we don't have it.\n      if (!balanceUref) {\n        balanceUref = await this.casperService.getAccountBalanceUrefByPublicKey(\n          stateRootHash,\n          publicKey\n        );\n        if (balanceUref) {\n          this.balanceUrefs.set(publicKey.toHex(), balanceUref);\n        }\n      }\n\n      if (!balanceUref) {\n        return undefined;\n      }\n\n      return await this.casperService.getAccountBalance(\n        stateRootHash,\n        balanceUref\n      );\n    } catch (e) {\n      return undefined;\n    }\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { RequestManager, HTTPTransport, Client } from '@open-rpc/client-js';\nimport { TypedJSON, jsonMember, jsonObject } from 'typedjson';\n\nimport {\n  DeployUtil,\n  encodeBase16,\n  CLPublicKey,\n  CLValue,\n  StoredValue,\n  Transfers\n} from '..';\n\nimport ProviderTransport, {\n  SafeEventEmitterProvider\n} from './ProviderTransport';\n\nexport { JSONRPCError } from '@open-rpc/client-js';\n\n/** RPC request props interface */\ninterface RpcRequestProps {\n  timeout?: number;\n}\n\n/** RPC result interface */\ninterface RpcResult {\n  api_version: string;\n}\n\n/** Node peer interface */\ninterface Peer {\n  node_id: string;\n  address: string;\n}\n\n/** A peers result interface defining `peers` as an array of `Peer`s */\nexport interface GetPeersResult extends RpcResult {\n  peers: Peer[];\n}\n\n/** Interface for information on the most recently appended block on the network */\ninterface LastAddedBlockInfo {\n  hash: string;\n  timestamp: string;\n  era_id: number;\n  height: number;\n  state_root_hash: string;\n  creator: string;\n}\n\n/** Result interface for a get-status call */\nexport interface GetStatusResult extends GetPeersResult {\n  last_added_block_info: LastAddedBlockInfo;\n  build_version: string;\n}\n\n/** Result interface for a get-state-root-hash call */\nexport interface GetStateRootHashResult extends RpcResult {\n  state_root_hash: string;\n}\n\ntype TransformValue = any;\n\ninterface Transform {\n  key: string;\n  transform: TransformValue;\n}\n\ninterface Effect {\n  transforms: Transform[];\n}\n\n/** Result interface for an execution result body */\ninterface ExecutionResultBody {\n  cost: number;\n  error_message?: string | null;\n  transfers: string[];\n  effect: Effect;\n}\n\n/** Result interface for an execution result */\nexport interface ExecutionResult {\n  Success?: ExecutionResultBody;\n  Failure?: ExecutionResultBody;\n}\n\n/** Result interface for a JSON execution result */\nexport interface JsonExecutionResult {\n  block_hash: JsonBlockHash;\n  result: ExecutionResult;\n}\n\n/** Result interface for a get-deploy call */\nexport interface GetDeployResult extends RpcResult {\n  deploy: JsonDeploy;\n  execution_results: JsonExecutionResult[];\n}\n\n/** Result interface for a get-block call */\nexport interface GetBlockResult extends RpcResult {\n  block: JsonBlock | null;\n}\n\n/** Result interface for a account_put_deploy call */\nexport interface DeployResult extends RpcResult {\n  deploy_hash: string;\n}\n\ntype JsonBlockHash = string;\ntype JsonDeployHash = string;\n\n/** JSON system transaction interface */\nexport interface JsonSystemTransaction {\n  Slash?: string;\n  Reward?: Record<string, number>;\n}\n\n/** JSON deploy header interface that acts as a schema for JSON deploy headers */\ninterface JsonDeployHeader {\n  account: string;\n  timestamp: string;\n  ttl: number;\n  gas_price: number;\n  body_hash: string;\n  dependencies: JsonDeployHash[];\n  chain_name: string;\n}\n\ninterface JsonBasicExecutionDeployItemInternal {\n  args: Map<string, CLValue>;\n}\n\ninterface JsonModuleBytes extends JsonBasicExecutionDeployItemInternal {\n  module_bytes: string;\n}\n\ninterface JsonStoredContract extends JsonBasicExecutionDeployItemInternal {\n  entry_point: string;\n}\n\ninterface JsonStoredContractByHash extends JsonStoredContract {\n  hash: string;\n}\n\ninterface JsonStoredContractByName extends JsonStoredContract {\n  name: string;\n}\n\ninterface JsonStoredVersionedContractByName extends JsonStoredContractByName {\n  version: number | null;\n}\n\ninterface JsonStoredVersionedContractByHash extends JsonStoredContractByHash {\n  version: number | null;\n}\n\n/** Interface describing a JSON ExecutableDeployItem */\ninterface JsonExecutableDeployItem {\n  ModuleBytes?: JsonModuleBytes;\n  StoredContractByHash?: JsonStoredContractByHash;\n  StoredContractByName?: JsonStoredContractByName;\n  StoredVersionedContractByName?: JsonStoredVersionedContractByName;\n  StoredVersionedContractByHash?: JsonStoredVersionedContractByHash;\n  Transfer?: JsonBasicExecutionDeployItemInternal;\n}\n\n/** Interface for JSON represented approvals */\ninterface JsonApproval {\n  signer: string;\n  signature: string;\n}\n\n/** Interface describing a JSON represented deploy */\nexport interface JsonDeploy {\n  hash: JsonDeployHash;\n  header: JsonDeployHeader;\n  payment: JsonExecutableDeployItem;\n  session: JsonExecutableDeployItem;\n  approvals: JsonApproval[];\n}\n\n/** Interface describing a JSON represented deploy header */\nexport interface JsonHeader {\n  parent_hash: string;\n  state_root_hash: string;\n  body_hash: string;\n  deploy_hashes: string[];\n  random_bit: boolean;\n  switch_block: boolean;\n  timestamp: string;\n  system_transactions: JsonSystemTransaction[];\n  era_id: number;\n  height: number;\n  proposer: string;\n  protocol_version: string;\n}\n\n/** Interface describing JSON represented block related information */\nexport interface JsonBlock {\n  hash: JsonBlockHash;\n  header: JsonHeader;\n  proofs: string[];\n}\n\n/** Interface describing auction bidding information */\nexport interface BidInfo {\n  bonding_purse: string;\n  staked_amount: string;\n  delegation_rate: number;\n  funds_locked: null | string;\n}\n\n/** Interface describing the weight of a validator by its public key */\nexport interface ValidatorWeight {\n  public_key: string;\n  weight: string;\n}\n\nexport enum PurseIdentifier {\n  MainPurseUnderPublicKey = 'main_purse_under_public_key',\n  MainPurseUnderAccountHash = 'main_purse_under_account_hash',\n  PurseUref = 'purse_uref'\n}\n\n/** Object to represent era specific information */\n@jsonObject\nexport class EraSummary {\n  /** The hash of the block when the era was encountered */\n  @jsonMember({ constructor: String, name: 'block_hash' })\n  blockHash: string;\n\n  /** The id of the era */\n  @jsonMember({ constructor: Number, name: 'era_id' })\n  eraId: number;\n\n  /** A `StoredValue` */\n  @jsonMember(() => ({ constructor: StoredValue, name: 'stored_value' }))\n  StoredValue: StoredValue;\n\n  /** The state root hash when the era was encountered */\n  @jsonMember({ constructor: String, name: 'state_root_hash' })\n  stateRootHash: string;\n}\n\n/** Interface describing the validators at a certain era */\nexport interface EraValidators {\n  era_id: number;\n  validator_weights: ValidatorWeight[];\n}\n\n/** Interface describing a validator auction bid */\nexport interface Bid {\n  bonding_purse: string;\n  staked_amount: string;\n  delegation_rate: number;\n  reward: string;\n  delegators: Delegators[];\n  inactive: boolean;\n}\n\n/** Interface describing a delegator */\nexport interface Delegators {\n  bonding_purse: string;\n  delegatee: string;\n  staked_amount: string;\n  public_key: string;\n}\n\n/** Interface describing a delegator's information */\nexport interface DelegatorInfo {\n  bonding_purse: string;\n  delegatee: string;\n  reward: string;\n  staked_amount: string;\n}\n\n/** Interface describing a validator's auction bid */\nexport interface ValidatorBid {\n  public_key: string;\n  bid: Bid;\n}\n\n/** Interface describing the state of a validator auction */\nexport interface AuctionState {\n  state_root_hash: string;\n  block_height: number;\n  era_validators: EraValidators[];\n  bids: ValidatorBid[];\n}\n\n/** Result interface describing validator information */\nexport interface ValidatorsInfoResult extends RpcResult {\n  api_version: string;\n  auction_state: AuctionState;\n}\n\n/** JSON RPC service for interacting with Casper nodes */\nexport class CasperServiceByJsonRPC {\n  /** JSON RPC client */\n  protected client: Client;\n\n  /**\n   * Constructor for building a `CasperServiceByJsonRPC`\n   * @param provider A provider uri\n   */\n  constructor(provider: string | SafeEventEmitterProvider) {\n    let transport: HTTPTransport | ProviderTransport;\n    if (typeof provider === 'string') {\n      let providerUrl = provider.endsWith('/')\n        ? provider.substring(0, provider.length - 1)\n        : provider;\n\n      providerUrl = providerUrl.endsWith('/rpc')\n        ? providerUrl\n        : providerUrl + '/rpc';\n\n      transport = new HTTPTransport(providerUrl);\n    } else {\n      transport = new ProviderTransport(provider);\n    }\n    const requestManager = new RequestManager([transport]);\n    this.client = new Client(requestManager);\n  }\n\n  /**\n   * Get information about a deploy using its hexadecimal hash\n   * @param deployHashBase16 The base-16 hash of the deploy\n   * @param props optional request props\n   * @returns A `Promise` that resolves to a `GetDeployResult`\n   */\n  public async getDeployInfo(\n    deployHashBase16: string,\n    props?: RpcRequestProps\n  ): Promise<GetDeployResult> {\n    return await this.client.request(\n      {\n        method: 'info_get_deploy',\n        params: {\n          deploy_hash: deployHashBase16\n        }\n      },\n      props?.timeout\n    );\n  }\n\n  /**\n   * Get block information\n   * @param blockHashBase16 A hexadecimal string representing the hash of a block\n   * @param props optional request props\n   * @returns A `Promise` resolving to a `GetBlockResult`\n   */\n  public async getBlockInfo(\n    blockHashBase16: JsonBlockHash,\n    props?: RpcRequestProps\n  ): Promise<GetBlockResult> {\n    return await this.client\n      .request(\n        {\n          method: 'chain_get_block',\n          params: {\n            block_identifier: {\n              Hash: blockHashBase16\n            }\n          }\n        },\n        props?.timeout\n      )\n      .then((res: GetBlockResult) => {\n        if (\n          res.block !== null &&\n          res.block.hash.toLowerCase() !== blockHashBase16.toLowerCase()\n        ) {\n          throw new Error('Returned block does not have a matching hash.');\n        }\n        return res;\n      });\n  }\n\n  /**\n   * Get block info at a provided block height\n   * @param height The block height at which to gather the block info\n   * @param props optional request props\n   * @returns A `Promise` resolving to a `GetBlockResult`\n   */\n  public async getBlockInfoByHeight(\n    height: number,\n    props?: RpcRequestProps\n  ): Promise<GetBlockResult> {\n    return await this.client\n      .request(\n        {\n          method: 'chain_get_block',\n          params: {\n            block_identifier: {\n              Height: height\n            }\n          }\n        },\n        props?.timeout\n      )\n      .then((res: GetBlockResult) => {\n        if (res.block !== null && res.block.header.height !== height) {\n          throw new Error('Returned block does not have a matching height.');\n        }\n        return res;\n      });\n  }\n\n  /**\n   * Get the block info of the latest block added\n   * @param props optional request props\n   * @returns A `Promise` that resolves to a `GetBlockResult`\n   */\n  public async getLatestBlockInfo(\n    props?: RpcRequestProps\n  ): Promise<GetBlockResult> {\n    return await this.client.request(\n      {\n        method: 'chain_get_block'\n      },\n      props?.timeout\n    );\n  }\n\n  /**\n   * Get the attached node's current peers\n   * @param props optional request props\n   * @returns A `Promise` that resolves to a `GetPeersResult`\n   */\n  public async getPeers(props?: RpcRequestProps): Promise<GetPeersResult> {\n    return await this.client.request(\n      {\n        method: 'info_get_peers'\n      },\n      props?.timeout\n    );\n  }\n\n  /**\n   * Get the status of a node\n   * @param props optional request props\n   * @returns A `Promise` that resolves to a `GetStatusResult`\n   */\n  public async getStatus(props?: RpcRequestProps): Promise<GetStatusResult> {\n    return await this.client.request(\n      {\n        method: 'info_get_status'\n      },\n      props?.timeout\n    );\n  }\n\n  /**\n   * Get information on the current validators\n   * @param blockHash (optional) blockHash that you want to check\n   * @param props optional request props\n   * @returns A `Promise` that resolves to a `ValidatorsInfoResult`\n   */\n  public async getValidatorsInfo(\n    blockHash?: string,\n    props?: RpcRequestProps\n  ): Promise<ValidatorsInfoResult> {\n    return await this.client.request(\n      {\n        method: 'state_get_auction_info',\n        params: blockHash\n          ? {\n              block_identifier: {\n                Hash: blockHash\n              }\n            }\n          : []\n      },\n      props?.timeout\n    );\n  }\n\n  /**\n   * Get information on the network validators of at a certain block height\n   * @param blockHeight The block height at which to query the validators' info\n   * @param props optional request props\n   * @returns A `Promise` that resolves to a `ValidatorsInfoResult`\n   */\n  public async getValidatorsInfoByBlockHeight(\n    blockHeight: number,\n    props?: RpcRequestProps\n  ): Promise<ValidatorsInfoResult> {\n    return await this.client.request(\n      {\n        method: 'state_get_auction_info',\n        params: {\n          block_identifier:\n            blockHeight >= 0\n              ? {\n                  Height: blockHeight\n                }\n              : null\n        }\n      },\n      props?.timeout\n    );\n  }\n\n  /**\n   * Get the reference to an account balance uref by an account's account hash, so it may be cached\n   * @param stateRootHash The state root hash at which the main purse URef will be queried\n   * @param accountHash The account hash of the account\n   * @param props optional request props\n   * @returns The account's main purse URef\n   */\n  public async getAccountBalanceUrefByPublicKeyHash(\n    stateRootHash: string,\n    accountHash: string,\n    props?: RpcRequestProps\n  ) {\n    const account = await this.getBlockState(\n      stateRootHash,\n      'account-hash-' + accountHash,\n      [],\n      props\n    ).then(res => res.Account!);\n    return account.mainPurse;\n  }\n\n  /**\n   * Get the reference to an account balance uref by an account's public key, so it may be cached\n   * @param stateRootHash The state root hash at which the main purse URef will be queried\n   * @param publicKey The public key of the account\n   * @param props optional request props\n   * @returns The account's main purse URef\n   * @see [getAccountBalanceUrefByPublicKeyHash](#L380)\n   */\n  public async getAccountBalanceUrefByPublicKey(\n    stateRootHash: string,\n    publicKey: CLPublicKey,\n    props?: RpcRequestProps\n  ) {\n    return this.getAccountBalanceUrefByPublicKeyHash(\n      stateRootHash,\n      encodeBase16(publicKey.toAccountHash()),\n      props\n    );\n  }\n\n  /**\n   * Get the balance of an account using its main purse URef\n   * @param stateRootHash The state root hash at which the account balance will be queried\n   * @param balanceUref The URef of an account's main purse URef\n   * @param props optional request props\n   * @returns An account's balance\n   */\n  public async getAccountBalance(\n    stateRootHash: string,\n    balanceUref: string,\n    props?: RpcRequestProps\n  ): Promise<BigNumber> {\n    return await this.client\n      .request(\n        {\n          method: 'state_get_balance',\n          params: {\n            state_root_hash: stateRootHash,\n            purse_uref: balanceUref\n          }\n        },\n        props?.timeout\n      )\n      .then(res => BigNumber.from(res.balance_value));\n  }\n\n  /**\n   * Returns given purse balance\n   * @param purseIdentifierType purse type enum\n   * @param purseIdentifier purse identifier\n   * @param stateRootHash state root hash at which the block state will be queried\n   * @param props optional request props\n   * @returns Purse balance\n   */\n  public async queryBalance(\n    purseIdentifierType: PurseIdentifier,\n    purseIdentifier: string,\n    stateRootHash?: string,\n    props?: RpcRequestProps\n  ): Promise<BigNumber> {\n    return await this.client\n      .request(\n        {\n          method: 'query_balance',\n          params: {\n            purse_identifier: {\n              [purseIdentifierType]: purseIdentifier\n            },\n            state_identifier: stateRootHash\n          }\n        },\n        props?.timeout\n      )\n      .then(res => BigNumber.from(res.balance));\n  }\n\n  /**\n   * Get the state root hash at a specific block hash\n   * @param blockHashBase16 The hexadecimal string representation of a block hash\n   * @param props optional request props\n   * @returns A `Promise` resolving to a state root hash hexadecimal string\n   */\n  public async getStateRootHash(\n    blockHashBase16?: JsonBlockHash,\n    props?: RpcRequestProps\n  ): Promise<string> {\n    return await this.client\n      .request(\n        {\n          method: 'chain_get_state_root_hash',\n          params: blockHashBase16 ? { block_identifier: blockHashBase16 } : []\n        },\n        props?.timeout\n      )\n      .then((res: GetStateRootHashResult) => res.state_root_hash);\n  }\n\n  /**\n   * Get the global block state at a certain state root hash, path, and key\n   * @param stateRootHash The state root hash at which the block state will be queried\n   * @param key The key at which to query the state\n   * @param path An array of a path / paths at which to query the state\n   * @param props optional request props\n   * @returns The block state at the state root hash, path, and key provided, as a `StoredValue`\n   */\n  public async getBlockState(\n    stateRootHash: string,\n    key: string,\n    path: string[],\n    props?: RpcRequestProps\n  ): Promise<StoredValue> {\n    const res = await this.client.request(\n      {\n        method: 'state_get_item',\n        params: {\n          state_root_hash: stateRootHash,\n          key,\n          path\n        }\n      },\n      props?.timeout\n    );\n    if (res.error) {\n      return res;\n    } else {\n      const storedValueJson = res.stored_value;\n      const serializer = new TypedJSON(StoredValue);\n      const storedValue = serializer.parse(storedValueJson)!;\n      return storedValue;\n    }\n  }\n\n  public async checkDeploySize(deploy: DeployUtil.Deploy) {\n    const oneMegaByte = 1048576;\n    const size = DeployUtil.deploySizeInBytes(deploy);\n    if (size > oneMegaByte) {\n      throw Error(\n        `Deploy can not be send, because it's too large: ${size} bytes. ` +\n          `Max size is 1 megabyte.`\n      );\n    }\n  }\n\n  /**\n   * Deploys a provided signed deploy\n   * @param signedDeploy A signed `Deploy` object to be sent to a node\n   * @param props optional request props\n   * @remarks A deploy must not exceed 1 megabyte\n   */\n  public async deploy(\n    signedDeploy: DeployUtil.Deploy,\n    props?: RpcRequestProps\n  ): Promise<DeployResult> {\n    await this.checkDeploySize(signedDeploy);\n\n    if (signedDeploy.approvals.length == 0) {\n      throw new Error('Required signed deploy');\n    }\n\n    return await this.client.request(\n      {\n        method: 'account_put_deploy',\n        params: DeployUtil.deployToJson(signedDeploy)\n      },\n      props?.timeout\n    );\n  }\n\n  /**\n   * Wait for deploy to be confirmed on-chain\n   * @param signedDeploy deploy signed by the deployer\n   * @param timeout optional parameter for timeout\n   * @returns GetDepoyResult\n   */\n  public async waitForDeploy(signedDeploy: DeployUtil.Deploy, timeout = 60000) {\n    const sleep = (ms: number) => {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    };\n    const timer = setTimeout(() => {\n      throw new Error('Timeout');\n    }, timeout);\n    while (true) {\n      const deploy = await this.getDeployInfo(encodeBase16(signedDeploy.hash));\n      if (deploy.execution_results.length > 0) {\n        clearTimeout(timer);\n        return deploy;\n      } else {\n        await sleep(400);\n      }\n    }\n  }\n\n  // TODO: Update Doc\n  public async speculativeDeploy(\n    signedDeploy: DeployUtil.Deploy,\n    blockIdentifier?: string,\n    props?: RpcRequestProps\n  ) {\n    await this.checkDeploySize(signedDeploy);\n\n    const deploy = DeployUtil.deployToJson(signedDeploy);\n\n    return await this.client.request(\n      {\n        method: 'speculative_exec',\n        params: blockIdentifier\n          ? { ...deploy, block_identifier: { Hash: blockIdentifier } }\n          : { ...deploy }\n      },\n      props?.timeout\n    );\n  }\n  /**\n   * Retrieves all transfers for a block from the network\n   * @param blockHash Hexadecimal block hash. If not provided, the last block added to the chain, known as the given node, will be used\n   * @param props optional request props\n   * @returns A `Promise` resolving to a `Transfers` containing block transfers\n   */\n  public async getBlockTransfers(\n    blockHash?: string,\n    props?: RpcRequestProps\n  ): Promise<Transfers> {\n    const res = await this.client.request(\n      {\n        method: 'chain_get_block_transfers',\n        params: {\n          block_identifier: blockHash\n            ? {\n                Hash: blockHash\n              }\n            : null\n        }\n      },\n      props?.timeout\n    );\n    if (res.error) {\n      return res;\n    } else {\n      const serializer = new TypedJSON(Transfers);\n      const storedValue = serializer.parse(res)!;\n      return storedValue;\n    }\n  }\n\n  /**\n   * Retrieve era information at the block hash of a [switch block](https://docs.casperlabs.io/economics/consensus/#entry)\n   * @param blockHash Hexadecimal block hash. If not provided, the last block added to the chain, known as the given node, will be used\n   * @param props optional request props\n   * @returns A `Promise` resolving to an `EraSummary` containing the era information\n   */\n  public async getEraInfoBySwitchBlock(\n    blockHash?: string,\n    props?: RpcRequestProps\n  ): Promise<EraSummary> {\n    const res = await this.client.request(\n      {\n        method: 'chain_get_era_info_by_switch_block',\n        params: {\n          block_identifier: blockHash\n            ? {\n                Hash: blockHash\n              }\n            : null\n        }\n      },\n      props?.timeout\n    );\n    if (res.error) {\n      return res;\n    } else {\n      const serializer = new TypedJSON(EraSummary);\n      const storedValue = serializer.parse(res.era_summary)!;\n      return storedValue;\n    }\n  }\n\n  /**\n   * Retrieve era information by [switch block](https://docs.casperlabs.io/economics/consensus/#entry) height\n   * @param height The height of the switch block\n   * @param props optional request props\n   * @returns A `Promise` resolving to an `EraSummary` containing the era information\n   */\n  public async getEraInfoBySwitchBlockHeight(\n    height: number,\n    props?: RpcRequestProps\n  ): Promise<EraSummary> {\n    const res = await this.client.request(\n      {\n        method: 'chain_get_era_info_by_switch_block',\n        params: {\n          block_identifier: {\n            Height: height\n          }\n        }\n      },\n      props?.timeout\n    );\n    if (res.error) {\n      return res;\n    } else {\n      const serializer = new TypedJSON(EraSummary);\n      const storedValue = serializer.parse(res.era_summary)!;\n      return storedValue;\n    }\n  }\n\n  /**\n   * Retrieve era summary information by block hash (if provided) or most recently added block\n   * @param blockHash Hexadecimal block hash. If not provided, the last block added to the chain, known as the given node, will be used\n   * @returns A `Promise` resolving to an `EraSummary` containing the era information\n   */\n  public async getEraSummary(blockHash?: string): Promise<EraSummary> {\n    const res = await this.client.request({\n      method: 'chain_get_era_summary',\n      params: {\n        block_identifier: blockHash\n          ? {\n              Hash: blockHash\n            }\n          : null\n      }\n    });\n    if (res.error) {\n      return res;\n    } else {\n      const serializer = new TypedJSON(EraSummary);\n      const storedValue = serializer.parse(res.era_summary)!;\n      return storedValue;\n    }\n  }\n\n  /**\n   * Retrieve era summary information by block height (if provided) or most recently added block\n   * @param blockHeight The height of the switch block\n   * @returns A `Promise` resolving to an `EraSummary` containing the era information\n   */\n  public async getEraSummaryByBlockHeight(\n    blockHeight?: number\n  ): Promise<EraSummary> {\n    const res = await this.client.request({\n      method: 'chain_get_era_summary',\n      params: {\n        block_identifier:\n          blockHeight !== undefined && blockHeight >= 0\n            ? {\n                Height: blockHeight\n              }\n            : null\n      }\n    });\n    if (res.error) {\n      return res;\n    } else {\n      const serializer = new TypedJSON(EraSummary);\n      const storedValue = serializer.parse(res.era_summary)!;\n      return storedValue;\n    }\n  }\n\n  /**\n   * Get a dictionary item by its URef\n   * @param stateRootHash The state root hash at which the item will be queried\n   * @param dictionaryItemKey The key at which the item is stored\n   * @param seedUref The seed URef of the dictionary\n   * @param opts.rawData Returns rawData if true, otherwise return parsed data\n   * @param props optional request props\n   * @returns A `Promise` resolving to a `StoredValue` containing the item\n   */\n  public async getDictionaryItemByURef(\n    stateRootHash: string,\n    dictionaryItemKey: string,\n    seedUref: string,\n    props?: RpcRequestProps & { rawData?: boolean }\n  ): Promise<StoredValue> {\n    const rawData = props?.rawData ?? false;\n    const res = await this.client.request(\n      {\n        method: 'state_get_dictionary_item',\n        params: {\n          state_root_hash: stateRootHash,\n          dictionary_identifier: {\n            URef: {\n              seed_uref: seedUref,\n              dictionary_item_key: dictionaryItemKey\n            }\n          }\n        }\n      },\n      props?.timeout\n    );\n    if (res.error) {\n      return res;\n    } else {\n      const storedValueJson = res.stored_value;\n      if (!rawData) {\n        const serializer = new TypedJSON(StoredValue);\n        return serializer.parse(storedValueJson)!;\n      }\n      return storedValueJson;\n    }\n  }\n\n  /**\n   * Get a dictionary item by its name from within a contract\n   * @param stateRootHash The state root hash at which the item will be queried\n   * @param contractHash The contract hash of the contract that stores the queried dictionary\n   * @param dictionaryName The name of the dictionary\n   * @param dictionaryItemKey The key at which the item is stored\n   * @param opts.rawData Returns rawData if true, otherwise return parsed data\n   * @param props optional request props\n   * @returns A `Promise` resolving to a `StoredValue` containing the item\n   */\n  public async getDictionaryItemByName(\n    stateRootHash: string,\n    contractHash: string,\n    dictionaryName: string,\n    dictionaryItemKey: string,\n    props?: RpcRequestProps & { rawData?: boolean }\n  ): Promise<StoredValue> {\n    const rawData = props?.rawData ?? false;\n\n    const res = await this.client.request(\n      {\n        method: 'state_get_dictionary_item',\n        params: {\n          state_root_hash: stateRootHash,\n          dictionary_identifier: {\n            ContractNamedKey: {\n              key: contractHash,\n              dictionary_name: dictionaryName,\n              dictionary_item_key: dictionaryItemKey\n            }\n          }\n        }\n      },\n      props?.timeout\n    );\n    if (res.error) {\n      return res;\n    } else {\n      const storedValueJson = res.stored_value;\n      if (!rawData) {\n        const serializer = new TypedJSON(StoredValue);\n        return serializer.parse(storedValueJson)!;\n      }\n      return storedValueJson;\n    }\n  }\n}\n","import http from 'http';\nimport https from 'https';\nimport { Result, Ok, Err } from 'ts-results';\n\nexport interface DeploySubscription {\n  deployHash: string;\n  eventHandlerFn: EventHandlerFn;\n}\n\nenum StreamErrors {\n  NotAnEvent,\n  EarlyEndOfStream,\n  MissingDataHeader,\n  MissingDataHeaderAndId,\n  MissingId\n}\n\nexport class DeployWatcher {\n  es: EventStream;\n  watchList: DeploySubscription[] = [];\n\n  constructor(public eventStreamUrl: string) {\n    this.es = new EventStream(eventStreamUrl);\n  }\n\n  subscribe(val: DeploySubscription[]): void {\n    this.watchList = [...this.watchList, ...val];\n  }\n\n  unsubscribe(deployHash: string): void {\n    this.watchList = this.watchList.filter(d => d.deployHash !== deployHash);\n  }\n\n  start() {\n    this.es.subscribe(EventName.DeployProcessed, result => {\n      const deployHash = result.body.DeployProcessed.deploy_hash;\n      const pendingDeploy = this.watchList.find(\n        d => d.deployHash === deployHash\n      );\n      if (pendingDeploy) {\n        pendingDeploy.eventHandlerFn(result);\n        this.unsubscribe(deployHash);\n      }\n    });\n    this.es.start();\n  }\n\n  stop() {\n    this.es.stop();\n  }\n}\n\ntype EventHandlerFn = (result: any) => void;\n\nexport enum EventName {\n  BlockAdded = 'BlockAdded',\n  BlockFinalized = 'BlockFinalized',\n  FinalitySignature = 'FinalitySignature',\n  Fault = 'Fault',\n  DeployProcessed = 'DeployProcessed'\n}\n\ninterface EventSubscription {\n  eventName: EventName;\n  eventHandlerFn: EventHandlerFn;\n}\n\nexport interface EventParseResult {\n  id: string | null;\n  err: StreamErrors | null;\n  body: any | null;\n}\n\nexport class EventStream {\n  subscribedTo: EventSubscription[] = [];\n  pendingDeploysParts: EventParseResult[] = [];\n  pendingDeployString = '';\n  stream?: NodeJS.ReadableStream;\n\n  constructor(public eventStreamUrl: string) {}\n\n  public subscribe(\n    eventName: EventName,\n    eventHandlerFn: EventHandlerFn\n  ): Result<boolean, string> {\n    if (this.subscribedTo.some(e => e.eventName === eventName)) {\n      return Err('Already subscribed to this event');\n    }\n    this.subscribedTo.push({ eventName, eventHandlerFn });\n    return Ok(true);\n  }\n\n  public unsubscribe(eventName: EventName): Result<boolean, string> {\n    if (!this.subscribedTo.some(e => e.eventName === eventName)) {\n      return Err('Cannot find provided subscription');\n    }\n    this.subscribedTo = this.subscribedTo.filter(\n      d => d.eventName !== eventName\n    );\n    return Ok(true);\n  }\n\n  private runEventsLoop(result: EventParseResult) {\n    this.subscribedTo.forEach((sub: EventSubscription) => {\n      if (result.body && result.body.hasOwnProperty(sub.eventName)) {\n        sub.eventHandlerFn(result);\n      }\n    });\n  }\n\n  public start(eventId = 0) {\n    const separator = this.eventStreamUrl.indexOf('?') > -1 ? '&' : '?';\n    const requestUrl = `${this.eventStreamUrl}${separator}start_from=${eventId}`;\n\n    const request = requestUrl.startsWith('https://') ? https.get : http.get;\n\n    request(requestUrl, body => {\n      this.stream = body;\n\n      body.on('data', (buf: Uint8Array) => {\n        const result = parseEvent(Buffer.from(buf).toString());\n        if (result && !result.err) {\n          this.runEventsLoop(result);\n        }\n        if (result.err === StreamErrors.EarlyEndOfStream) {\n          this.pendingDeployString = result.body;\n        }\n        if (result.err === StreamErrors.MissingDataHeaderAndId) {\n          this.pendingDeployString += result.body;\n        }\n        if (result.err === StreamErrors.MissingDataHeader) {\n          this.pendingDeployString += result.body;\n          this.pendingDeployString += `\\nid:${result.id}`;\n\n          const newResult = parseEvent(this.pendingDeployString);\n          if (newResult.err === null) {\n            this.pendingDeployString = '';\n          }\n          this.runEventsLoop(newResult);\n        }\n      });\n      body.once('readable', () => {\n        console.info('Connected successfully to event stream endpoint.');\n      });\n      body.on('error', (error: Error) => {\n        throw error;\n      });\n      body.on('timeout', () => {\n        throw Error('EventStream: Timeout error');\n      });\n      body.on('close', () => {\n        throw Error('EventStream: Connection closed');\n      });\n    });\n  }\n\n  public stop(): void {\n    if (this.stream) this.stream.pause();\n  }\n}\n\nexport const parseEvent = (eventString: string): any => {\n  if (eventString.startsWith('data')) {\n    const splitted = eventString.split('\\n');\n    const id =\n      splitted[1] && splitted[1].startsWith('id:')\n        ? splitted[1].substr(3)\n        : null;\n    try {\n      const body = JSON.parse(splitted[0].substr(5));\n      if (id) {\n        // Note: This is case where there is proper object with JSON body and id in one chunk.\n        return { id, body, err: null };\n      } else {\n        // Note: This is case where there is proper object with JSON body but without ID.\n        return { id, body, err: StreamErrors.MissingId };\n      }\n    } catch {\n      // Note: This is case where there is invalid JSON because of early end of stream.\n      const body = splitted[0];\n      return { id, body, err: StreamErrors.EarlyEndOfStream };\n    }\n  } else {\n    // Note: This is in case where there data chunk which isn't the first one.\n    const splitted = eventString.split('\\n');\n    const body = splitted[0];\n    const id =\n      splitted[1] && splitted[1].startsWith('id:')\n        ? splitted[1].substr(3)\n        : null;\n\n    if (splitted[0] === ':' && splitted[1] === '' && splitted[2] === '') {\n      return { id: null, body: null, err: StreamErrors.NotAnEvent };\n    }\n\n    if (id) {\n      return { id, body, err: StreamErrors.MissingDataHeader };\n    } else {\n      return { id: null, body, err: StreamErrors.MissingDataHeaderAndId };\n    }\n  }\n};\n","import { Transport } from '@open-rpc/client-js/build/transports/Transport';\nimport {\n  JSONRPCRequestData,\n  getNotifications,\n  getBatchRequests,\n  IJSONRPCData,\n  IJSONRPCRequest\n} from '@open-rpc/client-js/build/Request';\nimport { ERR_UNKNOWN, JSONRPCError } from '@open-rpc/client-js/build/Error';\n\nexport type JRPCVersion = '2.0';\nexport type JRPCId = number | string | void;\n\nexport interface JRPCBase {\n  jsonrpc?: JRPCVersion;\n  id?: JRPCId;\n}\n\nexport interface JRPCRequest<T> extends JRPCBase {\n  method: string;\n  params?: T;\n}\n\nexport interface JRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: any;\n}\n\nexport type SendCallBack<U> = (err: any, providerRes: U) => void;\n\nexport interface SafeEventEmitterProvider {\n  sendAsync: <T, U>(req: JRPCRequest<T>) => Promise<U>;\n  send: <T, U>(req: JRPCRequest<T>, callback: SendCallBack<U>) => void;\n}\n\nclass ProviderTransport extends Transport {\n  constructor(public provider: SafeEventEmitterProvider) {\n    super();\n  }\n\n  public connect(): Promise<any> {\n    return Promise.resolve();\n  }\n\n  public async sendData(\n    data: IJSONRPCData,\n    timeout: number | null = null\n  ): Promise<any> {\n    const prom = this.transportRequestManager.addRequest(data, timeout);\n    const notifications = getNotifications(data);\n    const batch = getBatchRequests(data);\n    try {\n      const result = await this.provider.sendAsync(\n        (data.request as IJSONRPCRequest) as JRPCRequest<any>\n      );\n      const jsonrpcResponse = {\n        id: data.request.id,\n        jsonrpc: data.request.jsonrpc,\n        result,\n        error: null\n      };\n      // requirements are that notifications are successfully sent\n      this.transportRequestManager.settlePendingRequest(notifications);\n      if (this.onlyNotifications(data)) {\n        return Promise.resolve();\n      }\n      const responseErr = this.transportRequestManager.resolveResponse(\n        JSON.stringify(jsonrpcResponse)\n      );\n      if (responseErr) {\n        // requirements are that batch requests are successfully resolved\n        // this ensures that individual requests within the batch request are settled\n        this.transportRequestManager.settlePendingRequest(batch, responseErr);\n        return Promise.reject(responseErr);\n      }\n    } catch (e) {\n      const responseErr = new JSONRPCError(e.message, ERR_UNKNOWN, e);\n      this.transportRequestManager.settlePendingRequest(\n        notifications,\n        responseErr\n      );\n      this.transportRequestManager.settlePendingRequest(\n        getBatchRequests(data),\n        responseErr\n      );\n      return Promise.reject(responseErr);\n    }\n    return prom;\n  }\n\n  public close(): void {\n    return;\n  }\n\n  private onlyNotifications = (data: JSONRPCRequestData) => {\n    if (data instanceof Array) {\n      return data.every(\n        datum =>\n          datum.request.request.id === null ||\n          datum.request.request.id === undefined\n      );\n    }\n    return data.request.id === null || data.request.id === undefined;\n  };\n}\n\nexport default ProviderTransport;\n","import fetch from 'node-fetch';\n\ntype TimeJSON = {\n  unixtime: number;\n}\n\nexport class TimeService {\n  constructor(public url: string) {}\n\n  async getTime(): Promise<TimeJSON> {\n    const result = await fetch(this.url);\n    const json = await result.json();\n\n    return json as TimeJSON;\n  }\n}\n","export * from './CasperServiceByJsonRPC';\nexport * from './BalanceServiceByJsonRPC';\nexport * from './EventStream';\n","module.exports = require(\"@ethersproject/bignumber\");","module.exports = require(\"@ethersproject/bytes\");","module.exports = require(\"@ethersproject/constants\");","module.exports = require(\"@noble/curves/ed25519\");","module.exports = require(\"@noble/ed25519\");","module.exports = require(\"@noble/hashes/_assert\");","module.exports = require(\"@noble/hashes/blake2b\");","module.exports = require(\"@noble/hashes/hmac\");","module.exports = require(\"@noble/hashes/ripemd160\");","module.exports = require(\"@noble/hashes/sha256\");","module.exports = require(\"@noble/hashes/sha512\");","module.exports = require(\"@noble/hashes/utils\");","module.exports = require(\"@noble/secp256k1\");","module.exports = require(\"@open-rpc/client-js\");","module.exports = require(\"@open-rpc/client-js/build/Error\");","module.exports = require(\"@open-rpc/client-js/build/Request\");","module.exports = require(\"@open-rpc/client-js/build/transports/Transport\");","module.exports = require(\"@scure/bip32\");","module.exports = require(\"@scure/bip39\");","module.exports = require(\"@scure/bip39/wordlists/english\");","module.exports = require(\"humanize-duration\");","module.exports = require(\"key-encoder\");","module.exports = require(\"node-fetch\");","module.exports = require(\"ts-results\");","module.exports = require(\"typedjson\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(7108);\n"],"names":["root","factory","exports","module","define","amd","a","i","global","TIME_API_URL","DEFAULT_DEPLOY_TTL","toBytesNumber","bitSize","signed","value","val","BigNumber","from","maxUintValue","MaxUint256","mask","bounds","gt","lt","add","One","mul","NegativeOne","Error","Zero","valTwos","toTwos","bytes","arrayify","gte","eq","concat","Uint8Array","length","slice","reverse","byteLength","toBytesU8","toBytesI32","toBytesU32","toBytesU64","toBytesI64","toBytesU128","toBytesU256","toBytesU512","toBytesDeployHash","deployHash","str","arr","Buffer","fromBytesString","byte","toString","toBytesVector","vec","valueByteList","map","e","toBytes","unwrap","splice","x","blake2b","dkLen","toBytesVectorNew","CLValueParsers","resultHelper","arg1","arg2","result","remainder","this","tag","linksTo","toJSON","CLType","ToBytes","isCLValue","data","CLValue","fromJSON","json","clType","matchTypeToCLType","cl_type","uint8bytes","decodeBase16","clEntity","fromBytes","Ok","type","matchByteParserByCLType","rawBytes","encodeBase16","toBytesWithType","clTypeBytes","toBytesArrayU8","fromBytesWithType","CLU32BytesParser","fromBytesWithRemainder","CLU32res","CLU32rem","toNumber","Err","CLErrorCodes","EarlyEndOfStream","valueBytes","subarray","typeBytes","matchBytesToCLType","clValue","innerType","LeftOverBytes","CLValueBytesParsers","ACCOUNT_HASH_LENGTH","ACCOUNT_HASH_TYPE","CLByteArrayType","CLAccountHashType","accountHashBytes","accountHash","CLAccountHash","CLAccountHashBytesParser","v","ANY_TYPE","CLTypeTag","Any","CLAnyType","BOOL_TYPE","Bool","CLBoolType","CLBool","Formatting","CLBoolBytesParser","list","CLListType","tuple1","t0","CLTuple1Type","tuple2","t1","CLTuple2Type","tuple3","t2","CLTuple3Type","option","CLOptionType","CLMapType","publicKey","CLPublicKeyType","byteArray","size","bool","u8","CLU8Type","u32","CLU32Type","i32","CLI32Type","u64","CLU64Type","i64","CLI64Type","u128","CLU128Type","u256","CLU256Type","u512","CLU512Type","unit","CLUnitType","string","CLStringType","key","CLKeyType","uref","CLURefType","CLTypeBuilder","CLList","CLTuple1","CLTuple2","CLTuple3","CLOption","CLMap","rawPublicKey","CLPublicKey","CLByteArray","CLU8","CLU32","CLI32","CLU64","CLI64","CLU128","CLU256","CLU512","CLUnit","CLString","CLKey","accessRights","CLURef","CLValueBuilder","BYTE_ARRAY_TYPE","ByteArray","CLByteArrayBytesParser","KEY_TYPE","Key","isAccount","KeyVariant","Account","isHash","Hash","isURef","URef","hashBytes","hashResult","hashRemainder","hash","CLURefBytesParser","urefResult","urefRemainder","ok","accountHashResult","accountHashRemainder","CLKeyBytesParser","PublicKey","toAccountHash","UREF_TYPE","inner","LIST_TYPE","List","listType","u32Res","u32Rem","parser","vRes","vRem","push","CLListBytesParser","Array","isArray","every","vectorType","d","get","index","set","item","remove","pop","keyType","valueType","Map","MAP_TYPE","innerKey","innerValue","kvBytes","byteKey","byteVal","mapType","kRes","kRem","finalKey","finalValue","CLMapBytesParser","isValueConstructor","refType","forEach","k","has","undefined","find","delete","filter","originalBytes","arrayEquals","isSigned","Math","sign","I32_TYPE","I32","i32Bytes","fromTwos","NumericBytesParser","CLI32BytesParser","num","Numeric","I64_TYPE","I64","CLI64BytesParser","U8_TYPE","U8","CLU8BytesParser","U32_TYPE","U32","u32Bytes","U64_TYPE","U64","u64Bytes","CLU64BytesParser","U128_TYPE","U128","fromBytesBigInt","CLU128BytesParser","U256_TYPE","U256","CLU256BytesParser","U512_TYPE","U512","CLU512BytesParser","byteSize","n","bigIntBytes","Option","OPTION_TYPE","none","some","UnknownValue","U8Res","U8Rem","optionTag","None","valRes","valRem","Some","CLOptionBytesParser","isNone","isSome","CLPublicKeyTag","PUBLIC_KEY_TYPE","expectedPublicKeySize","variant","ED25519","SECP256K1","CLPublicKeyBytesParser","SignatureAlgorithm","Ed25519","Secp256K1","isEd25519","isSecp256K1","toHex","checksummed","rawHex","encode","algorithmIdentifier","separator","prefix","toLowerCase","byteHash","toAccountHashStr","hashHex","toAccountRawHashStr","fromEd25519","fromSecp256K1","fromHex","publicKeyHex","test","isChecksummed","console","warn","publicKeyHexBytes","getTag","getSignatureAlgorithm","signatureAlgorithm","mapTagToSignatureAlgorithm","err","RESULT_TYPE","Result","innerOk","innerErr","CLResultType","isOk","isError","resultTag","referenceErr","referenceOk","CLResult","CLResultBytesParser","STRING_TYPE","String","toBytesString","len","CLStringBytesParser","innerTypes","join","TUPLE_MATCH_LEN_TO_TYPE","t","CLTupleType","rem","Tuple1","Tuple2","Tuple3","CLTupleBytesParser","tupleSize","TUPLE1_TYPE","CLTuple","TUPLE2_TYPE","TUPLE3_TYPE","AccessRights","FORMATTED_STRING_PREFIX","UREF_ADDR_LENGTH","urefBytes","UREF_BYTES_LENGTH","Object","values","includes","fromFormattedStr","input","startsWith","parts","substring","split","parseInt","toFormattedStr","padNum","Unit","UNIT_TYPE","CLUnitBytesParser","valType","vals","typeRem","okTypeRes","okTypeRem","okType","errTypeRes","errType","keyTypeRes","keyTypeRem","valTypeRes","innerTypeRes","innerType1Res","innerType1Rem","innerType1","innerType2Res","innerType2Rem","innerType2","innerType3Res","innerType3Rem","innerType3","nodeUrl","nodeClient","CasperServiceByJsonRPC","newKeyPair","algo","Keys","new","loadPublicKeyFromFile","path","parsePublicKeyFile","loadPrivateKeyFromFile","parsePrivateKeyFile","loadKeyPairFromPrivateFile","newHdWallet","seed","Ed25519HDKey","Secp256K1HDKey","privateToPublicKey","privateKey","makeDeploy","deployParams","session","payment","DeployUtil","signDeploy","deploy","signKeyPair","putDeploy","signedDeploy","then","it","deploy_hash","speculativeDeploy","blockIdentifier","res","deployToJson","deployFromJson","makeTransferDeploy","isTransfer","balanceOfByPublicKey","balanceOfByAccountHash","accountHashStr","getLatestBlockInfo","block","header","state_root_hash","stateRootHash","getAccountBalanceUrefByPublicKeyHash","balanceUref","getAccountBalance","getDeploy","getDeployInfo","getAccountMainPurseUref","CasperClient","wordlist","signatureAlorithm","bip44Path","CasperHDKey","bip44Index","newMnemonic","wordLength","strength","bip39","generateMnemonic","getWordlist","validateMnemonic","mnemonic","mnemonicToSeed","mnemonicToEntropy","newSeed","setWordlist","getDefaultWordlist","entropyToMnemonic","deriveChild","derive","hdKey","HDKey","fromMasterSeed","fromMnemonic","forceHardened","newHdKey","publicKeyRaw","secretKey","verify","signature","msg","secpKeyPair","sha256","MASTER_SECRET","utf8ToBytes","HARDENED_OFFSET","ZERO","ensureBytes","b","hexToBytes","lengths","toU32","Number","isSafeInteger","buf","createView","setUint32","opt","depth","parentFingerprint","chainCode","ed25519","getPublicKey","concatBytes","ripemd160","pubHash","getUint32","bytesToHex","fingerprint","I","hmac","sha512","child","replace","c","m","exec","idx","message","SMALL_BYTES_COUNT","HEX_CHARS","inputNibbles","reduce","accum","of","hashBits","output","j","bytesToBitsCycle","nibble","next","toUpperCase","isSamecase","contractHashToByteArray","contractHash","NO_CLIENT_ERR","casperClient","setContractHash","contractPackageHash","install","wasm","args","paymentAmount","sender","chainName","signingKeys","DeployParams","ExecutableDeployItem","newModuleBytes","standardPayment","checkSetup","callEntrypoint","entryPoint","ttl","contractHashAsByteArray","newStoredContractByHash","queryContractData","client","getStateRootHash","stateRootHashToUse","getBlockState","contractData","queryContractDictionary","dictionaryName","dictionaryItemKey","getDictionaryItemByName","storedValue","Contract","toCLMap","clMap","entries","fromCLMap","jsMap","decodeBase64","base64String","base64","base16String","cspr","motes","div","shortEnglishHumanizer","humanizer","spacer","serialComma","conjunction","delimiter","language","languages","shortEn","h","s","ms","byteArrayJsonSerializer","byteArrayJsonDeserializer","humanizerTTL","dehumanizerTTL","acc","transferId","bigNum","toHexString","fromString","accountHex","transferHex","UniqAddress","account","timestamp","gasPrice","bodyHash","dependencies","DeployHash","jsonMember","serializer","deserializer","hexStr","Date","toISOString","parse","constructor","name","jsonArrayMember","jsonObject","DeployHeader","Approval","getArgByName","setArg","desRA","TypedJSON","RuntimeArgs","serRA","ra","toPlainJson","moduleBytes","toBytesBytesArray","ModuleBytes","ExecutableDeployItemInternal","StoredContractByHash","StoredContractByName","version","serializedVersion","preserveNull","StoredVersionedContractByName","StoredVersionedContractByHash","Transfer","isModuleBytes","isStoredContractByHash","storedContractByHash","isStoredContractByName","storedContractByName","isStoredVersionContractByHash","storedVersionedContractByHash","isStoredVersionContractByName","storedVersionedContractByName","transfer","fromExecutableDeployItemInternal","newStoredContractByName","newStoredVersionContractByHash","newStoredVersionContractByName","newTransfer","amount","target","sourcePurse","id","runtimeArgs","fromMap","insert","newTransferWithOptionalTransferId","newTransferToUniqAddress","source","asModuleBytes","asStoredContractByHash","asStoredContractByName","asStoredVersionContractByName","asStoredVersionContractByHash","asTransfer","ContractType","approvals","isStandardPayment","send","keys","Deploy","serializeHeader","deployHeader","serializeBody","serializeApprovals","approval","signer","deployParam","serializedBody","now","accountPublicKey","serializedHeader","window","TimeService","location","protocol","getTime","unixtime","signingKey","setSignature","sig","paymentArgs","serializationError","valid","validateDeploy","addArgToDeploy","deploySizeInBytes","hashSize","bodySize","pk","signatureRaw","validateSignature","deployToBytes","utils","sha512Sync","secp256k1","hmacSha256Sync","keyEncoder","accountHashHelper","readBase64WithPEM","content","trim","getKeysFromHexPrivKey","rawPrivKeyBytes","privKey","parsePrivateKey","pubKey","parseKeyPair","sync","toPem","AsymmetricKey","keyPair","randomPrivateKey","parseKeyFiles","publicKeyPath","privateKeyPath","parsePublicKey","encodeBase64","readBase64File","parseKey","fs","readFileSync","to","exportPrivateKeyInPem","derPrefix","encoded","exportPublicKeyInPem","originalFormat","publ","priv","rawKeyHex","encodePrivate","encodePublic","signSync","der","nameRes","nameRem","NamedArg","_arr","parsed","fromNamedArgs","namedArgs","pre","cur","sizeRes","sizeRem","remainBytes","namedArgRes","namedArgRem","jsonMapMember","Size","buffer","alloc","writeInt32LE","ByteArrayArg","ByteSequenceArg","PublicKeyArg","UInt64Arg","u64Buffer","writeBigUInt64LE","arrays","formatMessageWithHeaders","signRawMessage","signFormattedMessage","formattedMessageBytes","verifyMessageSignature","messageWithHeader","events","on","listener","addEventListener","off","removeEventListener","listenerToRemove","emit","event","cb","helperPresent","casperlabsHelper","getVersion","Promise","reject","isConnected","sendConnectionRequest","requestConnection","getSelectedPublicKeyBase64","getActivePublicKey","signingPublicKeyHex","targetPublicKeyHex","signMessage","signingPublicKey","disconnectFromSite","forceConnection","signerTestingHelper","forceDisconnect","hasCreatedVault","resetExistingVault","createNewVault","password","createTestAccount","getToSignMessageID","signTestDeploy","msgId","EVENT_TYPE_PREFIX","CasperWalletEventTypes","Connected","ActiveKeyChanged","Disconnected","TabChanged","Locked","Unlocked","options","isCasperWallet","connected","locked","setOption","handleConnected","bind","handleDisconnected","handleActiveKeyChanged","handleLocked","handleUnlocked","handleTabChanged","state","JSON","detail","updateState","activeAccount","error","activeKey","isLocked","casperWalletProvider","connect","disconnect","changeAccount","requestSwitchAccount","SignerError","SignerErrorCodes","INVALID_DEPLOY","stringify","cancelled","USER_CANCELED_REQUEST","signatureHex","getActiveAccount","CasperWalletProvider","NOT_FOUND_SIGNER","CasperWallet","code","SignerErrorMessage","isSignerError","NOT_FOUND_ACCOUNT","INTERNAL_ERROR","Signer","NamedKey","AssociatedKey","ActionThresholds","_accountHash","AccountJson","TransferJson","Transfers","DeployInfoJson","Validator","Delegator","SeigniorageAllocation","EraInfoJson","NamedCLTypeArg","EntryPoint","ContractMetadataJson","ContractVersionJson","DisabledVersionJson","GroupsJson","ContractPackageJson","StoredValue","Contracts","HDKeys","Serialization","casperService","balanceUrefs","blockHashBase16","getAccountBalanceUrefByPublicKey","BalanceServiceByJsonRPC","PurseIdentifier","JSONRPCError","EraSummary","provider","transport","providerUrl","endsWith","HTTPTransport","requestManager","RequestManager","Client","deployHashBase16","props","request","method","params","timeout","getBlockInfo","block_identifier","getBlockInfoByHeight","height","Height","getPeers","getStatus","getValidatorsInfo","blockHash","getValidatorsInfoByBlockHeight","blockHeight","mainPurse","purse_uref","balance_value","queryBalance","purseIdentifierType","purseIdentifier","purse_identifier","state_identifier","balance","storedValueJson","stored_value","checkDeploySize","waitForDeploy","sleep","resolve","setTimeout","timer","execution_results","clearTimeout","getBlockTransfers","getEraInfoBySwitchBlock","era_summary","getEraInfoBySwitchBlockHeight","getEraSummary","getEraSummaryByBlockHeight","getDictionaryItemByURef","seedUref","rawData","dictionary_identifier","seed_uref","dictionary_item_key","ContractNamedKey","dictionary_name","StreamErrors","EventName","eventStreamUrl","watchList","es","EventStream","subscribe","unsubscribe","start","DeployProcessed","body","pendingDeploy","eventHandlerFn","stop","DeployWatcher","subscribedTo","pendingDeploysParts","pendingDeployString","eventName","runEventsLoop","sub","hasOwnProperty","eventId","indexOf","requestUrl","stream","parseEvent","MissingDataHeaderAndId","MissingDataHeader","newResult","once","info","pause","eventString","splitted","substr","NotAnEvent","MissingId","onlyNotifications","datum","sendData","prom","transportRequestManager","addRequest","notifications","getNotifications","batch","getBatchRequests","sendAsync","jsonrpcResponse","jsonrpc","settlePendingRequest","responseErr","resolveResponse","ERR_UNKNOWN","close","Transport","ProviderTransport","url","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}